Para usar o Cadastro de usuário a primeira coisa é ir no site Firestore

Ir para o console / Criação / Authentication / Get Start

Escolha Email-Password, ativar somente "E-mail/senha" e salvar

---------------------
Agora precisa importar isso no arquivo do projeto  firebaseConnection.js

---------Atualizando firebaseConnection.js:

import {initializeApp} from 'firebase/app';
import {getFirestore} from 'firebase/firestore'; // Foi o BD escolhido

import { getAuth } from 'firebase/auth'; // Para cadastrar e login de usuários. Faz autenticação

const firebaseConfig = {
    apiKey: "AIzaSyBetUNEViuR9mbK7herO7zBMJ3Bl2wzErg",
    authDomain: "curso-ccd14.firebaseapp.com",
    projectId: "curso-ccd14",
    storageBucket: "curso-ccd14.appspot.com",
    messagingSenderId: "786603685854",
    appId: "1:786603685854:web:70e2e8c2c394b286a98f4f",
    measurementId: "G-LG27TGR7K1"
  };

  const firebaseApp = initializeApp(firebaseConfig);

  const db = getFirestore(firebaseApp);

  // Para cadastrar e login de usuários. Faz autenticação
  const auth = getAuth(firebaseApp);//firebaseApp faz a conexão com BD

  export { db, auth }; // Não foi default, quando for importar será entre chaves {}

 



-------------------------------Criar uma área para cadastro, email e senha em App.js:

tem que importar os métodos. 
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { db, auth } from './firebaseConnection';

---------------
---------------


import {  useState, useEffect  } from 'react';
import { db, auth } from './firebaseConnection';

import { 
  doc, setDoc, collection, addDoc, getDoc, getDocs, 
  updateDoc, deleteDoc, onSnapshot 
} from 'firebase/firestore'; //Para criar no BD

//área para cadastro, email e senha.
import { createUserWithEmailAndPassword } from 'firebase/auth';

import './app.css';
import { async } from '@firebase/util';

function App() {
  const [titulo, setTitulo] = useState('');
  const [autor, setAutor] = useState('');
  const [idPost, setIdPost] = useState(''); 
  const [post, setPosts] = useState([]);
  
  //área para cadastro, email e senha
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');


  //Criar o efeito Realtime
  useEffect (()=>{
    async function carregarPostagem(){
      //alert("teste carregar postagem");
      const unsub = onSnapshot(collection(db, 'post'), (snapshot)=>{ // basicamente o que acontece em .then

        let listaPost = [];

        snapshot.forEach((doc)=>{ //Vai verificar o tempo todo se há algo novo
          listaPost.push({
            id: doc.id,
            titulo: doc.data().titulo,
            autor: doc.data().autor,
          })
          setPosts(listaPost);
  
        })  
      })
    }
    carregarPostagem();
  }, [])



  async function handleAdd(){
    await addDoc(collection(db, "post"),{
      titulo: titulo,
      autor: autor,
    })

    .then(()=> {
      console.log("Dados registrados no DB");
      alert("Dados inseridos com sucesso.");
      setAutor('');
      setTitulo('');
    })
    .catch((error)=> {
      console.log("Gerou erro " + error);
      alert("ERRO ao cadastrar, tente novamente.");
    })
  } 



  async function buscarDados(){

    const postsRef = collection(db, 'post');
    await getDocs(postsRef)
    
    .then((snapshot) => {
      let lista = [];

      snapshot.forEach((doc)=>{
        lista.push({
          id: doc.id,
          titulo: doc.data().titulo,
          autor: doc.data().autor,
        })
        setPosts(lista);

      })

    })
    .catch((error)=>{
      alert("Erro ao buscar pela sua solicitação")
    })

  }


  
async function editarPost(){
  const docRef = doc(db, 'post', idPost);
  await updateDoc(docRef, {
    titulo: titulo,
    autor: autor,
  })
  .then(()=> {
    console.log("Dados atualizados com sucesso");
    alert("Dados atualizados com sucesso");
    setIdPost('');
    setAutor('');
    setTitulo('');
  })
  .catch((error)=> {   
    console.log("Gerou erro " + error);
    alert(`ERRO ${error} ao atualizar, tente novamente.`);
  })
  
}

async function excluirPost(id){
  const docRef = doc(db, 'post', id);
  await deleteDoc(docRef)

  .then(()=> {
    console.log("Dados deletados no DB");
    alert("Dados deletados com sucesso.");
    //buscarDados();

  })
  .catch((error)=> {
    console.log("Gerou erro " + error);
    alert("ERRO ao deletar, tente novamente.");
  })
}


//área para cadastro, email e senha.
async function novoUsuario(){
  //alert('teste novousuário');
  await createUserWithEmailAndPassword(auth, email, senha) // é uma promise, usar verificações .then e .catch

  .then((value)=> { //Se usar value, é opcional, vai gerar os dados do usuário para poder usar nas aplicações
   // console.log("Dados deletados no DB");
    alert("Cadastrado com sucesso.");
   // console.log(value) //Verifique no console do navegador os dados do usuário
    //console.log(value.user.uid)
    //console.log(value.user.email)

    setEmail('')
    setSenha('')

  })
  .catch((error)=> {
    console.log("Gerou erro " + error);
    alert("ERRO ao cadastrar.");
    
    //Tratar erros:
    if(error.code === 'auth/weak-password'){   //Deve ser acima de 6 dígitos. 
      alert("Senha muito fraca")
    }else if(error.code === 'auth/email-already-in-use'){
      alert('Email já cadastrado anteriormente')
    }
    

  })

}



  return (
    <div>

    <h2>Usuários do site</h2>
    {/*área para cadastro, email e senha. Criar uma useState acima */}
    <div className="container"> 
      <label>Email</label>
      <input 
      value={email} 
      onChange={(e)=> setEmail(e.target.value)}
      placeholder="Digite seu e-mail"
      /> <br/>{/*  .target.value é para passar o que o usuário digitou */}


      <label>Senha</label>
      <input 
      value={senha} 
      onChange={(e)=> setSenha(e.target.value)}
      placeholder="Digite sua senha"
      /> <br/>

      <button onClick={novoUsuario}>Cadastrar</button>

    </div>
    
    <hr/>


    <div className="container">  
    <h2>Postagens</h2>    
      <label>ID da postagem: </label>
      <input 
      placeholder='Digite o ID da postagem' 
      value={idPost} 
      onChange={(e)=> setIdPost(e.target.value)}  ></input><br/>


      <label>Título da postagem: </label>
      <textarea type='text' placeholder='Digite o título: ' 
      value={titulo}
      onChange={ (e)=> setTitulo(e.target.value)}
      />                  
      <label>Autor: </label>
      <input type='text' placeholder='Autor da postagem'
      value={autor}
      onChange={ (e)=> setAutor(e.target.value)}
      /><br/>
      <button onClick={ handleAdd }>Cadastrar</button><br/><br/>
      <button onClick={buscarDados}>Buscar dados</button><br/>     
      <button onClick={editarPost}>Atualizar dados</button>

         
         
      <ul>
        {post.map( (item)=>{
          return(
            <li key={item.id}>
              <strong>ID: {item.id}</strong><br/>
              <span>Título: {item.titulo}</span><br/>
              <span>Autor: {item.autor}</span><br/>

              <button onClick={()=> excluirPost(item.id)}>Excluir</button><br/><br/>

              
            </li>
          );        
        })}
      </ul>

    </div></div>
  );
}

export default App;



---------------
---------------


-----------------------------Após cadastrar vá em users para verificar e fazer os testes:
https://console.firebase.google.com/project/curso-ccd14/authentication/users?hl=pt-br




















