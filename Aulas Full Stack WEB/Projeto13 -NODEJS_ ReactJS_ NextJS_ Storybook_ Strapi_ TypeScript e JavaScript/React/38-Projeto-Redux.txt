Crie uma pasta com nome em MINÚSCULO.
Inicie um projeto novo:
 npx create-react-app .   ( O PONTO VAI APROVEITAR  A MESMA PASTA, sem ter que criar nome novo)




index.css:

body {
  padding: 0;
  outline: 0;
  margin: 0;
  box-sizing: content-box;
  background-color: #242424;

  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

#root{
  max-width: 1020px;
  margin: 0 auto;
  padding: 0 20px 50px;
  /* background-color: aquamarine;  Teste para visualizar o espaço reservado. Maximize a tela do navegador*/
}

button{
  cursor: pointer;
}





--------------------------------------------

src/
---------Importar o index.css em index.js: 

import React from 'react';
import ReactDOM from 'react-dom';

import App from './App';
import './index.css';


ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


-----------------------App.js:

import React from 'react';

export default function App() {
  return (
    <div className="App">
      <h1> teste  App.js</h1>
    </div>
  );
}


-------------------------
Criar src/pages/Home/index.js


import React from 'react';

export default function Home() {
 return (
   <div>
	<h1>Home</h1>
   </div>
 );
}

----------------------
Criar src/pages/Reservas/index.js:


import React from 'react';

export default function Reservas() {
 return (
   <div>
	<h1>Reservas</h1>
   </div>
 );
}


---------------------------------

 npm install react-router-dom
npm install react-router-dom@5.x    Para poder usar Switch(Projetos futuros de outros prof. Não precisa instalar isso. Tem outra forma de fazer.

npm install -g json-server   para rodar API local
npm install axios   para consumir API
npm install react-icons --save
npm install redux react-redux
npm install immer   //Para trabalhar quando houver imutabilidade.


----------------------------------

Criar src/routes.js:

import React from 'react';
import {Switch, Route } from 'react-router-dom';

import Home from './pages/Home';
import Reservas from './pages/Reservas';

export default function Routes(){
    return(
        <Switch>
            <Route path='/'   exact   component={Home} />
            <Route path='/reservas' component={Reservas} />
        </Switch>
    );
}


------------------Atualizar App.js:

import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import Routes from './routes';


export default function App() {
  return (
    <BrowserRouter>
      <Routes />
    </BrowserRouter>
  );
}

------------------Testar npm start
http://localhost:3000
http://localhost:3000/reservas



------------------src/components/Header/index.js:

import React from 'react';

export default function Header() {
 return (
   <div>
    <h1>Header...</h1>
   </div>
 );
}


----------------Atualizar App.js:

import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import Routes from './routes';

import Header from './components/Header';

export default function App() {
  return (
    <BrowserRouter>
      <Header/>
      <Routes />
    </BrowserRouter>
  );
}


------------------No navegador deve aparecer:
Header...
Home



----------------------Atualizar Header:

import React from 'react';
import { Link } from 'react-router-dom';
import logo from '../../assets/logo.svg';
import './style.css';

export default function Header() {
 return (
   <header className='container' >
    <Link to='/'>
      <img className='logo' src={logo} alt='Logo do projeto' />
    </Link>

    <Link className='reserva' to='/reservas'>
      <div>
        <strong>Minhas reservas</strong>
        <span>0 reservas</span>
      </div>
    </Link>

   </header>
 );
}




------------Atualizar header.css:

.container{
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 15px 0;
    padding: 10px 10px;
}

.logo{
    max-width: 110px;
}

.reserva{
    display: flex;
    align-items: center;
    text-decoration: none;
}

.reserva div{
    text-align: right;
    margin-right: 10px;    
}

.reserva strong{
    color: #fff;
    display: block;
}

.reserva span{
    color: #ddd;
    font-size: 15px;
}



--------------------------
Após instalar 
npm install -g json-server para consumir API

REDUX/server.json

Será colado um arquivo demonstrativo nele.



{
  "stock": [
    {
      "id": 1,
      "amount": 10
    },
    {
      "id": 4,
      "amount": 5
    },
    {
      "id": 22,
      "amount": 3
    }
  ],
  "trips": [
    {
      "id": 1,
      "title": "Viagem Maceió 7 noites",
      "status": true,
      "image": "https://sujeitoprogramador.com/wp-content/uploads/2019/12/maceio.jpg"
    },
    {
      "id": 4,
      "title": "Viagem Caribe 5 noites",
      "status": true,
      "image": "https://sujeitoprogramador.com/wp-content/uploads/2019/12/caribe.jpg"
    },
    {
      "id": 22,
      "title": "Viagem Fernando de Noronha 10 noites",
      "status": true,
      "image": "https://sujeitoprogramador.com/wp-content/uploads/2019/12/fernand-noronha.jpg"
    }
  ]
}




----------------------------Rodar essa API fake rsrs  (server.json é o nome do arquivo e 3333 é uma porta escolhida)
json-server server.json -p 3333

Irá rodar em: 
 http://localhost:3333/stock
  http://localhost:3333/trips

*****Deixar esse terminal ABERTO para essa API rodar nesse servidor.
 
Abrir novo terminal: Ctrl+Shift+'


------------
Para consumir API será utilizado o axios "npm install axios"


Criar src/services/api.js:


import axios from "axios";

const api = axios.create({
 baseURL: 'http://localhost:3333/'
});

export default api;




-----------Para testar se está tudo certo vá em Home/index.js:



import React, {useState, useEffect} from 'react';
import api from '../../services/api';

export default function Home() {
  const [trips, setTrips]= useState([]);

  useEffect(()=>{
    async function loadApi(){
      const response = await api.get('trips'); //Acessar trips em api
      setTrips(response.data);
      //console.log(response.data); //Verificar se está tudo ok
    }

    loadApi(); //Criou a função e sempre tem que chamar fora dela

  }, []);


 return (
   <div>
    <h1>Home</h1>
   </div>
 );
}




--------------------Estilizar Home/index.js:




import React, {useState, useEffect} from 'react';
import api from '../../services/api';
import {MdFlightTakeoff} from 'react-icons/md';
import './home.css';

export default function Home() {
  const [trips, setTrips]= useState([]);

  useEffect(()=>{
    async function loadApi(){
      const response = await api.get('trips'); //Acessar trips em api
      setTrips(response.data);
      //console.log(response.data); //Verificar se está tudo ok
    }

    loadApi(); //Criou a função e sempre tem que chamar fora dela

  }, []);

//veja http://localhost:3333/trips   para preencher esta parte
 return (
   <div>
    <div className='box'>
      {trips.map(trip=>(
        <li key={trip.id}>
          <img src={trip.image} alt={trip.title} />
          <strong>{trip.title}</strong>
          {/*<span>Status: {trip.status}</span> *Neste caso boolean pode fazer uma renderização condicional para exibir mensagens */}
          <span>Status: {trip.status ? 'Disponível' : 'Indisponível no momento'}</span>

          <button type='button' 
          onClick={()=>{}}>
            <div>
              <MdFlightTakeoff size={18} color='#fff'/>
            </div>
            <span>Solicitar reserva</span>
          </button>
        
        </li>

      ))}

    </div>
   </div>
 );
}




---------------------- 
Home/home.css:



.box{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 20px;
    list-style: none;    
}

.box li{
    display: flex;
    flex-direction: column;
    background: #fff;
    border-radius: 5px;
    padding: 8px;
}

.box img{
    max-width: 280px;
    max-height: 220px;
    border-radius: 5px;
}

.box strong{
    font-size: 16px;
    line-height: 20px;
    color: #191919;
    margin-top: 10px;
}

.box button{
    margin-top: auto;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    background-color: #191919;
    border: 0;
    border-radius: 5px;
}

.box button div{
    display: flex;
    align-items: center;
    padding: 10px;
}


----------------Em http://localhost:3000/reservas

Por enquanto simular para poder estilizar.
src/Reservas/index.js:


import React from 'react';
import { MdDelete } from 'react-icons/md';
import './reservas.css';

export default function Reservas() {
 return (
   <div>
    <h1 className='title'>Você solicitou 1 reserva</h1>
    <div className='reservas'>
      <img 
      src="https://sujeitoprogramador.com/wp-content/uploads/2019/12/maceio.jpg"
      alt='Maceio'
      />
      <strong>Viagem Maceió</strong>
      <span>Quantidade: 2</span> 
      <button
      type='button'
      onClick={()=>{}}
      >
        <MdDelete size={20} color='#191919'/>
      </button>
    </div>

      <footer>
        <button type='button' >Solicitar reservas</button>
      </footer>
   </div>
 );
}


-------------src/Reservas/reserva.css:



.title{
    color: #fff;    
}

.reservas{
    padding: 20px;
    margin-bottom: 10px;
    background: #fff;
    border-radius: 5px;
    display: flex;
    justify-content: space-between; /*Espaçou tudo de uma vez */
    align-items: center;
}

.reservas img{
    height: 100px;    
}

.reservas button{
    border: 0;
    background-color: #fff;
}

footer button{
    border: 0;
    display: flex;
    padding: 10px;
    text-transform: uppercase;
    border-radius: 5px;
    margin-top: 10px;
    font-weight: bold;
}




--------------------------Aqui será utilizado o redux
npm install redux react-redux

**Está em desuso 'createStore' o recomendado é usar 'configureStore' do
npm install @reduxjs/toolkit


Criar agora um diretório chamado store para armazenar tudo sobre redux.

src/store/index.js:


import { createStore } from 'redux';

const store = createStore(reservar);

export default store;



-----------------Atualizar App.js para que todos os componente possam acessar Redux:

import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import Routes from './routes';
import Header from './components/Header';

import { Provider } from 'react-redux';
import store from './store';

export default function App() {
  return (
    <Provider  store={store} >
        <BrowserRouter>
          <Header/>
          <Routes />
        </BrowserRouter>
    </Provider>  
  );
}



--------------------------Neste momento vai dar um ERRO. Não é possivel ter store vazio.
Criar o primeiro reducer.


src/store/index.js:



/*
npm install redux react-redux

**Está em desuso 'createStore' o recomendado é usar 'configureStore' do
npm install @reduxjs/toolkit

*/

import {createStore} from 'redux';
//import { configureStore } from '@reduxjs/toolkit'

function reservar(){
    return[];
}

//const store = configureStore(reservar);
const store = createStore(reservar);

export default store;


---------------Criar o modules para user, carrinho, checkout etc

src/store/modules/reservar/reducer.js:


Agora mover a função reservar() do store/index.js para reducer.js:


export default function reservar(){
    return[];
}



-----------------Em src/store/index.js:


import reducer from './modules/reservar/reducer';

import {createStore} from 'redux';
//import { configureStore } from '@reduxjs/toolkit'

//const store = configureStore(reducer);
const store = createStore(reducer);

export default store;


--------Neste caso acima fica dificil importar todos os módulos que possam ser criados.
Será corrigido da seguinte forma.

Em modules/rootReducer.js:


import { combineReducers } from "redux";

import reservar from "./reservar/reducer";
//exemplo:
//import users from "./users/reducer";

export default combineReducers({
    reservar,
    //user, // iria carregar todos.
})





-----------------Atualizar src/store/index.js:


import rootReducer from './modules/rootReducer';

import {createStore} from 'redux';
//import { configureStore } from '@reduxjs/toolkit'

//const store = configureStore(reducer);
const store = createStore(rootReducer);

export default store;


---Atualizar src/store/index.js para:

import { configureStore } from '@reduxjs/toolkit'

import rootReducer from './modules/rootReducer';

const store = configureStore({ reducer: rootReducer })

export default store;




------------------------------
------------------------------
Tratar agora da ação do botão "Solicitar reserva". useDispatch vai disparar uma ação para Redux.

Hme/index.js:




import React, {useState, useEffect} from 'react';
import api from '../../services/api';
import {MdFlightTakeoff} from 'react-icons/md';
import './home.css';

//Clique do botão reservar
import { useDispatch } from 'react-redux';

export default function Home() {
  const [trips, setTrips]= useState([]);

  const dispatch = useDispatch();//Clique do botão reservar

  useEffect(()=>{
    async function loadApi(){
      const response = await api.get('trips'); //Acessar trips em api
      setTrips(response.data);
      //console.log(response.data); //Verificar se está tudo ok
    }

    loadApi(); //Criou a função e sempre tem que chamar fora dela

  }, []);


//Clique do botão reservar.
function handleAdd(trip){
  //console.log(trip);// Passar uma ação para Redux. Obrigatório uso do type
  dispatch({
    type: 'ADD_RESERVE',
    trip    //Trip é o que esta recebendo por parâmetro. Será passado para modules/reservar/reducer.js
  })
}



//veja http://localhost:3333/trips   para preencher esta parte
 return (
   <div>
    <div className='box'>
      {trips.map(trip=>(
        <li key={trip.id}>
          <img src={trip.image} alt={trip.title} />
          <strong>{trip.title}</strong>
          {/*<span>Status: {trip.status}</span> *Neste caso boolean pode fazer uma renderização condicional para exibir mensagens */}
          <span>Status: {trip.status ? 'Disponível' : 'Indisponível no momento'}</span>

{/*//Clique do botão reservar. Passar todo o conteudo da vigem com 'trip' para essa nova função*/}
          <button type='button' 
          onClick={()=> handleAdd(trip) }>
            <div>
              <MdFlightTakeoff size={18} color='#fff'/>
            </div>
            <span>Solicitar reserva</span>
          </button>
        
        </li>

      ))}

    </div>
   </div>
 );
}





-----------------modules/reservar/reducer.js:






export default function reservar( state =[], action ){
    //console.log('Teste função reservar()');
    //console.log(action);
    //console.log(state);

    switch(action.type){
        case 'ADD_RESERVE':
            return [ ...state, action.trip ]; //Aqui vai acrescentar os itens clicados. Parecido com uma cesta de e-commerce. Será exibido em components/Header/index.js
        default: 
            return state;   
    }
}



----------------------Atualizar Header/index.js:


import React from 'react';
import { Link } from 'react-router-dom';
import logo from '../../assets/logo.svg';
import './style.css';

//Clique do botão reservar.
import { useSelector } from 'react-redux';//Vai conectar Redux com reducer

export default function Header() {

//Clique do botão reservar.
  const reserveSize = useSelector( state => state.reservar )
  
 // console.log(reserveSize);


 return (
   <header className='container' >
    <Link to='/'>
      <img className='logo' src={logo} alt='Logo do projeto' />
    </Link>

    <Link className='reserva' to='/reservas'>
      <div>
        <strong>Minhas reservas</strong>

{/* Clique do botão reservar. */}
        <span>{reserveSize.length > 1 ?  `${reserveSize.length} reservas` : `${reserveSize.length} reserva`}</span> 
      </div>
    </Link>

   </header>
 );
}


----------------------Atualizar Header/index.js CORRIGINDO length(dessa forma é melhor):



import React from 'react';
import { Link } from 'react-router-dom';
import logo from '../../assets/logo.svg';
import './style.css';

//Clique do botão reservar.
import { useSelector } from 'react-redux';//Vai conectar Redux com reducer

export default function Header() {

//Clique do botão reservar.
  const reserveSize = useSelector( state => state.reservar.length )
  
 // console.log(reserveSize);


 return (
   <header className='container' >
    <Link to='/'>
      <img className='logo' src={logo} alt='Logo do projeto' />
    </Link>

    <Link className='reserva' to='/reservas'>
      <div>
        <strong>Minhas reservas</strong>

{/* Clique do botão reservar. */}
        <span>{reserveSize > 1 ?  `${reserveSize} reservas` : `${reserveSize} reserva`}</span> 
      </div>
    </Link>

   </header>
 );
}



---------------Buscar algum estado, conexão com reducer usar useSelector para adicionar reserva.
pages/Reservas/index.js:

Aqui será duplicada a quantidade de exibição quando reservado mais de um, depois será corrigido.


import React from 'react';
import { MdDelete } from 'react-icons/md';
import './reservas.css';

//Adicionar reserva
import { useSelector } from 'react-redux';

export default function Reservas() {

//Adicionar reserva
  const reserves = useSelector(state => state.reservar);
//Veja em:  http://localhost:3000/reservas
  //console.log('teste adicionar reserva. Reservas()', reserves );// Confirmado acesso ao reducer.

 return (
   <div>
    <h1 className='title'>Você solicitou { reserves.length < 1 ? `${reserves.length} reserva` : `${reserves.length} reservas`} </h1>

{/*//Adicionar reserva */}
    {reserves.map(item=>(     

      <div className='reservas' key={item.id}>{/*Toda vez que usar map() usar uma key no container */}
        <img 
          src={item.image}
          alt={item.title}
        />
        <strong>{item.title}</strong>
        <span>Quantidade: 2</span> 
        <button
          type='button'
          onClick={()=>{}}
        >
          <MdDelete size={20} color='#191919'/>
        </button>
      </div>

    ))}

    
      <footer>
        <button type='button' >Solicitar reservas</button>
      </footer>
   </div>
 );
}




-------------------------------------
Aqui será aumentada a quantidade de itens na exibição.
Para fazer isso vá em modules/reservar/reduce.js:



export default function reservar( state =[], action ){
    //console.log('Teste função reservar()');
    //console.log(action);
    //console.log(state);

    switch(action.type){
        case 'ADD_RESERVE':
            return [ ...state, { //Aumentar itens na reserva em vez de duplicar.
                ...action.trip,
                amount: 1 //Aqui vai passar a quantidade de reserva. Ir para Reservas/index.js
            }]; 
        default: 
            return state;   
    }
}





--------------------------Reservas/index.js:
Corrigindo duplicações. 


import produce from "immer";

export default function reservar( state =[], action ){
    //console.log('Teste função reservar()');
    //console.log(action);
    //console.log(state);

    switch(action.type){
        case 'ADD_RESERVE': 
            return produce(state, draft =>{

                //Se já existir, somar +1
                const tripIndex = draft.findIndex(trip => trip.id === action.trip.id)
                if( tripIndex >= 0 ){
                    draft[tripIndex].amount +=1;
                }else{
                    draft.push({
                        ...action.trip,
                        amount: 1
                    });
                }         

            }); 
        default: 
            return state;   
    }
}


/*Aumentar itens na reserva em vez de duplicar.
Como é imutavel e não será possivel utilizar state.push()
será necessário instalar uma biblioteca chamada Immer
https://immerjs.github.io/immer/

Vai ajudar com essa parte de imutabilidade.
npm install immer

produce() passar PRIMEIRO a state original e depois a cópia.
produce(state, draft   //draft é a cópia

*/


------------------------
------------------------Remover uma reserva.
Reservas/index.js:


import React from 'react';
import { MdDelete } from 'react-icons/md';
import './reservas.css';

//Adicionar reserva   //Remover uma reserva.
import { useSelector, useDispatch } from 'react-redux';

export default function Reservas() {

//Adicionar reserva
  const reserves = useSelector(state => state.reservar);
//Veja em:  http://localhost:3000/reservas
  //console.log('teste adicionar reserva. Reservas()', reserves );// Confirmado acesso ao reducer.

//Remover uma reserva.
  const dispatch =useDispatch();


//Remover uma reserva.
function handleRemove(id){
  //alert(id); //teste
  //Agora precisa disparar uma ação para o reducer poder remover. Será utilizadop o useDispatch
  dispatch({
    type: 'REMOVE_RESERVE',
    id   //id é o item que será enviado para reducer.js
  })
}

 return (
   <div>
    <h1 className='title'>Você solicitou { reserves.length < 1 ? `${reserves.length} reserva` : `${reserves.length} reservas`} </h1>

{/*//Adicionar reserva */}
    {reserves.map(item=>(     

      <div className='reservas' key={item.id}>{/*Toda vez que usar map() usar uma key no container */}
        <img 
          src={item.image}
          alt={item.title}
        />
        <strong>{item.title}</strong>
        <span>Quantidade: { item.amount }</span> {/*//Aumentar itens na reserva em vez de duplicar. */}
        
        {/*//Remover uma reserva. */}
        <button
          type='button'
          onClick={()=> handleRemove(item.id) }
        >
          <MdDelete size={20} color='#191919'/>
        </button>
      </div>

    ))}

    
      <footer>
        <button type='button' >Solicitar reservas</button>
      </footer>
   </div>
 );
}



--------Atualizar reducer.js:

Criar um novo case para remover quantidade




import produce from "immer";

export default function reservar( state =[], action ){
    //console.log('Teste função reservar()');
    //console.log(action);
    //console.log(state);

    switch(action.type){
        case 'ADD_RESERVE': 
            return produce(state, draft =>{

                //Se já existir, somar +1
                const tripIndex = draft.findIndex(trip => trip.id === action.trip.id)
                if( tripIndex >= 0 ){
                    draft[tripIndex].amount +=1;
                }else{
                    draft.push({
                        ...action.trip,
                        amount: 1
                    });
                }         

            });
            
        case 'REMOVE_RESERVE':
            return produce(state, draft=>{
                //Se já existir, subtrair 1
                const tripIndex = draft.findIndex(trip => trip.id === action.id); // Aqui não tem o trip por estar enviando diretamente pelo id
                
                if(tripIndex >= 0 ){ //splice() será usado para excluir na posição 1. Primeiro objeto
                    draft.splice(tripIndex, 1)
                }
                        
            });

        default: 
            return state;   
    }
}


------------------------------
----------------------------
------------------------------
Pode acontecer de criar um site onde terá muitas actions.
Por isso o ideal é separar isso para poder fazer manutenção em algum momento.
Fica melhor organizado deixando tudo separado.

modules/reservar/actions.js:



export function addReserve(trip){
    //Em pages/Home/index.js
    return{
        type: 'ADD_RESERVE',
        trip    //Trip é o que esta recebendo por parâmetro. Será passado para modules/reservar/reducer.js
    }
}


export function removeReserve(id){
    //Em pages/Reservas/index.js
    return{
        type: 'REMOVE_RESERVE',
        id   //id é o item que será enviado para reducer.js
      }
}




-------------------importar addReserve
-----------Agora precisa corrigir pages/Home/index.js:



import React, {useState, useEffect} from 'react';
import api from '../../services/api';
import {MdFlightTakeoff} from 'react-icons/md';
import './home.css';

//Clique do botão reservar
import { useDispatch } from 'react-redux';

import { addReserve } from '../../store/modules/reservar/actions';

export default function Home() {
  const [trips, setTrips]= useState([]);

  const dispatch = useDispatch();//Clique do botão reservar

  useEffect(()=>{
    async function loadApi(){
      const response = await api.get('trips'); //Acessar trips em api
      setTrips(response.data);
      //console.log(response.data); //Verificar se está tudo ok
    }

    loadApi(); //Criou a função e sempre tem que chamar fora dela

  }, []);


//Clique do botão reservar.
function handleAdd(trip){
  //console.log(trip);// Passar uma ação para Redux. Obrigatório uso do type
  dispatch( addReserve(trip) );
}



//veja http://localhost:3333/trips   para preencher esta parte
 return (
   <div>
    <div className='box'>
      {trips.map(trip=>(
        <li key={trip.id}>
          <img src={trip.image} alt={trip.title} />
          <strong>{trip.title}</strong>
          {/*<span>Status: {trip.status}</span> *Neste caso boolean pode fazer uma renderização condicional para exibir mensagens */}
          <span>Status: {trip.status ? 'Disponível' : 'Indisponível no momento'}</span>

{/*//Clique do botão reservar. Passar todo o conteudo da vigem com 'trip' para essa nova função*/}
          <button type='button' 
          onClick={()=> handleAdd(trip) }>
            <div>
              <MdFlightTakeoff size={18} color='#fff'/>
            </div>
            <span>Solicitar reserva</span>
          </button>
        
        </li>

      ))}

    </div>
   </div>
 );
}





-------------------importar 
-----------Agora precisa corrigir pages/Reservas/index.js:



import React from 'react';
import { MdDelete } from 'react-icons/md';
import './reservas.css';

//Adicionar reserva   //Remover uma reserva.
import { useSelector, useDispatch } from 'react-redux';

import { removeReserve } from '../../store/modules/reservar/actions';

export default function Reservas() {

//Adicionar reserva
  const reserves = useSelector(state => state.reservar);
//Veja em:  http://localhost:3000/reservas
  //console.log('teste adicionar reserva. Reservas()', reserves );// Confirmado acesso ao reducer.

//Remover uma reserva.
  const dispatch =useDispatch();


//Remover uma reserva.
function handleRemove(id){
  //alert(id); //teste
  //Agora precisa disparar uma ação para o reducer poder remover. Será utilizadop o useDispatch
  dispatch( removeReserve(id) )
}

 return (
   <div>
    <h1 className='title'>Você solicitou { reserves.length < 1 ? `${reserves.length} reserva` : `${reserves.length} reservas`} </h1>

{/*//Adicionar reserva */}
    {reserves.map(item=>(     

      <div className='reservas' key={item.id}>{/*Toda vez que usar map() usar uma key no container */}
        <img 
          src={item.image}
          alt={item.title}
        />
        <strong>{item.title}</strong>
        <span>Quantidade: { item.amount }</span> {/*//Aumentar itens na reserva em vez de duplicar. */}
        
        {/*//Remover uma reserva. */}
        <button
          type='button'
          onClick={()=> handleRemove(item.id) }
        >
          <MdDelete size={20} color='#191919'/>
        </button>
      </div>

    ))}

    
      <footer>
        <button type='button' >Solicitar reservas</button>
      </footer>
   </div>
 );
}






























