npx create-react-app repos

Pode usar o path Json Viewer no navegador para visualizar.
Consumir API do github:
https://api.github.com/

--------------------------
cd repos
--------------------------
 npm start




Deixar somente Apps.js e index.js com o padrão e zerar o src/index.css:

App.js:


import React from 'react';

function App() {
  return (
    <div >
      app teste
    </div>
  );
}

export default App;





index.css:

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

*:focus{
    outline: 0;
}

/*passar altura padrão do projeto: */
html, body, #root{
	height: 100%;
}




--------------------------------------------

src/
---------Importar o index.css em index.js: 

import React from 'react';
import ReactDOM from 'react-dom';

import App from './App';
import './index.css';


ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


----------------------
-Após testar para terminal Crtl+C


...\Projeto-Repos\repos>

npm install react-router-dom
 npm install react-router-dom@5.x    Para poder usar Switch(Projetos futuros de outros prof. Não precisa instalar isso. Tem outra forma de fazer.
npm install styled-components		Vai fazer a função do CSS. USAR ACENTUAÇÃO DE CRASE `
npm install react-icons
npm install axios      //Para não ter que usar o fetch(). Faz requisições, passar parâmetros etc



Criar:

-------------------

src/pages/Repositorio/index.js:


import React from 'react';

export default function Repositorio(){
    return(
        <h1>Repositorio</h1>
    )
}


-------------------

src/routes.js:


import React from 'react';

export default function Main(){
    return(
        <h1>Main</h1>
    )
}



----------------------

src/pages/Main/index.js:


import {BrowserRouter, Switch, Route} from 'react-router-dom';
import React from 'react';

import Main from './pages/Main';
import Repositorio from './pages/Repositorio';

export default function Routes(){
    return(
        <BrowserRouter>
            <Switch>
                <Route exact path='/' component={Main} />
                <Route exact path='/' component={Repositorio} />

            </Switch>
        </BrowserRouter>
    )
}



----------Atualizar rotas:


import {BrowserRouter, Switch, Route} from 'react-router-dom';
import React from 'react';

import Main from './pages/Main';
import Repositorio from './pages/Repositorio';

export default function Routes(){
    return(
        <BrowserRouter>
            <Switch>
                <Route exact path='/' component={Main} />
                <Route exact path='/repositorio' component={Repositorio} />

            </Switch>
        </BrowserRouter>
    )
}


---------
Testar:
http://localhost:3000/
e
http://localhost:3000/repositorio





------------------------Atualizar routas.
Como o /repositorio vai receber parâmetros, vai aguardar receber API, tem que
escrever da seguinte forma:

<Route exact path='/repositorio/:repositorio' component={Repositorio} />

Para testar depois tem que escrever QUALQUER coisa na frente, exemplo:
http://localhost:3000/repositorio/teste




------------------Configurar estilos com styled-components. USAR ACENTUAÇÃO DE CRASE `
Em src/pages/Main/styles.js :



import styled from 'styled-components';

export const Title = styled.h1` //O que escrever aqui ele vai dar a caracteristica, h1, h2, div etc 

    color: #FF0000;

    span{
        color: blue;
    }
`;

-----
Em src/pages/Main/index.js:


import React from 'react';
import{Title} from './styles';

export default function Main(){
    return(
        <Title>
            <h1>Main</h1>
	    <span>Teste tag span</span>
        </Title>        
    )
}


-----------TESTAR: 
npm start
http://localhost:3000/


***Se o Google Chrome ficar com frescura utilize o FireFox para o desenvolvimento.



-------------Criar um diretório só para styles, criar um global style.

importar em App.js import GlobalStyle from './styles/global';


import React from 'react';
import Routes from './routes';
import GlobalStyle from './styles/global'; //Usar dentro de um fragment <></>

function App() {
  return (
    <>
    <GlobalStyle/>
    <Routes/>
    </>
  );
}

export default App;


--------------
src/styles/global.js:



import {createGlobalStyle} from 'styled-components';

export default createGlobalStyle`
    *{
        margin: 0;
        padding: 0;
        outline-offset: 0;
        box-sizing: border-box;// Vai fazer caber com a margem
    }

//Em public/index.html veja que por padrão <div id="root"
html, body, #root{
    min-height: 100%; //Vai marcar o background na tela toda, não só o que tem dentro de algum componente
}

body{
    background: #0d2632;
    font-size: 14px;
    -webkit-font-smoothing: antialiased !important;//A fonte fica mais arredondada. Caso o navegador tente tirar o !importante faz ele usar
}

body, input, button{
    color: #222;
    font-size: 14px;
    font-family: Arial, Helvetica, sans-serif;
}

button{
    cursor: pointer;
}

`;


--------------------
----------------------
Desenvolver o projeto

npm install react-icons
--------------------
Vai dar erro abaixo porque a pg ainda não foi criada.
Atualizar com Container para criar um desencadeamento de componentes Main/index.js:


import React from 'react';

import{Container} from './styles';

export default function Main(){
    return(
        <Container>
            <h1>Meus repositórios</h1>
            <span>Teste tag span</span>
        </Container>
        
    )
}



----------Atualizar styles.js:
O """Container""" acima será uma div


import styled from 'styled-components';

export const Container = styled.div` //O que escrever aqui ele vai dar a caracteristica, h1, h2, div etc 

    color: #FF0000;

    span{
         color: yellow;
    }
`;


------------F5 no navegador
--------Atualizar Main/index.js:

import React from 'react';
import { Container, Form, SubmitButton } from './styles';

import { FaGithub, FaPlus } from 'react-icons/fa';

export default function Main(){
    return(
        <Container>
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={()=>{}}>

                <input type='text' placeholder='Adicionar repositórios'/>
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}




----------Atualizar styles.js:


import styled from 'styled-components';

export const Container = styled.div`
  max-width: 700px;
  background: #FFF;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0,0,0, 0.2);
  padding: 30px;
  margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/

  h1{
    font-size: 20px;
    display:flex;
    align-items: center;
    flex-direction:row;
    
    svg{
      margin-right: 20px;
    }

  }
`;



export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
    border: 1px solid #DDD;
    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


export const SubmitButton = styled.button`
  background:#0D2636;
  border: 0;
  border-radius: 4px;
  margin-left: 10px;
  padding: 0 15px;
  display: flex;   /*vai alinhar em todos os ângulos*/
  justify-content: center;
  align-items: center;
`;



--------------------Consumir API.
importar useState. Neste ponto abaixo o cod já estará salvando dentro de newRepo.
Main/index.js:




import React, { useState } from 'react';
import { Container, Form, SubmitButton } from './styles';

import { FaGithub, FaPlus } from 'react-icons/fa';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={()=>{}}>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}



-----------Ao clicar em enviar deve consumir API


***O "type" será passado no styles.js para demoinstração.

export const SubmitButton = styled.button.attrs({
  type: 'submit'
  })`



Main/index.js:



import React, { useState } from 'react';
import { Container, Form, SubmitButton } from './styles';

import { FaGithub, FaPlus } from 'react-icons/fa';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    function handleSubmit(e){
        e.preventDefault(); //Para não atualizar a pg quando clicar no botão
        console.log(newRepo); //Para saber se tem algo na variável quando clicou. Veja em inspecionar/Console.

    }


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}





------------------
Neste momento acima deveria usar o fetch(). Neste projeto será usada uma biblioteca chamada AXIOS

Criar src/services/api.js para criar a base:

import axios from "axios";

const api = axios.create({
    baseURL: 'https://api.github.com',
})

export default api;




----------------Main/index.js:
Agora será possivel acessar a API, esse modelo abaixo será modificado, é apenas demostração, MAS LEIA ele!

import React, { useState } from 'react';
import { Container, Form, SubmitButton } from './styles';
import { FaGithub, FaPlus } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    const [repositorios, setRepositorios] =useState('');

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    async function handleSubmit(e){
        e.preventDefault(); //Para não atualizar a pg quando clicar no botão
        //console.log(newRepo); //Para saber se tem algo na variável quando clicou. Veja em inspecionar/Console.

        //Importado api, agora é só fazer a requisição. 
        //Lembrando que esse repos/ é do próprio repositório da requisição lá no Github
        const response= await api.get(`repos/${ newRepo }`) // O que foi digitado no formulário será pesquisado aqui com ""newRepo"""
//Aqui poderia usar o async e depois await, mas usar a biblioteca axios.
//Para saber o que tem use console.log e digite algo como facebook/react no busca do projeto no navegador
        console.log(response.data);
       //api recebeu https://api.github.com

       //Para salvar "full_name"
       const data = {
        name: response.data.full_name,
       }//Criar uma const setRepositorios e trazer aqui para dentro

       setRepositorios([...repositorios, data]); // vai pegar tudo que tem no repositório e data

       //depois da requisição pode apagar a caixa de texto
       setNewRepo('');

    }


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}




----------------Main/index.js:
IMPORTAR USECALLBACK



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton } from './styles';
import { FaGithub, FaPlus } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    const [repositorios, setRepositorios] =useState([]);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
        
            const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            console.log(response.data)

            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}


---------------------Animações do botão de loading
Main/index.js:



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton } from './styles';
import { FaGithub, FaPlus, FaSpinner } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
            //vai tentar fazer a requisição
            try{
                setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo

                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//Quando tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
			<FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>

        </Container>
        
    )
}




------styles.css:



import styled, {keyframes, css} from 'styled-components';

export const Container = styled.div`
  max-width: 700px;
  background: #FFF;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0,0,0, 0.2);
  padding: 30px;
  margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/

  h1{
    font-size: 20px;
    display:flex;
    align-items: center;
    flex-direction:row;
    
    svg{
      margin-right: 20px;
    }

  }
`;



export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
    border: 1px solid #DDD;
    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


// Criar animação para &[disable] do botão. Passar de onde começa e termina
const animate = keyframes`
  from{
    transforrm: rotate(0deg);
  }
  to{
    transform: rotate(360deg);
  }
`;


export const SubmitButton = styled.button.attrs(props=>(  {
  type: 'submit',

//Quando tentar fazer a requisição loading
  disable: props.loading,


  }))`
  background:#0D2636;
  border: 0;
  border-radius: 4px;
  margin-left: 10px;
  padding: 0 15px;
  display: flex;   /*vai alinhar em todos os ângulos*/
  justify-content: center;
  align-items: center;

  //importar  {keyframes, css} 
  &[disable]{
    cursor: not-allowed;
    opacity: 0.5;
  }

  ${props => props.loading && css`
    svg{
      animation: ${animate} 2s linear infinite;
    }
  `}
`;



-----------Listar na tela os repositórios.
Main/index.js:


import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton, List } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
            //vai tentar fazer a requisição
            try{
                setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo

                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span>{repo.name}</span>
                        <a href=''>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}



------styles.css:


import styled, {keyframes, css} from 'styled-components';

export const Container = styled.div`
  max-width: 700px;
  background: #FFF;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0,0,0, 0.2);
  padding: 30px;
  margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/

  h1{
    font-size: 20px;
    display:flex;
    align-items: center;
    flex-direction:row;
    
    svg{
      margin-right: 20px;
    }

  }
`;



export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
    border: 1px solid #DDD;
    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


// Criar animação para &[disable] do botão. Passar de onde começa e termina
const animate = keyframes`
  from{
    transforrm: rotate(0deg);
  }
  to{
    transform: rotate(360deg);
  }
`;


export const SubmitButton = styled.button.attrs(props=>(  {
  type: 'submit',

//Quando tentar fazer a requisição loading
  disable: props.loading,


  }))`
  background:#0D2636;
  border: 0;
  border-radius: 4px;
  margin-left: 10px;
  padding: 0 15px;
  display: flex;   /*vai alinhar em todos os ângulos*/
  justify-content: center;
  align-items: center;

  //importar  {keyframes, css} 
  &[disable]{
    cursor: not-allowed;
    opacity: 0.5;
  }

  ${props => props.loading && css`
    svg{
      animation: ${animate} 2s linear infinite;
    }
  `}
`;


export const List=styled.ul`
  list-style: none;
  margin-top: 20px;

  li{
    padding: 15px 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;

    & + li{ //Só vai aplicar do SEGUNDO em diante
      border-top: 1px solid 		#C0C0C0;
    }

    a{
      color: #0d2636;
      text-decoration: none;
    }
  }

`;


-------------------Criar botão deletar.
Main/index.js:



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton, List, DeleteButton } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars, FaTrash } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
            //vai tentar fazer a requisição
            try{
                setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo

                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span> {/*Criar um componente para Delete  */}

                            <DeleteButton onClick={()=>{}}>
                                <FaTrash size={15}/>
                            </DeleteButton>
                            
                            {repo.name}</span>
                        <a href='#'>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}





------Acrescentar em styles.css:

export const DeleteButton = styled.button.attrs({
  type: 'button'
})`
  margin-left: 6px;
  background: transparent;
  color: #0d2636;
  border: #0d2636;
  padding: 5px 17px 0 0;
  outline: 0;
  border-radius: 5px;
`;




-------------------
Implementar a função deletar Main/index.js:













---TESTAR
No projeto
http://localhost:3000/

Buscar por:
facebook/react
angular/angular










