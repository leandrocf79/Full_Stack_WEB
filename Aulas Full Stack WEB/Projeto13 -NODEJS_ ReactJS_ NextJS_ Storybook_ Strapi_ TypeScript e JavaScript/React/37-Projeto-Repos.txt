npx create-react-app repos

Pode usar o path Json Viewer no navegador para visualizar.
Consumir API do github:
https://api.github.com/

--------------------------
cd repos
--------------------------
 npm start




Deixar somente Apps.js e index.js com o padrão e zerar o src/index.css:

App.js:


import React from 'react';

function App() {
  return (
    <div >
      app teste
    </div>
  );
}

export default App;





index.css:

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

*:focus{
    outline: 0;
}

/*passar altura padrão do projeto: */
html, body, #root{
	height: 100%;
}




--------------------------------------------

src/
---------Importar o index.css em index.js: 

import React from 'react';
import ReactDOM from 'react-dom';

import App from './App';
import './index.css';


ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


----------------------
-Após testar para terminal Crtl+C


...\Projeto-Repos\repos>

npm install react-router-dom
 npm install react-router-dom@5.x    Para poder usar Switch(Projetos futuros de outros prof. Não precisa instalar isso. Tem outra forma de fazer.
npm install styled-components		Vai fazer a função do CSS. USAR ACENTUAÇÃO DE CRASE `
npm install react-icons
npm install axios      //Para não ter que usar o fetch(). Faz requisições, passar parâmetros etc
npm install --save react-toastify


Criar:

-------------------

src/pages/Repositorio/index.js:


import React from 'react';

export default function Repositorio(){
    return(
        <h1>Repositorio</h1>
    )
}


-------------------

src/routes.js:


import React from 'react';

export default function Main(){
    return(
        <h1>Main</h1>
    )
}



----------------------

src/pages/Main/index.js:


import {BrowserRouter, Switch, Route} from 'react-router-dom';
import React from 'react';

import Main from './pages/Main';
import Repositorio from './pages/Repositorio';

export default function Routes(){
    return(
        <BrowserRouter>
            <Switch>
                <Route exact path='/' component={Main} />
                <Route exact path='/' component={Repositorio} />

            </Switch>
        </BrowserRouter>
    )
}



----------Atualizar rotas:


import {BrowserRouter, Switch, Route} from 'react-router-dom';
import React from 'react';

import Main from './pages/Main';
import Repositorio from './pages/Repositorio';

export default function Routes(){
    return(
        <BrowserRouter>
            <Switch>
                <Route exact path='/' component={Main} />
                <Route exact path='/repositorio' component={Repositorio} />

            </Switch>
        </BrowserRouter>
    )
}


---------
Testar:
http://localhost:3000/
e
http://localhost:3000/repositorio





------------------------Atualizar routas.
Como o /repositorio vai receber parâmetros, vai aguardar receber API, tem que
escrever da seguinte forma:

<Route exact path='/repositorio/:repositorio' component={Repositorio} />

Para testar depois tem que escrever QUALQUER coisa na frente, exemplo:
http://localhost:3000/repositorio/teste




------------------Configurar estilos com styled-components. USAR ACENTUAÇÃO DE CRASE `
Em src/pages/Main/styles.js :



import styled from 'styled-components';

export const Title = styled.h1` //O que escrever aqui ele vai dar a caracteristica, h1, h2, div etc 

    color: #FF0000;

    span{
        color: blue;
    }
`;

-----
Em src/pages/Main/index.js:


import React from 'react';
import{Title} from './styles';

export default function Main(){
    return(
        <Title>
            <h1>Main</h1>
	    <span>Teste tag span</span>
        </Title>        
    )
}


-----------TESTAR: 
npm start
http://localhost:3000/


***Se o Google Chrome ficar com frescura utilize o FireFox para o desenvolvimento.



-------------Criar um diretório só para styles, criar um global style.

importar em App.js import GlobalStyle from './styles/global';


import React from 'react';
import Routes from './routes';
import GlobalStyle from './styles/global'; //Usar dentro de um fragment <></>

function App() {
  return (
    <>
    <GlobalStyle/>
    <Routes/>
    </>
  );
}

export default App;


--------------
src/styles/global.js:



import {createGlobalStyle} from 'styled-components';

export default createGlobalStyle`
    *{
        margin: 0;
        padding: 0;
        outline-offset: 0;
        box-sizing: border-box;// Vai fazer caber com a margem
    }

//Em public/index.html veja que por padrão <div id="root"
html, body, #root{
    min-height: 100%; //Vai marcar o background na tela toda, não só o que tem dentro de algum componente
}

body{
    background: #0d2632;
    font-size: 14px;
    -webkit-font-smoothing: antialiased !important;//A fonte fica mais arredondada. Caso o navegador tente tirar o !importante faz ele usar
}

body, input, button{
    color: #222;
    font-size: 14px;
    font-family: Arial, Helvetica, sans-serif;
}

button{
    cursor: pointer;
}

`;


--------------------
----------------------
Desenvolver o projeto

npm install react-icons
--------------------
Vai dar erro abaixo porque a pg ainda não foi criada.
Atualizar com Container para criar um desencadeamento de componentes Main/index.js:


import React from 'react';

import{Container} from './styles';

export default function Main(){
    return(
        <Container>
            <h1>Meus repositórios</h1>
            <span>Teste tag span</span>
        </Container>
        
    )
}



----------Atualizar styles.js:
O """Container""" acima será uma div


import styled from 'styled-components';

export const Container = styled.div` //O que escrever aqui ele vai dar a caracteristica, h1, h2, div etc 

    color: #FF0000;

    span{
         color: yellow;
    }
`;


------------F5 no navegador
--------Atualizar Main/index.js:

import React from 'react';
import { Container, Form, SubmitButton } from './styles';

import { FaGithub, FaPlus } from 'react-icons/fa';

export default function Main(){
    return(
        <Container>
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={()=>{}}>

                <input type='text' placeholder='Adicionar repositórios'/>
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}




----------Atualizar styles.js:


import styled from 'styled-components';

export const Container = styled.div`
  max-width: 700px;
  background: #FFF;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0,0,0, 0.2);
  padding: 30px;
  margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/

  h1{
    font-size: 20px;
    display:flex;
    align-items: center;
    flex-direction:row;
    
    svg{
      margin-right: 20px;
    }

  }
`;



export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
    border: 1px solid #DDD;
    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


export const SubmitButton = styled.button`
  background:#0D2636;
  border: 0;
  border-radius: 4px;
  margin-left: 10px;
  padding: 0 15px;
  display: flex;   /*vai alinhar em todos os ângulos*/
  justify-content: center;
  align-items: center;
`;



--------------------Consumir API.
importar useState. Neste ponto abaixo o cod já estará salvando dentro de newRepo.
Main/index.js:




import React, { useState } from 'react';
import { Container, Form, SubmitButton } from './styles';

import { FaGithub, FaPlus } from 'react-icons/fa';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={()=>{}}>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}



-----------Ao clicar em enviar deve consumir API


***O "type" será passado no styles.js para demoinstração.

export const SubmitButton = styled.button.attrs({
  type: 'submit'
  })`



Main/index.js:



import React, { useState } from 'react';
import { Container, Form, SubmitButton } from './styles';

import { FaGithub, FaPlus } from 'react-icons/fa';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    function handleSubmit(e){
        e.preventDefault(); //Para não atualizar a pg quando clicar no botão
        console.log(newRepo); //Para saber se tem algo na variável quando clicou. Veja em inspecionar/Console.

    }


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}





------------------
Neste momento acima deveria usar o fetch(). Neste projeto será usada uma biblioteca chamada AXIOS

Criar src/services/api.js para criar a base:

import axios from "axios";

const api = axios.create({
    baseURL: 'https://api.github.com',  // "repository_url": "https://api.github.com/repos/{owner}/{repo}",
})

export default api;




----------------Main/index.js:
Agora será possivel acessar a API, esse modelo abaixo será modificado, é apenas demostração, MAS LEIA ele!

import React, { useState } from 'react';
import { Container, Form, SubmitButton } from './styles';
import { FaGithub, FaPlus } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    const [repositorios, setRepositorios] =useState('');

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    async function handleSubmit(e){
        e.preventDefault(); //Para não atualizar a pg quando clicar no botão
        //console.log(newRepo); //Para saber se tem algo na variável quando clicou. Veja em inspecionar/Console.

        //Importado api, agora é só fazer a requisição. 
        //Lembrando que esse repos/ é do próprio repositório da requisição lá no Github
        const response= await api.get(`repos/${ newRepo }`) // O que foi digitado no formulário será pesquisado aqui com ""newRepo"""
//Aqui poderia usar o async e depois await, mas usar a biblioteca axios.
//Para saber o que tem use console.log e digite algo como facebook/react no busca do projeto no navegador
        console.log(response.data);
       //api recebeu https://api.github.com

       //Para salvar "full_name"
       const data = {
        name: response.data.full_name,
       }//Criar uma const setRepositorios e trazer aqui para dentro

       setRepositorios([...repositorios, data]); // vai pegar tudo que tem no repositório e data

       //depois da requisição pode apagar a caixa de texto
       setNewRepo('');

    }


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}




----------------Main/index.js:
IMPORTAR USECALLBACK



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton } from './styles';
import { FaGithub, FaPlus } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');

    const [repositorios, setRepositorios] =useState([]);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
        
            const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            console.log(response.data)

            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />
                <SubmitButton>
                    <FaPlus color='#fff' size={15}/>
                </SubmitButton>

            </Form>

        </Container>
        
    )
}


---------------------Animações do botão de loading
Main/index.js:



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton } from './styles';
import { FaGithub, FaPlus, FaSpinner } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
	    setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo


            //vai tentar fazer a requisição
            try{
                
                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//Quando tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
			<FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>

        </Container>
        
    )
}




------styles.css:



import styled, {keyframes, css} from 'styled-components';

export const Container = styled.div`
  max-width: 700px;
  background: #FFF;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0,0,0, 0.2);
  padding: 30px;
  margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/

  h1{
    font-size: 20px;
    display:flex;
    align-items: center;
    flex-direction:row;
    
    svg{
      margin-right: 20px;
    }

  }
`;



export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
    border: 1px solid #DDD;
    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


// Criar animação para &[disable] do botão. Passar de onde começa e termina
const animate = keyframes`
  from{
    transforrm: rotate(0deg);
  }
  to{
    transform: rotate(360deg);
  }
`;


export const SubmitButton = styled.button.attrs(props=>(  {
  type: 'submit',

//Quando tentar fazer a requisição loading
  disable: props.loading,


  }))`
  background:#0D2636;
  border: 0;
  border-radius: 4px;
  margin-left: 10px;
  padding: 0 15px;
  display: flex;   /*vai alinhar em todos os ângulos*/
  justify-content: center;
  align-items: center;

  //importar  {keyframes, css} 
  &[disable]{
    cursor: not-allowed;
    opacity: 0.5;
  }

  ${props => props.loading && css`
    svg{
      animation: ${animate} 2s linear infinite;
    }
  `}
`;



-----------Listar na tela os repositórios.
Main/index.js:


import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton, List } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
	    setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo


            //vai tentar fazer a requisição
            try{
               
                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span>{repo.name}</span>
                        <a href=''>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}



------styles.css:


import styled, {keyframes, css} from 'styled-components';

export const Container = styled.div`
  max-width: 700px;
  background: #FFF;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0,0,0, 0.2);
  padding: 30px;
  margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/

  h1{
    font-size: 20px;
    display:flex;
    align-items: center;
    flex-direction:row;
    
    svg{
      margin-right: 20px;
    }

  }
`;



export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
    border: 1px solid #DDD;
    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


// Criar animação para &[disable] do botão. Passar de onde começa e termina
const animate = keyframes`
  from{
    transforrm: rotate(0deg);
  }
  to{
    transform: rotate(360deg);
  }
`;


export const SubmitButton = styled.button.attrs(props=>(  {
  type: 'submit',

//Quando tentar fazer a requisição loading
  disable: props.loading,


  }))`
  background:#0D2636;
  border: 0;
  border-radius: 4px;
  margin-left: 10px;
  padding: 0 15px;
  display: flex;   /*vai alinhar em todos os ângulos*/
  justify-content: center;
  align-items: center;

  //importar  {keyframes, css} 
  &[disable]{
    cursor: not-allowed;
    opacity: 0.5;
  }

  ${props => props.loading && css`
    svg{
      animation: ${animate} 2s linear infinite;
    }
  `}
`;


export const List=styled.ul`
  list-style: none;
  margin-top: 20px;

  li{
    padding: 15px 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;

    & + li{ //Só vai aplicar do SEGUNDO em diante
      border-top: 1px solid 		#C0C0C0;
    }

    a{
      color: #0d2636;
      text-decoration: none;
    }
  }

`;


-------------------Criar botão deletar.
Main/index.js:



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton, List, DeleteButton } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars, FaTrash } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
	    setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo



            //vai tentar fazer a requisição
            try{
                
                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    

    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span> {/*Criar um componente para Delete  */}

                            <DeleteButton onClick={()=>{}}>
                                <FaTrash size={15}/>
                            </DeleteButton>
                            
                            {repo.name}</span>
                        <a href='#'>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}





------Acrescentar em styles.css:

export const DeleteButton = styled.button.attrs({
  type: 'button'
})`
  margin-left: 6px;
  background: transparent;
  color: #0d2636;
  border: #0d2636;
  padding: 5px 17px 0 0;
  outline: 0;
  border-radius: 5px;
`;




-------------------
Implementar a função deletar Main/index.js:





import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton, List, DeleteButton } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars, FaTrash } from 'react-icons/fa';

import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);

    const[loading, setLoading]=useState(false);

    function handleInputChange(e){
        setNewRepo(e.target.value);
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
	    setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo


            //vai tentar fazer a requisição
            try{
                
                const response= await api.get(`repos/${ newRepo }`) 
    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    
//Implementar a função deletar. COMO VAI MANIPULAR, PEGAR DADOS E ALTERAR  DADOS usar const e não uma função
const HandleDelete = useCallback((repo)=> {
    //repo vai receber o nome
    const find = repositorios.filter(r=>r.name !== repo); //Vai pegar TODAS que não clicou e devolver para a variável find MENOS a que está clicada e será apagada

    setRepositorios(find);
}, [repositorios]);


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit }>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span> {/*Criar um componente para Delete  */}

                            <DeleteButton onClick={()=> HandleDelete(repo.name) }>
                                <FaTrash size={15}/>
                            </DeleteButton>
                            
                            {repo.name}</span>
                        <a href='#'>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}







---TESTAR
No projeto
http://localhost:3000/

Buscar por:
facebook/react
angular/angular



------------------------Manter a informação na tela, apagar somente quando clicar em deletar.
Main/index.js:

Primeira coisa é ir no try, que é onde está tentando fazer a verificação. Criar uma verificação condicional if para saber se está em branco etc.



import React, {  useCallback, useState } from 'react';
import { Container, Form, SubmitButton, List, DeleteButton } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars, FaTrash } from 'react-icons/fa';
import { toast } from 'react-toastify';
import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);
    const [loading, setLoading]=useState(false);

     // Manter a informação na tela. Fazer ALERTAS.
     const [alerta, setAlerta]=useState(null);

    function handleInputChange(e){
        setNewRepo(e.target.value);
        setAlerta(null);//Passar para null para exibir a borda vermelha do styles.js e garantir que vai digitar corretamente
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
            setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo
             setAlerta(null);// Manter a informação na tela. Garantir que está null



           // Manter a informação na tela. Fazer verificações antes se está em branco ou outra coisa, duplicado...
           if(newRepo === ''){
            toast.error('Precisa indicar um repósitório existente.');
            throw new Error('Precisa indicar um repósitório existente.');
            

           }



            //vai tentar fazer a requisição
            try{
                
                const response= await api.get(`repos/${ newRepo }`) 

                 // Manter a informação na tela. Fazer verificações antes se está duplicado.
                 const hasRepo= repositorios.find(repo => repo.name === newRepo);
                 if(hasRepo){
                    toast.info('Esse repositório já está na sua lista.');
                    throw new Error('Repositório duplicado.');
                    
                 }

    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                // Manter a informação na tela. Se der erro:
                setAlerta(true); //Será passado para Form error. error={alerta}    Veja em styles.js (Form / input) como ficou.
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    
//Implementar a função deletar. COMO VAI MANIPULAR, PEGAR DADOS E ALTERAR  DADOS usar const e não uma função
const HandleDelete = useCallback((repo)=> {
    //repo vai receber o nome
    const find = repositorios.filter(r=>r.name !== repo); //Vai pegar TODAS que não clicou e devolver para a variável find MENOS a que está clicada e será apagada

    setRepositorios(find);
}, [repositorios]);


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit } error={alerta}>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span> {/*Criar um componente para Delete  */}

                            <DeleteButton onClick={()=> HandleDelete(repo.name) }>
                                <FaTrash size={15}/>
                            </DeleteButton>
                            
                            {repo.name}</span>
                        <a href='#'>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}




------------Atualizar esta parte do styles.js:

export const Form = styled.form`
  margin-top: 30px;
  display:flex;
  flex-direction: row;

  input{
    flex:1;
     // Manter a informação na tela. Se der erro exibir através do border.
    //border: 1px solid #DDD;
    border: 1px solid ${props=> ( props.error ? '#ff0000' : '#ddd' )};// Agora ir em handleInputChange para garantir que vai digitar corretamente

    padding: 10px 15px;
    border-radius: 4px;
    font-size: 17px;
  }  
`;


----------------------
-----------------Agora sim salvar em localStorage. Criar DidMount(Buscar) e DidUpdate(Salvar alterações). Importar useEffect

****** DEIXAR DidMount """ACIMA""" PARA MANTER A INFORMAÇÃO NA TELA. Se deixar abaixo de DidUpdate ele apaga tudo. 
Main/index.js:




import React, {  useCallback, useState, useEffect } from 'react';
import { Container, Form, SubmitButton, List, DeleteButton } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars, FaTrash } from 'react-icons/fa';
import { toast } from 'react-toastify';
import api from '../../services/api';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);
    const [loading, setLoading]=useState(false);
     // Manter a informação na tela. Fazer ALERTAS.
     const [alerta, setAlerta]=useState(null);

    // Salvar em localStorage. Criar DidMount e DidUpdate. Importar useEffect


    // DidMount - Buscar ****** DEIXAR DidMount """ACIMA""" PARA MANTER A INFORMAÇÃO NA TELA. Se deixar abaixo de DidUpdate ele apaga tudo.
    useEffect(()=>{
        const repoStorage = localStorage.getItem('repos'); // 'repos' foi o nome dado para salvar.
        
        if(repoStorage){ // Se tiver algo salvo colocar no array
            setRepositorios(JSON.parse(repoStorage)); //Tirar conversão do localStorage aqui. Testar o projeto agora.
        }

    }, []);


    // DidUpdate - Salvar alterções. Buscar TUDO que tiver e salvar
    useEffect(()=>{
        localStorage.setItem('repos', JSON.stringify(repositorios));//Converter sempre para localStorage

    }, [repositorios]);// Se deixar essa parte em branco vai fazer como se fosse DidMount, por isso passar parametro.
    
   
    

    



    function handleInputChange(e){
        setNewRepo(e.target.value);
        setAlerta(null);//Passar para null para exibir a borda vermelha do styles.js e garantir que vai digitar corretamente
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
            setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo
             setAlerta(null);// Manter a informação na tela. Garantir que está null



           // Manter a informação na tela. Fazer verificações antes se está em branco ou outra coisa, duplicado...
           if(newRepo === ''){
            toast.error('Precisa indicar um repósitório existente.');
            throw new Error('Precisa indicar um repósitório existente.');
            

           }



            //vai tentar fazer a requisição
            try{
                
                const response= await api.get(`repos/${ newRepo }`) 

                 // Manter a informação na tela. Fazer verificações antes se está duplicado.
                 const hasRepo= repositorios.find(repo => repo.name === newRepo);
                 if(hasRepo){
                    toast.info('Esse repositório já está na sua lista.');
                    throw new Error('Repositório duplicado.');
                    
                 }

    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                // Manter a informação na tela. Se der erro:
                setAlerta(true); //Será passado para Form error. error={alerta}    Veja em styles.js (Form / input) como ficou.
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    
//Implementar a função deletar. COMO VAI MANIPULAR, PEGAR DADOS E ALTERAR  DADOS usar const e não uma função
const HandleDelete = useCallback((repo)=> {
    //repo vai receber o nome
    const find = repositorios.filter(r=>r.name !== repo); //Vai pegar TODAS que não clicou e devolver para a variável find MENOS a que está clicada e será apagada

    setRepositorios(find);
}, [repositorios]);


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit } error={alerta}>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span> {/*Criar um componente para Delete  */}

                            <DeleteButton onClick={()=> HandleDelete(repo.name) }>
                                <FaTrash size={15}/>
                            </DeleteButton>
                            
                            {repo.name}</span>
                        <a href='#'>
                            <FaBars size={20}/>
                        </a>
                    </li>
                ))}
            </List>             



        </Container>
        
    )
}




-----------------------------
------------Passar detalhes do repositório.

O FiBars é o icone que passará os detalhes do repositório.
Importar Link e tirar o <a>
Main/index.js:


import React, {  useCallback, useState, useEffect } from 'react';
import { Container, Form, SubmitButton, List, DeleteButton } from './styles';
import { FaGithub, FaPlus, FaSpinner, FaBars, FaTrash } from 'react-icons/fa';
import { toast } from 'react-toastify';
import api from '../../services/api';

import { Link } from 'react-router-dom';

export default function Main(){

    const [newRepo, setNewRepo]=useState('');
    const [repositorios, setRepositorios] =useState([]);
    const [loading, setLoading]=useState(false);
     // Manter a informação na tela. Fazer ALERTAS.
     const [alerta, setAlerta]=useState(null);

    // Salvar em localStorage. Criar DidMount e DidUpdate. Importar useEffect


    // DidMount - Buscar ****** DEIXAR DidMount """ACIMA""" PARA MANTER A INFORMAÇÃO NA TELA. Se deixar abaixo de DidUpdate ele apaga tudo.
    useEffect(()=>{
        const repoStorage = localStorage.getItem('repos'); // 'repos' foi o nome dado para salvar.
        
        if(repoStorage){ // Se tiver algo salvo colocar no array
            setRepositorios(JSON.parse(repoStorage)); //Tirar conversão do localStorage aqui. Testar o projeto agora.
        }

    }, []);


    // DidUpdate - Salvar alterções. Buscar TUDO que tiver e salvar
    useEffect(()=>{
        localStorage.setItem('repos', JSON.stringify(repositorios));//Converter sempre para localStorage

    }, [repositorios]);// Se deixar essa parte em branco vai fazer como se fosse DidMount, por isso passar parametro.
    
   
    

    function handleInputChange(e){
        setNewRepo(e.target.value);
        setAlerta(null);//Passar para null para exibir a borda vermelha do styles.js e garantir que vai digitar corretamente
    }

    const handleSubmit = useCallback((e)=>{
        e.preventDefault();

        async function submit(){
            setLoading(true);// true por estar tentando fazer a requisiçãoe depois dar um false lá em baixo
             setAlerta(null);// Manter a informação na tela. Garantir que está null



           // Manter a informação na tela. Fazer verificações antes se está em branco ou outra coisa, duplicado...
           if(newRepo === ''){
            toast.error('Precisa indicar um repósitório existente.');
            throw new Error('Precisa indicar um repósitório existente.');
            

           }



            //vai tentar fazer a requisição
            try{
                
                const response= await api.get(`repos/${ newRepo }`) 

                 // Manter a informação na tela. Fazer verificações antes se está duplicado.
                 const hasRepo= repositorios.find(repo => repo.name === newRepo);
                 if(hasRepo){
                    toast.info('Esse repositório já está na sua lista.');
                    throw new Error('Repositório duplicado.');
                    
                 }

    
            //Para salvar "full_name"
            const data = {
              name: response.data.full_name,
            }

            setRepositorios([...repositorios, data]);        
            setNewRepo('');
            //console.log(response.data)
            }
            catch(err){
                // Manter a informação na tela. Se der erro:
                setAlerta(true); //Será passado para Form error. error={alerta}    Veja em styles.js (Form / input) como ficou.
                console.log(err);

            }finally{//para cancelar a busca 
                setLoading(false); // Voltar para false
            }
        
            
            }
        submit(); //Tem que chamar aqui para ser executada a função
    },[newRepo, repositorios]);//Quando uma ou outra for atualizada vai chamar o useCallback
      
    
//Implementar a função deletar. COMO VAI MANIPULAR, PEGAR DADOS E ALTERAR  DADOS usar const e não uma função
const HandleDelete = useCallback((repo)=> {
    //repo vai receber o nome
    const find = repositorios.filter(r=>r.name !== repo); //Vai pegar TODAS que não clicou e devolver para a variável find MENOS a que está clicada e será apagada

    setRepositorios(find);
}, [repositorios]);


    return(
        <Container>
            
            <h1>
                <FaGithub size={25}/>
                Meus repositórios
            </h1>
            
            {/*Para criar um desencadeamento novo, criar uma nova tag */}
            <Form onSubmit={ handleSubmit } error={alerta}>

                <input type='text' placeholder='Adicionar repositórios'
                value={ newRepo } onChange={ handleInputChange }
                />

                {/*//vai tentar fazer a requisição loading, ir em Styles para configurar isso*/}
                <SubmitButton loading={loading ? 1 : 0}>
                    {loading ? (
                        <FaSpinner color='#fff' size={15} />
                    ) : (
                        <FaPlus color='#fff' size={15}/>
                    )}
                    
                </SubmitButton>

            </Form>


            {/*Listar na tela os repositórios */}
            <List>
                {repositorios.map(repo=>(
                    <li key={repo.name}>
                        <span> {/*Criar um componente para Delete  */}

                            <DeleteButton onClick={()=> HandleDelete(repo.name) }>
                                <FaTrash size={15}/>
                            </DeleteButton>
                            
                            {repo.name}</span>
                       {/*  Exibir detalhes do repositório. Isso <a href='#'>  foi substituido por: */} 
                         <Link to={`/repositorio/${encodeURIComponent(repo.name)}`}>  {/*repo.name passa o nome do repositório. Agora deve ir em Repositorio/index.js para exibir resultado.
                         (ENCOD...) encodeURIComponent é para dizer que é um parâmetro e não um diretório. Está passando uma uma "/"  assim: angular/angular */}
                             <FaBars size={20}/>
                         </Link>                            
                            
                       
                    </li>
                ))}
            </List>             



        </Container>
        
    )
} 




---------------
Em Repositorio/index.js:

import React from 'react';

export default function Repositorio(){
    return(
        /* Exibir detalhes do repositório.  */

        <h1 style={{color:'#fff'}}> Repositório</h1>
    )
}



-----------Testar agora. Clicar no icone de FiBars no projeto no navegador.

----------Atualizar Repositorio/index.js para passar conteúdo do repositório:

import React from 'react';

export default function Repositorio( {match} ){
    return(
        /* Exibir detalhes do repositório.  */

        <h1 style={{color:'#fff'}}> 
            Repositório: <br></br>

        { decodeURIComponent(match.params.repositorio)} {/* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/}
        
        </h1>
    )
}



----------Atualizar de novo Repositorio/index.js para passar conteúdo do repositório:
Criar Repositorio/styles.js:

import styled from "styled-components";

export const Container = styled.div`

`;


-----
 Agora importar ele no Repositorio/index.js:
Vai ter que usar o useState para fazer a requisição e 
useEffect para armazenar.
Será feita requisição de API, então importar api.


import React, {useState, useEffect} from 'react';
import { Container } from './styles';
import api from '../../services/api';

export default function Repositorio( {match} ){
    
    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues`)    //issuesData - recebe esse conteúdo
        ]);//Testar
        console.log(repositorioData.data);
        console.log(issuesData.data);

        }
	load(); //  <--------------- Chamar aqui 

    },[]);
    
    
    return(

        <Container>

            {/* Exibir detalhes do repositório.  */}

            <h1 style={{color:'#fff'}}> 
                Repositório: <br></br>

            </h1>

        </Container>

        
    )
}



----------Paginar Repositorio/index.js:



import React, {useState, useEffect} from 'react';
import { Container } from './styles';
import api from '../../services/api';

export default function Repositorio( {match} ){

    //após testar console.log(repositorioData.data); e o outro criar aqui.
    const [repositorio, setRepositorio] = useState({});// Como será ÚNICO objeto passar {}, se fossem varios passar array []
    const [issues, setIssues] = useState([]);//Varias issues. Passar []
    const [loading, setLoading] = useState(true);//Já vai iniciar carregando

    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
                                                    //issuesData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues` , { // PAGINAR. O axios tem essa forma.
                 params: {
                    state: 'open',
                    per_page: 5
                 }
                })    
        ]);//Testar para passar para state depois
       console.log(repositorioData.data);
        console.log(issuesData.data);
      setRepositorio(repositorioData.data);
      setIssues(issuesData.data);
      setLoading(false); //Após carregar false

        }

	load(); //  <--------------- Chamar aqui 

    },[match.params.repositorio]);
    
    
    return(

        <Container>

            {/* Exibir detalhes do repositório.  */}

            <h1 style={{color:'#fff'}}> 
                Repositório: <br></br>

            </h1>

        </Container>

        
    )
}



-------------Exibindo detalhes do repositório.
Repositorio/index.js ATUALIZAR ESSA PARTE:
Lembre-se de importar Owner: import { Container, Owner} from './styles';


 return(

        <Container>

            <Owner>
                <img src={repositorio.owner.avatar_url} alt={repositorio.owner.login} /> 
                <h1>{repositorio.name}</h1>
                <p>{repositorio.description}</p>
            </Owner>

        </Container>

        
    )
}




----- Atualizar Repositorio/styles.js:


import styled from "styled-components";

export const Container = styled.div`

`;

export const Owner = styled.header`

`;


------Vai dar ERRO. Ele ainda está buscando mas não está carregando para exibir.
Para corrigir isso criar uma verificação em Repositorio/index.js:
Criar um //Controle de exibição





import React, {useState, useEffect} from 'react';
import { Container, Owner, Loading } from './styles';
import api from '../../services/api';

export default function Repositorio( {match} ){

    //após testar console.log(repositorioData.data); e o outro criar aqui.
    const [repositorio, setRepositorio] = useState({});// Como será ÚNICO objeto passar {}, se fossem varios passar array []
    const [issues, setIssues] = useState([]);//Varias issues. Passar []
    const [loading, setLoading] = useState(true);//Já vai iniciar carregando

    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
                                                    //issuesData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues` , { // PAGINAR. O axios tem essa forma.
                 params: {
                    state: 'open',
                    per_page: 5
                 }
                })    
        ]);//Testar para passar para state depois
       console.log(repositorioData.data);
        console.log(issuesData.data);
      setRepositorio(repositorioData.data);
      setIssues(issuesData.data);
      setLoading(false); //Após carregar false

        }

        load(); //  <--------------- Chamar aqui 

    },[match.params.repositorio]);
    

//Controle de exibição. Fazer o controle em Repositorio/styles.js
    if(loading){
       return(
        <Loading>
            <h1>Carregando...</h1>
        </Loading>
       )}

    return(

        <Container>

            <Owner>
                <img src={repositorio.owner.avatar_url} alt={repositorio.owner.login} /> 
                <h1>{repositorio.name}</h1>
                <p>{repositorio.description}</p>
            </Owner>

        </Container>

        
    )
}



-------------Atualizar Repositorio.styles.js:

import styled from "styled-components";

export const Loading = styled.div` //Foi passado aqui para cima para ser carregado primeiro por ser o cabeçalho

`;

export const Container = styled.div`

`;

export const Owner = styled.header`

`;


----------Carregue a página e veja se deu tudo certo.
-------------Atualizar Repositorio.styles.js:


import styled from "styled-components";

export const Loading = styled.div` //Foi passado aqui para cima para ser carregado primeiro por ser o cabeçalho
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
`;

export const Container = styled.div`
    max-width: 700px;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0,0,0, 0.2);
    padding: 30px;
    margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/  
`;

export const Owner = styled.header`
    display: flex;
    flex-direction: column;
    align-items: center;

    img{
        width: 150px;
        border-radius: 20%;
        margin: 20px 0;
    }

    h1{
        font-size: 30px;
        color: #0d2636;
    }

    p{
        margin-top: 5px;
        font-size: 15px;
        color: #000;
        text-align: center;
        line-height: 1.4;
        max-width: 400px;
    }

`;



---------------------Carregue a página novamente
e veja se deu tudo certo.
Teste:
facebook/react
angular/angular
vuejs/vue



-----------Criar botão de voltar em Repositorio/index.js:


import React, {useState, useEffect} from 'react';
import { Container, Owner, Loading, BackButton } from './styles';
import api from '../../services/api';

import { FaArrowLeft } from 'react-icons/fa'; 'react-icons/fa';

export default function Repositorio( {match} ){

    //após testar console.log(repositorioData.data); e o outro criar aqui.
    const [repositorio, setRepositorio] = useState({});// Como será ÚNICO objeto passar {}, se fossem varios passar array []
    const [issues, setIssues] = useState([]);//Varias issues. Passar []
    const [loading, setLoading] = useState(true);//Já vai iniciar carregando

    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
                                                    //issuesData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues` , { // PAGINAR. O axios tem essa forma.
                 params: {
                    state: 'open',
                    per_page: 5
                 }
                })    
        ]);//Testar para passar para state depois
       //console.log(repositorioData.data);
       //console.log(issuesData.data);
      setRepositorio(repositorioData.data);
      setIssues(issuesData.data);
      setLoading(false); //Após carregar false

        }

        load(); //  <--------------- Chamar aqui 

    },[match.params.repositorio]);
    

//Controle de exibição. Fazer o controle em Repositorio/styles.js
    if(loading){
       return(
        <Loading>
            <h1>Carregando...</h1>
        </Loading>
       )}

    return(

        <Container>

            {/** Botão de voltar. Importar um icone para dar estética. Importar BackButton 
		to='/'  vai voltar para home
		*/}
            <BackButton to='/'>
                <FaArrowLeft color='#000' size={30}/>
            </BackButton>
            

            <Owner>
                <img src={repositorio.owner.avatar_url} alt={repositorio.owner.login} /> 
                <h1>{repositorio.name}</h1>
                <p>{repositorio.description}</p>
            </Owner>

        </Container>
        
    )
}



-------------Atualizar Repositorio.styles.js:


import styled from "styled-components";

import { Link } from 'react-router-dom';


export const Loading = styled.div` //Foi passado aqui para cima para ser carregado primeiro por ser o cabeçalho
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
`;

export const Container = styled.div`
    max-width: 700px;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0,0,0, 0.2);
    padding: 30px;
    margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/  
`;

export const Owner = styled.header`
    display: flex;
    flex-direction: column;
    align-items: center;

    img{
        width: 150px;
        border-radius: 20%;
        margin: 20px 0;
    }

    h1{
        font-size: 30px;
        color: #0d2636;
    }

    p{
        margin-top: 5px;
        font-size: 15px;
        color: #000;
        text-align: center;
        line-height: 1.4;
        max-width: 400px;
    }

`;

/*
export const BackButton =styled.button`//Poderia importar diretamente dentro de "Container" como <a>, mas para praticar será importadop Link

`;
*/export const BackButton =styled( Link )`
    border: 0;
    outline: 0;
    background: transparent; 
    // Já foi dado margin-top em "Container" padding: 30px;
`;



---------------Exibir issues.
Repositorio/index.js:


import React, {useState, useEffect} from 'react';
import { Container, Owner, Loading, BackButton, IssuesList } from './styles';
import api from '../../services/api';

import { FaArrowLeft } from 'react-icons/fa'; 

export default function Repositorio( {match} ){

    //após testar console.log(repositorioData.data); e o outro criar aqui.
    const [repositorio, setRepositorio] = useState({});// Como será ÚNICO objeto passar {}, se fossem varios passar array []
    const [issues, setIssues] = useState([]);//Varias issues. Passar []
    const [loading, setLoading] = useState(true);//Já vai iniciar carregando

    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
                                                    //issuesData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues` , { // PAGINAR. O axios tem essa forma.AQUI VAI EXIBIR APENAS 5 ITENS POR PÁGINA. 
                 params: {
                    state: 'open',
                    per_page: 5
                 }
                })    
        ]);//Testar para passar para state depois
       //console.log(repositorioData.data);
       //console.log(issuesData.data);
      setRepositorio(repositorioData.data);
      setIssues(issuesData.data);
      setLoading(false); //Após carregar false

        }

        load(); //  <--------------- Chamar aqui 

    },[match.params.repositorio]);
    

//Controle de exibição. Fazer o controle em Repositorio/styles.js. Ele só vai avançar quando loading estiver totalemnte carregado.
    if(loading){
       return(
        <Loading>
            <h1>Carregando...</h1>
        </Loading>
       )}

    return(

        <Container>

            {/** Botão de voltar. Importar um icone para dar estética. Importar BackButton 
            to='/'  vai voltar para home
            */}
            <BackButton to='/'>
                <FaArrowLeft color='#000' size={30}/>
            </BackButton>
            

            <Owner>
                <img src={repositorio.owner.avatar_url} alt={repositorio.owner.login} /> 
                <h1>{repositorio.name}</h1>
                <p>{repositorio.description}</p>
            </Owner>

            {/*Exibir issues, será tratado como uma 'ul' e terá as suas 'li' dentro*/}
            <IssuesList>
                {issues.map(item=>( //vai precisar converter para string
                    <li key={String(item.id)}>
                        <img src={item.user.avatar_url} alt={item.user.login}/>
                        <div>
                        <strong>
                            {/*Link externo, usr <a>*/}
                            <a href={item.html_url}> {item.title} </a>

                            {/* Verificar lá em cima em console.log(issuesData.data); as possibilidades de uso aqui.
                            Verificado que labels é um array por isso será usado o modelo abaixo com map() para percorrer todos os itens. */}
                            {item.labels.map(label =>(
                                <span key={ String(label.id) }> { label.name } </span> /*Pode converter para string tb */
                            ))}

                        </strong>

                        <p>{ item.user.login }</p>

                    </div>
                    </li>
                   
                ))}
            </IssuesList>

        </Container>
        
    )
}



--------------
Repositorio/styles.js:


import styled from "styled-components";

import { Link } from 'react-router-dom';


export const Loading = styled.div` //Foi passado aqui para cima para ser carregado primeiro por ser o cabeçalho
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
`;

export const Container = styled.div`
    max-width: 700px;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0,0,0, 0.2);
    padding: 30px;
    margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/  
`;

export const Owner = styled.header`
    display: flex;
    flex-direction: column;
    align-items: center;

    img{
        width: 150px;
        border-radius: 20%;
        margin: 20px 0;
    }

    h1{
        font-size: 30px;
        color: #0d2636;
    }

    p{
        margin-top: 5px;
        font-size: 15px;
        color: #000;
        text-align: center;
        line-height: 1.4;
        max-width: 400px;
    }

`;

/*
export const BackButton =styled.button`//Poderia importar diretamente dentro de "Container" como <a>, mas para praticar será importadop Link

`;
*/export const BackButton =styled( Link )`
    border: 0;
    outline: 0;
    background: transparent; 
    // Já foi dado margin-top em "Container" padding: 30px;
`;

export const IssuesList =styled.ul`
    margin-top: 30px;
    padding-top: 30px;
    border-top: 1px solid #eee;
    list-style: none;

    li{
        display: flex;
        padding: 15px 10px
    }

    & + li{ //Vai aplicar somente depois do primeiro
        margin-top: 12px;
    }

    img{
        width:45px;
        height: 45px;
        border-radius: 50%;
        border: 2px solid #0d2636;
    }

    div{
        flex: 1;
        margin-left: 12px;

        p{
            margin-top: 10px;
            font-size: 12px;
            color: #000;
        }
    }

    strong{
        font-size: 15px;
        
        a{
            text-decoration: none;
            color: #222;
            transform: .5s;            

            &:hover{
                color: #071db0;
            }
        }
        span{
            background: #222;
            color: #fff;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            padding: 4px 7px;
            margin-left: 10px;
        }
    }
    
`;



------------Paginar.
Para paginar será passado por parâmetros.
Repositorio/index.js:




import React, {useState, useEffect} from 'react';
import { Container, Owner, Loading, BackButton, IssuesList, Pagination } from './styles';
import api from '../../services/api';

import { FaArrowLeft } from 'react-icons/fa'; 

export default function Repositorio( {match} ){

    //após testar console.log(repositorioData.data); e o outro criar aqui.
    const [repositorio, setRepositorio] = useState({});// Como será ÚNICO objeto passar {}, se fossem varios passar array []
    const [issues, setIssues] = useState([]);//Varias issues. Passar []
    const [loading, setLoading] = useState(true);//Já vai iniciar carregando

    //Fazer paginação. Iniciar com 1 pois começa na primeira página:
    const [page, setPage] = useState(1);

    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
                                                    //issuesData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues` , { // PAGINAR. O axios tem essa forma.AQUI VAI EXIBIR APENAS 5 ITENS POR PÁGINA. 
                 params: {
                    state: 'open',
                    per_page: 5   //Paginação foi limitada para 5 itens por pg
                 }
                })    
        ]);//Testar para passar para state depois
       //console.log(repositorioData.data);
       //console.log(issuesData.data);
      setRepositorio(repositorioData.data);
      setIssues(issuesData.data);
      setLoading(false); //Após carregar false

        }

        load(); //  <--------------- Chamar aqui 

    },[match.params.repositorio]);
    

//Fazer paginação. Aqui vai receber o handlePage pelo 'page'. 
useEffect(()=>{
    async function loadIssue(){
        //Aqui é só pegar o nome do repositório que ja foi criado anteriormente:
        const nomeRepo = decodeURIComponent(match.params.repositorio);

        const response = await api.get(`/repos/${nomeRepo}/issues`, {
            params:{
                //state: 'all',
                //state: 'closed',
                state: 'open', //Esse 'open' veio da documentação do github. 
                //Veja: https://docs.github.com/pt/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28
                //Veja: https://docs.github.com/pt/rest/issues/issues?apiVersion=2022-11-28
                page,  // mesmo nome, não precisa repetir:   page: page,
                per_page: 5,

            },
        });
        //Fez a requisição. Agora é só atualizar:
        setIssues(response.data);
    } 
    loadIssue();
},[match.params.repositorio ,page]);//aqui é quem será monitorado

//Fazer paginação. Foi criada uma função que recebe duas strings, next e back. 
//Terá que criar o useEffect acima para dar a função dohandlePage
    function handlePage(action){
        //Aqui será atualizada a página:
        setPage(action === 'back' ? page - 1 : page + 1)  

    }



//Controle de exibição. Fazer o controle em Repositorio/styles.js. Ele só vai avançar quando loading estiver totalemnte carregado.
    if(loading){
       return(
        <Loading>
            <h1>Carregando...</h1>
        </Loading>
       )}

    return(

        <Container>

            {/** Botão de voltar. Importar um icone para dar estética. Importar BackButton 
            to='/'  vai voltar para home
            */}
            <BackButton to='/'>
                <FaArrowLeft color='#000' size={30}/>
            </BackButton>
            

            <Owner>
                <img src={repositorio.owner.avatar_url} alt={repositorio.owner.login} /> 
                <h1>{repositorio.name}</h1>
                <p>{repositorio.description}</p>
            </Owner>

            {/*Exibir issues, será tratado como uma 'ul' e terá as suas 'li' dentro*/}
            <IssuesList>
                {issues.map(item=>( //vai precisar converter para string
                    <li key={String(item.id)}>
                        <img src={item.user.avatar_url} alt={item.user.login}/>
                        <div>
                        <strong>
                            {/*Link externo, usr <a>*/}
                            <a href={item.html_url}> {item.title} </a>

                            {/* Verificar lá em cima em console.log(issuesData.data); as possibilidades de uso aqui.
                            Verificado que labels é um array por isso será usado o modelo abaixo com map() para percorrer todos os itens. */}
                            {item.labels.map(label =>(
                                <span key={ String(label.id) }> { label.name } </span> /*Pode converter para string tb */
                            ))}

                        </strong>

                        <p>{ item.user.login }</p>

                    </div>
                    </li>
                   
                ))}
            </IssuesList>

            {/*Fazer paginação. Dado o nome de Pagination para esta parte. */}

            <Pagination>
                <button type='button' onClick={()=> handlePage('back') } disabled={ page < 2 } >Anterior</button>
                <button type='button' onClick={()=> handlePage('next') }>Próxima</button>
            </Pagination>

        </Container>
        
    )
}






---------Acrescentar em styles.js:

export const Pagination =styled.div`
    display: flex;
    align-items: center;
    justify-content: space-between;
    

   button{
        background: #FFD700;        
        outline: 0;
        border: 0;
        border-radius: 5px;             
        padding: 5px 10px;  
        
        // Botão "Anterior" será desabilitado quando <2 
        &:disabled{
            cursor: not-allowed;
            opacity: 0.5;
        }
    }
`;



------------------Finalizando com 3 botões de stados:



import React, {useState, useEffect} from 'react';
import { Container, Owner, Loading, BackButton, IssuesList, Pagination, FilterList } from './styles';
import api from '../../services/api';

import { FaArrowLeft } from 'react-icons/fa'; 

export default function Repositorio( {match} ){

    //após testar console.log(repositorioData.data); e o outro criar aqui.
    const [repositorio, setRepositorio] = useState({});// Como será ÚNICO objeto passar {}, se fossem varios passar array []
    const [issues, setIssues] = useState([]);//Varias issues. Passar []
    const [loading, setLoading] = useState(true);//Já vai iniciar carregando
    //Fazer paginação. Iniciar com 1 pois começa na primeira página:
    const [page, setPage] = useState(1);

    //Filtrar exibição por tipo. Genial esse modo de fazer. Muito melhor que criar 3 botões com funções individuais.
    const [filters ]=useState([
        {state: 'all', label: 'Todos', active: true},        
        {state: 'open', label: 'Abertos', active: false},
        {state: 'closed', label: 'Fechados', active: false}
    ]);
//Filtrar exibição por tipo.
    const[filterIndex, setFilterIndex]=useState(0); // Começa na posição '0' do array setFilters. Passar 'active' para o botão em FilterList e modificar as cores no styles.js.
     

    
    useEffect(()=>{
        async function load(){//nomeRepo  é o nome que está recebendo do parâmetro
          const nomeRepo = decodeURIComponent(match.params.repositorio); 
          /* É "repositorio" pq foi o parâmetro criado em Routes.js   <Route exact path='/repositorio/:repositorio' <-- Esse segundo  
        Não exibiu direito, tem que usar (DECOD...)  decodeURIComponent()*/
/*
//Em vez de fazer assim e chamar uma de cada vez. Pode fazer como no outro modelo abaixo e chamar as 2 juntas.
const response = await api.get(`/repos/${nomeRepo}`);
const issues = await api.get(`/repos/${nomeRepo}/issues`);
*/
        //Em vez de chamar uma na sequência da outra, chamar as 2 juntas no array de Promise:
        const [repositorioData, issuesData] = await Promise.all([
            api.get(`/repos/${nomeRepo}`),          //repositorioData - recebe esse conteúdo
                                                    //issuesData - recebe esse conteúdo
            api.get(`/repos/${nomeRepo}/issues` , { // PAGINAR. O axios tem essa forma.AQUI VAI EXIBIR APENAS 5 ITENS POR PÁGINA. 
                 params: {
                    //state: 'open',

                //Filtrar exibição por tipo
                    state: filters.find( f => f.active).state, //all por padrão (active)

                    per_page: 5   //Paginação foi limitada para 5 itens por pg
                 }
                })    
        ]);//Testar para passar para state depois
       //console.log(repositorioData.data);
       //console.log(issuesData.data);
      setRepositorio(repositorioData.data);
      setIssues(issuesData.data);
      setLoading(false); //Após carregar false

        }

        load(); //  <--------------- Chamar aqui 

    },[match.params.repositorio, filters]);
    

//Fazer paginação. Aqui vai receber o handlePage pelo 'page'. 
useEffect(()=>{
    async function loadIssue(){
        //Aqui é só pegar o nome do repositório que ja foi criado anteriormente:
        const nomeRepo = decodeURIComponent(match.params.repositorio);

    
        const response = await api.get(`/repos/${nomeRepo}/issues`, {
            params:{
                //state: 'all',
                //state: 'closed',
                //state: 'open', //Esse 'open' veio da documentação do github. 

        //Filtrar exibição por tipo
                state: filters[filterIndex].state, //Vai pegar o estado do filterIndex. // filters[0].state

                //Veja: https://docs.github.com/pt/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28
                //Veja: https://docs.github.com/pt/rest/issues/issues?apiVersion=2022-11-28
                page,  // mesmo nome, não precisa repetir:   page: page,
                per_page: 5,

            },
        });
        //Fez a requisição. Agora é só atualizar:
        setIssues(response.data);
        //console.log(filterIndex);//Para saber qual o filter está sendo executado.
    } 
    loadIssue();

 //Filtrar exibição por tipo. Precisa passar tudo aqui.   
},[filters, filterIndex ,match.params.repositorio ,page]);//aqui é quem será monitorado.

//Fazer paginação. Foi criada uma função que recebe duas strings, next e back. 
//Terá que criar o useEffect acima para dar a função dohandlePage
    function handlePage(action){
        //Aqui será atualizada a página:
        setPage(action === 'back' ? page - 1 : page + 1)  

    }

//Filtrar exibição por tipo.
    function handleFilter(index){
        setFilterIndex(index); //Vai passar a posição do index.        
    }    



//Controle de exibição. Fazer o controle em Repositorio/styles.js. Ele só vai avançar quando loading estiver totalemnte carregado.
    if(loading){
       return(
        <Loading>
            <h1>Carregando...</h1>
        </Loading>
       )}

    return(

        <Container>

            {/** Botão de voltar. Importar um icone para dar estética. Importar BackButton 
            to='/'  vai voltar para home
            */}
            <BackButton to='/'>
                <FaArrowLeft color='#000' size={30}/>
            </BackButton>
            

            <Owner>
                <img src={repositorio.owner.avatar_url} alt={repositorio.owner.login} /> 
                <h1>{repositorio.name}</h1>
                <p>{repositorio.description}</p>
            </Owner>

{/*Filtrar exibição por tipo */}
            <FilterList active={filterIndex}>
                {filters.map((filter, index)=>(
                    <button type='button' 
                    key={filter.label}
                    onClick={ ()=> handleFilter(index) }> {filter.label} </button>
                ))}

            </FilterList>


            {/*Exibir issues, será tratado como uma 'ul' e terá as suas 'li' dentro*/}
            <IssuesList>
                {issues.map(item=>( //vai precisar converter para string
                    <li key={String(item.id)}>
                        <img src={item.user.avatar_url} alt={item.user.login}/>
                        <div>
                        <strong>
                            {/*Link externo, usr <a>*/}
                            <a href={item.html_url}> {item.title} </a>

                            {/* Verificar lá em cima em console.log(issuesData.data); as possibilidades de uso aqui.
                            Verificado que labels é um array por isso será usado o modelo abaixo com map() para percorrer todos os itens. */}
                            {item.labels.map(label =>(
                                <span key={ String(label.id) }> { label.name } </span> /*Pode converter para string tb */
                            ))}

                        </strong>

                        <p>{ item.user.login }</p>

                    </div>
                    </li>
                   
                ))}
            </IssuesList>

            {/*Fazer paginação. Dado o nome de Pagination para esta parte. */}

            <Pagination>
                <button type='button' onClick={()=> handlePage('back') } disabled={ page < 2 } >Anterior</button>
                <button type='button' onClick={()=> handlePage('next') }>Próxima</button>
            </Pagination>

        </Container>
        
    )
}



---------------------
import styled from "styled-components";

import { Link } from 'react-router-dom';


export const Loading = styled.div` //Foi passado aqui para cima para ser carregado primeiro por ser o cabeçalho
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
`;

export const Container = styled.div`
    max-width: 700px;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0,0,0, 0.2);
    padding: 30px;
    margin: 80px auto; /*Auto nas laterais vai deixar sempre centralizado*/  
`;

export const Owner = styled.header`
    display: flex;
    flex-direction: column;
    align-items: center;

    img{
        width: 150px;
        border-radius: 20%;
        margin: 20px 0;
    }

    h1{
        font-size: 30px;
        color: #0d2636;
    }

    p{
        margin-top: 5px;
        font-size: 15px;
        color: #000;
        text-align: center;
        line-height: 1.4;
        max-width: 400px;
    }

`;

/*
export const BackButton =styled.button`//Poderia importar diretamente dentro de "Container" como <a>, mas para praticar será importadop Link

`;
*/export const BackButton =styled( Link )`
    border: 0;
    outline: 0;
    background: transparent; 
    // Já foi dado margin-top em "Container" padding: 30px;
`;

export const IssuesList =styled.ul`
    margin-top: 30px;
    padding-top: 30px;
    border-top: 1px solid #eee;
    list-style: none;

    li{
        display: flex;
        padding: 15px 10px
    }

    & + li{ //Vai aplicar somente depois do primeiro
        margin-top: 12px;
    }

    img{
        width:45px;
        height: 45px;
        border-radius: 50%;
        border: 2px solid #0d2636;
    }

    div{
        flex: 1;
        margin-left: 12px;

        p{
            margin-top: 10px;
            font-size: 12px;
            color: #000;
        }
    }

    strong{
        font-size: 15px;
        
        a{
            text-decoration: none;
            color: #222;
            transform: .5s;            

            &:hover{
                color: #071db0;
            }
        }
        span{
            background: #222;
            color: #fff;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            padding: 4px 7px;
            margin-left: 10px;
        }
    }
    
`;

export const Pagination =styled.div`
    display: flex;
    align-items: center;
    justify-content: space-between;
    
    button{
        background: #FFD700;        
        outline: 0;
        border: 0;
        border-radius: 5px;             
        padding: 5px 10px;  
        
        // Botão "Anterior" será desabilitado quando <2 
        &:disabled{
            cursor: not-allowed;
            opacity: 0.5;
        }
    }
`;

export const FilterList=styled.div`
    margin: 15px 0;

    button{
        outline: 0;
        border: 0;
        border-radius: 5px;             
        padding: 5px 10px; 
        margin: 0 3px;

        //Estilizar cores do botão
        &:nth-child( ${ props => props.active + 1 }){
            background: #FFD700;
        }
    }
`;
