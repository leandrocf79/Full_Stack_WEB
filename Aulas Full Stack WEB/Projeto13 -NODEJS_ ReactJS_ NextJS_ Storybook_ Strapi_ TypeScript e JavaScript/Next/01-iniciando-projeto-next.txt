Para iniciar um projeto com NextJs
pode ser pelo npx ou yarn a diferença é que yarn é mais rápida a instalação.
 
Tem que instalar o instalador yarn antes com
npm install --global yarn

Verifique:
yarn --version


Podendo ainda acrescentar --typescript

npx create-next-app@latest <nome> --typescript
ou
yarn create next-app <nome> --typescript

Ctrl + ' 
No terminal do VSCode:
npx create-next-app@latest tarefas --typescript

create-next-app@13.2.4
Ok to proceed? (y)

Would you like to use ESLint with this project? » No / Yes
Neste projeto "No"

Would you like to use `src/` directory with this project? » No / Yes
Prefiro que inicie com a pasta src- Yes

Would you like to use experimental `app/` directory with this project? » No / Yes
No

What import alias would you like configured? » @/*
dar enter



=====================================

npm install next-auth     Para autenticações: https://next-auth.js.org/getting-started/example e https://next-auth.js.org/providers/google
yarn add react-icons
yarn add firebase

=====================================


-----------------@
cd tarefas
-----------------@


---------------
Em src/pages deixar somente
_app.tsx 
e
index.tsx
---------------
Deixar a pasta styles fora de src



---------------
Em src/pages/index.tsx:


import Head from 'next/head'
import styles from '../../styles/home.module.css'

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Tarefas+ | Organize de forma fácil</title>        
      </Head>
      <h1>Projeto Tarefas com Next</h1> 
      
    </div>
  )
}


--------corrigir nome na pasta styles
para h minúnculo home.module.css e apagar tudo

Em globals.css também apagar tudo, ele está sendo chamado em pages/_app.tsx

----Em pages/_app.tsx corrigir importação do globals.css:

import '../../styles/globals.css';
import type { AppProps } from 'next/app';

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} /> {/*Aqui é o corpo da página */}
}


-------Testar:
npm run dev
ou
yarn dev

---------Fazer as configurações iniciais em globals.css:


/*Pode importar uma fonte global: 
https://fonts.google.com/specimen/Roboto
e chamar em html como primeira opção:*/
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html{
    font-family: "roboto", sans-serif;
}


------------
Em public/assets
para inserir as midias que serão utilizadas.

------------------------------------------------
------------------------------------------------
Em pages/index.tsx:


import Head from 'next/head'
import styles from '../../styles/home.module.css'

//Pode usar <img> se quiser, mas o Next tem um modelo que carrega melhor, tem mais performance. Image
import Image from 'next/image';
import homeimage from '../../public/assets/home-image.jpg';
// Pode priorizar o carregamento escrevendo apenas priority. Não precisa ser priority={true}

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Tarefas+ | Organize de forma fácil</title>        
      </Head>
      <main className={styles.main}>
        <div className={styles.logoContent}>
          <Image  className={styles.homeimage}
                  alt="Logo Tarefas"
                  src={homeimage}
                  priority={true}
          />
        </div>
        <h1 className={styles.title}>
          Organize seus estudos e outras tarefas
          <br/>do dia a dia.
        </h1>
      </main>
      
    </div>
  )
}



---------------Estilizar isso em home.module.css:

.container{
    background-color: #0f0f0f;
    width: 100%;
    height: 100vh; /*para ocupar a tela toda*/
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

.logoContent{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.homeimage{
    max-width: 480px;
    object-fit: contain; /* Vai encaixar na largura sem distorcer */
    width: auto;
    height: auto;    
    border-radius: 10px;    
}

.title{
    color: #fff;
    text-align: center;
    margin: 28px;
    line-height: 150%;
}


----------------------Criar cabeçalho e botões abaixo da imagem
em pages/index.tsx:


import Head from 'next/head'
import styles from '../../styles/home.module.css'

//Pode usar <img> se quiser, mas o Next tem um modelo que carrega melhor, tem mais performance. Image
import Image from 'next/image';
import homeimage from '../../public/assets/home-image.jpg';
// Pode priorizar o carregamento escrevendo apenas priority. Não precisa ser priority={true}

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Tarefas+ | Organize de forma fácil</title>        
      </Head>
      <main className={styles.main}>
        <div className={styles.logoContent}>
          <Image  className={styles.homeimage}
                  alt="Logo Tarefas"
                  src={homeimage}
                  priority={true}
          />
        </div>
        <h1 className={styles.title}>
          Organize seus estudos e outras tarefas
          <br/>do dia a dia.
        </h1>

        <div className={styles.infoContent}>
          <section className={styles.box}>
            <span>+12 posts</span>
          </section>

          <section className={styles.box}>
            <span>+5 comentários</span>
          </section>
        </div>

      </main>
      
    </div>
  )
}



---------------Estilizar botões isso em home.module.css:     FICOU TOP !!!


.container{
    background-color: #0f0f0f;
    width: 100%;
    /* height: 100vh; para ocupar a tela toda, mas precisa descontar o tamanho total do cabeçalho para evitar barra de rolagem lateral*/
    height: calc(100vh - 75px);
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

.logoContent{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.homeimage{
    max-width: 480px;
    object-fit: contain; /* Vai encaixar na largura sem distorcer */
    width: auto;
    height: auto;    
    border-radius: 10px;    
}

.title{
    color: #fff;
    text-align: center;
    margin: 28px;
    line-height: 150%; /* espaçamento vertical*/
}

.infoContent{
    display: flex; /* Já coloca um ao lado do outro*/
    align-items: center;
    justify-content: space-around; /* Espaço entre intens */
}

.box{
    background-color: #fafafa;
    padding: 15px 45px;
    border-radius: 5px;
    transition: transform 0.3s;
}

.box:hover{
    transform: scale(1.08);
}

/* Caso o aparelho seja muito pequeno pode usar o media query */
@media screen and (max-width: 580px){
    .homeimage{
        max-width: 80% ;
    }

    .title{
        font-size: 20px;
    }
    .infoContent{
        flex-direction: column;
    }
    .box{
        width: 80%;
        margin-bottom: 14px;
        text-align: center;
    }
}




-------------Criar src/components/header/index.tsx:



import styles from './styles.module.css';

export function Header(){
    return(
        <header>
            <section>
                <nav>
                    <h1>Tarefas+</h1>

                </nav>
            </section>
        </header>
    )
}


/********* Esse cabeçalho pode ser importado para todas as páginas
através do pages/_app.tsx   
*/




-------------Atualizar pages/_app.tsx:


import '../../styles/globals.css';
import type { AppProps } from 'next/app';
import { Header } from '../components/header';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <>
      <Header/>
      <Component {...pageProps} /> {/*Aqui é o corpo da página */}
      
    </>
  );
}


/*  LEMBRE-SE QUE PARA MAIS DE 1 ITEM PRECISA POR EM () 
export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />   <-----------------AQUI
}
*/




-------------Atualizar src/components/header/index.tsx:



import styles from './styles.module.css';

export function Header(){
    return(
        <header>
            <section>
                <nav>
                    <h1>Tarefas+</h1>

                </nav>
            </section>
        </header>
    )
}


-------------
Atualizar novamente:


import styles from './styles.module.css';

/* Para usar navegação importar Link */
import Link from 'next/link';

export function Header(){
    return(
        <header className={styles.header}>
            <section className={styles.content}>
                <nav className={styles.nav}>
                    <Link href='/'>
                        <h1 className={styles.logo}>
                            Tarefas<span>+</span>
                        </h1>
                    </Link>
		    
		    <Link href='/dashboard' 
                    className={styles.link}>
                        Painel
                    </Link>

                </nav>

		<button className={styles.loginButton}>Minha conta</button>

            </section>
        </header>
    )
}
/********* Esse cabeçalho pode ser importado para todas as páginas
através do pages/_app.tsx   
*/







-------------Criar src/components/header/styles.module.css:

.header{
    width: 100%;
    height: 75px;     /* ESSA É A ALTURA DO CABEÇALHO. para evitar barra de rolgagem lateral foi usado height: calc(100vh - 75px); em home.modules.css */
    background-color: #0f0f0f;
    display: flex;
    align-items: center;
    justify-content: center;
}

.content{
    padding: 0 18px;
    width: 100%;
    max-width: 1024px; /* Interessante colocar isso para não ficar muito largo em telas maiores */
    display: flex;
    align-items: center;
    justify-content: space-between; /* vai separar os botões */
}

.content a{
    text-decoration: none;
}

.logo{
    color: #fff;
    font-size: 32px;
}

.logo span{
    color: #ea3140;
    padding: 3px;
}

.loginButton{
    background: transparent;
    padding: 8px 35px;
    border-radius: 25px;
    color: #fff;
    border: 1.5px solid #fff; /* Lembre-se de por solid */
    cursor: pointer;
    transition: all 0.3s;
}

.loginButton:hover{
    transform: scale(1.08);
    background-color: #fff;
    color: #0f0f0f;
    font-weight: bold;
}

.nav{
    display: flex;
    align-items: center;
}

.link{
    background-color: #f1f1f1;
    color: #0f0f0f;
    padding: 5px 15px;
    border-radius: 5px;
    margin: 0 15px;
}



**************************************************
------------------Sistemas de login real com gmail

--------Criar pages/dashboard/index.tsx:


/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';

export default function Dashboard(){
    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  
            <h1>Página Painel</h1>          
        </div>
    )
}



------------------PARA TRABALHAR COM AUTENTICAÇÃO USAR UMA BIBLIOTECA CHAMADA 
NextAuth.js

Veja na coluna E em providers a 
quantidade de autenticações possíveis em:
https://next-auth.js.org/providers/

Veja em Getting Started como iniciar:
https://next-auth.js.org/getting-started/example

 
Instalar o pacote de eutenticação:

yarn add next-auth
ou
npm install next-auth

*No site mostra que exemplo que tem que por provider ao redor da aplicação 
pages/_app.jsx
import { SessionProvider } from "next-auth/react"
e pode preencher o fragment com isso.

Pede também para passar a session <SessionProvider session={session}>

--------------------------------Vai ficar assim
Em pages/_app.tsx:

import '../../styles/globals.css';
import type { AppProps } from 'next/app';
import { Header } from '../components/header';

// Autenticação de email para acesso
import { SessionProvider } from "next-auth/react"

export default function App({ Component, pageProps }: AppProps) {
  return (
    <SessionProvider session={pageProps.session}>
      <Header/>
      <Component {...pageProps} />{/*Aqui é o corpo da página */}
      
    </SessionProvider>
  );
}



&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Está tudo na documentação

-------https://next-auth.js.org/getting-started/example
ainda pede para iniciar em 
pages/api/auth/[...nextauth].js     Criar exatamente assim com os colchetes

***** Por estar usando NEXT a exstenção será .ts   *****


No site ir em providers e ver quais serão utilisadas:
 https://next-auth.js.org/providers/google


Configuration (Para gerar as credenciais)
https://console.developers.google.com/apis/credentials

Abrir: + CRIAR CREDENCIAIS / ID do cliente do OAuth / 
CONFIGURAR TELA DE CONSENTIMENTO
Externo
CRIAR

Nome do app ( AQUI VAI APARECER PARA O USUÁRIO QUANDO FOR FAZER O LOGIN)


O nome do aplicativo que precisa da permissão
E-mail para suporte do usuário
leandrocf79@gmail.com

Ainda não tem as páginas, usar localhost por enquanto em
Domínio do app:
---
Página inicial do aplicativo
http://localhost:3000/
Forneça aos usuários um link para sua página inicial
Link da Política de Privacidade do aplicativo
http://localhost:3000/
Forneça aos usuários um link para sua Política de Privacidade pública
Link dos Termos de Serviço do aplicativo
http://localhost:3000/
Forneça aos usuários um link para seus Termos de Serviço públicos
---

Domínios autorizados
deixar como estiver lá

Dados de contato do desenvolvedor
Endereços de e-mail 
leandrocf79@gmail.com

	
SALVAR E CONTINUAR

--------
Clicar em ADICIONAR OU REMOVER ESCOPOS

** Por enquanto pode marcar somente:
[v] See your primary Google Account email address
[v] See your personal info, including any personal info you've made publicly available

ATUALIZAR

SALVAR E CONTINUAR até o fim

-------------
-----Na coluna da Esquerda tem Credenciais. Precisa gerar ID

+ CRIAR CREDENCIAIS / ID do cliente do OAuth


Tipo de aplicativo
Aplicativo da Web


Nome
Next Projeto Tarefas

por enquanto:
Origens JavaScript autorizadas
Para usar com solicitações de um navegador
URIs 1 
http://localhost:3000

---Redirecionamento

URIs de redirecionamento autorizados
Para usar com solicitações de um servidor da Web
URIs 1 
http://localhost:3000/api/auth/callback/google      <---Foi sugerido no: https://next-auth.js.org/providers/google 

CRIAR


-------Neste momento será gerada a API

***Valores abaixo são demonstrativos***

ID do cliente
948545454545769-74d2ck45454545u7e6fapps.googleusercontent.com

Chave secreta do cliente
G45545PX-d545454aVon_eg678678678JM6M7sdfsAcwrEAv

Data da criação
16 de março de 2023 18:55:38 GMT-3

Status
Ativada

--------------------------------
Na raiz projeto, fora de qualquer diretório, criar 
uma variável ambinete chamda .env
Basta clicar fora de qualquer texto

-----------
DAR NOMES com letras maiúsculas e com Underline, SUGESTÃO:
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
-
Passar o site.  
-
Criar uma JWT secret para ajudar na criptografia. 
Para gerar uma é nteressante usar o site: https://www.md5hashgenerator.com/
digitar algo e gerar
copiar a MD5 Hash que foi gerada E COLAR EM "JWT_SECRET="

-----------
Agora no .env:

GOOGLE_CLIENT_ID=948545454545769-74d2ck45454545u7e6fapps.googleusercontent.com
GOOGLE_CLIENT_SECRET=G45545PX-d545454aVon_eg678678678JM6M7sdfsAcwrEAv

NEXTAUTH_URL=http://localhost:3000

JWT_SECRET=5aeiou55blabla


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Tudo configurado. Agora ir em [...nextauth].ts :


import NextAuth from "next-auth/next";
import GoogleProvider from 'next-auth/providers/google';

export const authOptions ={
    providers:[
        GoogleProvider({
            clientId: process.env.GOOGLE_CLIENT_ID as string,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET as string
        })
    ], secret: process.env.JWT_SECRET as string
}

export default NextAuth(authOptions); //Passar para ser carregada


--------------------------------
--------------------------------
---------O SISTEMA DE LOGIN ESTÁ NO HEADER no botão "Minha conta"
Em components/header/index.tsx:

useSession - Para saber se está logado.





import styles from './styles.module.css';

//SISTEMA DE LOGIN
import { useSession, signIn, signOut } from 'next-auth/react';

/* Para usar navegação importar Link */
import Link from 'next/link';

export function Header(){
    //SISTEMA DE LOGIN. Criar o Hook
    const {data: session, status} = useSession();


    return(
        <header className={styles.header}>
            <section className={styles.content}>
                <nav className={styles.nav}>
                    <Link href='/'>
                        <h1 className={styles.logo}>
                            Tarefas<span>+</span>
                        </h1>
                    </Link>
		
		
	{/* Essa parte será substituida!! */}
                    <Link href='/dashboard' 
                    className={styles.link}>
                        Painel
                    </Link>


                </nav>

                {/*SISTEMA DE LOGIN */}
                { status === 'loading' ? (
                    <></>
                ): session ? (
                    <>
                        <div className={styles.loginName}>Olá {session?.user?.name}</div>
                        <button className={styles.loginButton} onClick={ ()=> signOut() }> {/* Se estiver logado */}
                            Sair                  
                        </button>
                        
                    </>
                ):(
                    <button className={styles.loginButton} onClick={ ()=> signIn('google') }> {/* Se NÃO estiver logado. Esta utilizando um PROVIDER que é do google precisa informar que vai usar */}
                        Minha conta                 
                    </button>
                )}

                

            </section>
        </header>
    )
}
/********* Esse cabeçalho pode ser importado para todas as páginas
através do pages/_app.tsx   
*/





------------Só isso acima !!!

Atualizei o styles.modules.css com
.loginName{
    color: #fff;
}



------------------------------------
------------------------------------Em header/index.tsx:
O botão "Meu painel" no cabeçalho é da página dashboard, precisa deixá-la no modo privado.

Essa é a primeira parte:

Substituir por essa parte!!


                    {session?.user && (  
                        <Link  href='/dashboard' 
                            className={styles.link}>
                            Painel
                        </Link>
                        )}




Agora precisa proteger o link /dashboard no navegador, se tentar 
acessar de forma anônima no navegador
http://localhost:3000/dashboard
vai acessar normalmente


&&&&&&&&&&&&&&&&&&&&&&&&&
 Poderia fazer a verificação do link dessa forma abaixo, mas
será apresentada outra forma adiante.

Para bloquear o acesso à página dashboard apenas para usuários 
autenticados, você precisa verificar se existe uma sessão ativa 
e redirecionar o usuário para a página de login caso contrário. 
Você pode fazer isso usando o componente useEffect para verificar 
a sessão e redirecionar o usuário se necessário. 
Aqui está um exemplo:

import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { useSession } from 'next-auth/client';
import styles from './Header.module.css';

export default function Header() {
  const [session, loading] = useSession();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !session) {
      router.push('/login');
    }
  }, [loading, session, router]);

  return (
    <header className={styles.header}>
      <nav className={styles.nav}>
        <Link href="/">
          <h1 className={styles.logo}>Tarefas</h1>
        </Link>
        {session?.user && (
          <Link href="/dashboard" className={styles.link}>
            Painel
          </Link>
        )}
      </nav>
      {session ? (
        <button onClick={() => signOut()}>Sair</button>
      ) : (
        <button onClick={() => signIn()}>Entrar</button>
      )}
    </header>
  );
}

Observe que verificamos se a sessão existe antes de renderizar o 
link para a página dashboard. Além disso, usamos o useEffect 
para verificar a sessão e redirecionar o usuário para a 
página de login se necessário.

&&&&&&&&&&&&&&&&&&&&&&&&&


Segundo modo.

Em pages/dashboard/index.tsx:





/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

export default function Dashboard(){
    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  
            <h1>Página Painel</h1>          
        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    return{
        props:{},
    }
}







acessar de forma anônima no navegador não vai mais conseguir acesso
http://localhost:3000/dashboard


*******************Acessar com uma conta para visualizar as alterações no painel, dashboard.

------Criar components/textarea/index.tsx:

import styles from './styles.module.css';

export function Textarea(){
    return <textarea className={styles.textarea}></textarea>
}

------
Em pages/dashboard/index.tsx:




/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

//visualizar as alterações no painel
import { Textarea } from '@/components/textarea';

export default function Dashboard(){
    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  

            {/* visualizar as alterações no painel */}
            <main className={styles.main}>
                <section className={styles.content}>
                    <div className={styles.contentForm}>
                        <h1 className={styles.title}>Qual sua tarefa?</h1>
                        <form> {/*Criado o components/textarea para aproveitar esse formulários e trocar apenas o conteúdo textarea dele  */}
                            <Textarea/>

                            <div className={styles.checkboxArea}>
                                <input type="checkbox"
                                    className={styles.checkbox}                                
                                />
                                <label>Deixar tarefa publica?</label>
                            </div>
                            <button type='submit' className={styles.button}>
                                Registrar
                            </button>
                        </form>
                    </div>
                </section>            
            </main>  

        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    return{
        props:{},
    }
}


----------Estilizar em pages/dashboard/styles.module.css:
Precisa estilizar após esse o components/textarea/styles.module.css.




.container{
    width: 100%;
}

.content{
    background-color: #0f0f0f;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.contentForm{
    max-width: 1024px;
    width: 100%;
    padding: 0 18px;
    padding-bottom: 28px;
    margin-top: 58px;
}

.title{
    color: #fff;
    margin-bottom: 8px;
}

/*visualizar as alterações no painel*/

.checkboxArea label{
    color: #fff;
    margin-left: 8px;
}

.checkboxArea{
    margin: 14px;
}

.checkbox{
    width: 18px;
    height: 18px;
}

.button{
    width: 100%;
    border: 0;
    border-radius: 5px;
    color: #fff;
    background-color: #3183ff;
    padding: 10px 0;
    font-size: 18px;
}




----------- components/textarea/styles.module.css:

.textarea{
    width: 100%;
    resize: none;
    height: 160px;
    border-radius: 5px;
    outline: none; /*remover a "contorno" padrão que aparece em torno de um elemento */
    padding: 8px;
}



------Atualizar components/textarea/index.tsx:
O objetivo aqui é deixar esse textarea dinâmico para poder ser usado em vários locais



import styles from './styles.module.css';
import { HTMLProps } from 'react';

// ...rest - pegar todas as propriedades e dizer que só pode receber HTMLProps<> do tipo <HTMLTextAreaElement>
export function Textarea( {...rest}: HTMLProps<HTMLTextAreaElement> ){
    return <textarea className={styles.textarea} {...rest}></textarea>;
} // Repassando propriedades em   {...rest}></textarea>




-------------------Agora atualizar <Textarea/> em
pages/dashboard/index.tsx:

<Textarea placeholder='Digite sua tarefa...' />



-------------------Agora criar a parte de listas em
pages/dashboard/index.tsx:



/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

//criar a parte de listas
import { FiShare2 } from 'react-icons/fi';
import { FaTrash } from 'react-icons/fa';

//visualizar as alterações no painel
import { Textarea } from '@/components/textarea';

export default function Dashboard(){
    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  

            {/* visualizar as alterações no painel */}
            <main className={styles.main}>
                <section className={styles.content}>
                    <div className={styles.contentForm}>
                        <h1 className={styles.title}>Qual sua tarefa?</h1>
                        <form> {/*Criado o components/textarea para aproveitar esse formulários e trocar apenas o conteúdo textarea dele  */}
                            <Textarea
                                placeholder='Digite sua tarefa...'                            
                            />

                            <div className={styles.checkboxArea}>
                                <input type="checkbox"
                                    className={styles.checkbox}                                
                                />
                                <label>Deixar tarefa publica?</label>
                            </div>
                            <button type='submit' className={styles.button}>
                                Registrar
                            </button>
                        </form>
                    </div>
                </section>  

                {/*criar a parte de listas */}
                <section className={styles.taskContainer}>
                    <h1>Minhas tarefas</h1>

                    <article className={styles.task}>
                        <div className={styles.tagContainer}>
                            <label className={styles.tag}>PÚBLICO</label>
                            <button className={styles.shareButton}>
                                <FiShare2
                                    size={22}
                                    color="#3183ff"

                                />
                            </button>
                        </div>

                        <div className={styles.taskContent}>
                            <p>Minha primeira tarefa</p>
                            <button className={styles.trashButton}>
                                <FaTrash size={22}
                                color='#ea3140'/>
                            </button>
                        </div>
                    </article>
                </section>

            </main>  

        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    return{
        props:{},
    }
}




--------------------------Estilizar dashboard:



.container{
    width: 100%;
}

.content{
    background-color: #0f0f0f;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.contentForm{
    max-width: 1024px;
    width: 100%;
    padding: 0 18px;
    padding-bottom: 28px;
    margin-top: 58px;
}

.title{
    color: #fff;
    margin-bottom: 8px;
}

/*visualizar as alterações no painel*/
.checkboxArea label{
    color: #fff;
    margin-left: 8px;
}

.checkboxArea{
    margin: 14px;
}

.checkbox{
    width: 18px;
    height: 18px;
}

.button{
    width: 100%;
    border: 0;
    border-radius: 5px;
    color: #fff;
    background-color: #3183ff;
    padding: 10px 0;
    font-size: 18px;
}

/*criar a parte de listas*/

.taskContainer{
    margin: 34px auto 0 auto;
    padding: 0 18px;
    width: 100%;
    max-width: 1024px;
    display: flex;
    flex-direction: column;
}

.taskContainer a{
    text-decoration: none;
    color: #0f0f0f;
}

.taskContainer h1{
    text-align: center;
    font-size: 32px;
    margin-bottom: 14px;
}

.task{
    margin-bottom: 14px;
    line-height: 150%; /*para facilitar a leitura*/
    display: flex;
    flex-direction: column;
    align-items: flex-start;/*Vai alinhar à Direita*/
    border: 1.5px solid #909090;
    border-radius: 5px;
    padding: 15px;
}

.tagContainer{
    display: flex;
    align-items: center; /*Vai alinhar altura com relação ao outro, centro horizontal*/
    justify-content: center;
    margin-bottom: 8px;
}

.tag{
    background-color: #3183ff;
    padding: 2px 6px;
    color: #fff;
    border-radius: 5px;
    font-size: 12px;
}

.shareButton, .trashButton{
    background: transparent;
    border: 0;
    margin: 0 8px;
    cursor: pointer;
}

.taskContent{
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

.taskContent p{
    white-space: pre-wrap; /*Vai respeitar as quebras de linhas, novos paragrafos sem junta-los*/
}




#########################################################

Criar as funcionalidades do projeto com banco de dados.

#########################################################

pages/dashboard/index.tsx:



/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

//criar a parte de listas
import { FiShare2 } from 'react-icons/fi';
import { FaTrash } from 'react-icons/fa';

//visualizar as alterações no painel
import { Textarea } from '@/components/textarea';

//funcionalidades do projeto com banco de dados
import { ChangeEvent, useState } from 'react';


export default function Dashboard(){
    
    //funcionalidades do projeto com banco de dados. Passar isso no textarea
    const [input, setInput] = useState('');
    const [publicTask, setPublicTask]=useState(false); //a caixa de seleção para tornar público inicia sempre como false


//funcionalidades do projeto com banco de dados. Passar a tipagem
    function handleChangePublic(event: ChangeEvent<HTMLInputElement>){
        //console.log(event.target.checked)

        //Se clicar na caixa passar para true
        setPublicTask(event.target.checked)
    }


    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  

            {/* visualizar as alterações no painel */}
            <main className={styles.main}>
                <section className={styles.content}>
                    <div className={styles.contentForm}>
                        <h1 className={styles.title}>Qual sua tarefa?</h1>
                        <form> {/*Criado o components/textarea para aproveitar esse formulários e trocar apenas o conteúdo textarea dele  */}
                            
                    {/*//funcionalidades do projeto com banco de dados */}
                            <Textarea
                                placeholder='Digite sua tarefa...'  
                                value={input}  
                                onChange={ (event: ChangeEvent<HTMLTextAreaElement>) => setInput(event.target.value)}                        
                            />  {/* Essa parte:
                            onChange={ (event) => setInput(event.target.value)}  
                            vai dar erro no value. Não vai encontrar. Para corrigir isso deve informar 
                             que ele é do textarea tipando o "event" com impotação de 'ChangeEvent'
                             e dizer a qual elemento pertence, 'HTMLTextAreaElement'.
                             */}


                    {/*//funcionalidades do projeto com banco de dados */}
                            <div className={styles.checkboxArea}> 
                                <input type="checkbox"
                                    className={styles.checkbox} 
                                    checked={publicTask}
                                    onChange={handleChangePublic}
                                />{/*   Iniciar a caixa como true, MAS se fizer assim:
                                checked={true} vai ficar marcada de forma permanente. 
                                Corrigir com useState
                                */}{/*
                                        onChange={} foi iniciada diferente para aprendizado.
                                        Utilizada uma função externa.
                                */}


                                <label>Deixar tarefa publica?</label>
                            </div>
                            <button type='submit' className={styles.button}>
                                Registrar
                            </button>
                        </form>
                    </div>
                </section>  

                {/*criar a parte de listas */}
                <section className={styles.taskContainer}>
                    <h1>Minhas tarefas</h1>

                    <article className={styles.task}>
                        <div className={styles.tagContainer}>
                            <label className={styles.tag}>PÚBLICO</label>
                            <button className={styles.shareButton}>
                                <FiShare2
                                    size={22}
                                    color="#3183ff"

                                />
                            </button>
                        </div>

                        <div className={styles.taskContent}>
                            <p>Minha primeira tarefa</p>
                            <button className={styles.trashButton}>
                                <FaTrash size={22}
                                color='#ea3140'/>
                            </button>
                        </div>
                    </article>
                </section>

            </main>  

        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    return{
        props:{},
    }
}


$$$$$$$$$$$$$$$$$

O BD escolhido é o Firebase certifique-se que esteja instalado

yarn add firebase



$$$$$$$$$$$$$$$$$  Registrar no FireBase

https://firebase.google.com/?hl=pt

Ir para o console / + Adicionar Projeto / 
nextprojecttarefa
* Ativar( o Goole Analytics neste Projeto ) isso é gratuito

ao finalizar ir em icone 'web' </>
Registrar app: Next Project Tarefas
Desmarcar: Configure também o Firebase Hosting para este app.

Registrar App

---------------------Dados fictícios:

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyAo_7KJMydasdas5464gbRdasda_1EeU",
  authDomain: "nextprojecttarefa.firebaseapp.com",
  projectId: "nextvdsvsdvsrefa",
  storageBucket: "nextdvsvsdvsdfa.appspot.com",
  messagingSenderId: "263456363904",
  appId: "1:23316782904:web:b1a9b53453b657587hfgchbcvb032b6bcd",
  measurementId: "G-GWRGERGERGR"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);


-------------Inicializar  Firestore :

Criação (build) / Firestore Database / Criar banco de dados
(V) Iniciar no modo de teste
southamerica-east1 (São Paulo)

--Em regras ajustar mais tempo:
 allow read, write: if
          request.time < timestamp.date(2030, 4, 17);
    }



------------em src/services/firebaseConnection.ts  Somente:( ts ) 



import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";

//Importar também getFirestore que é o BD escolhido
import { getFirestore } from 'firebase/firestore'

const firebaseConfig = {
	 ...
	...
};

// Initialize Firebase. Trocar a variável padrão 'app' por firebaseApp. Fica melhor.
//No caso aqui estou usando também o analytics ( const analytics = getAnalytics(app); ) vou trocar por 'db'
const app = initializeApp(firebaseConfig);
//const analytics = getAnalytics(app);
const db = getFirestore(app);

export { db };



--------------------

--------------------Ajustar db no projeto. Em pages/dashboard/index.tsx.
Na parte do formulário acrescentar onSubmit{} com uma função:





/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

//criar a parte de listas
import { FiShare2 } from 'react-icons/fi';
import { FaTrash } from 'react-icons/fa';

//visualizar as alterações no painel
import { Textarea } from '@/components/textarea';

//funcionalidades do projeto com banco de dados
import { ChangeEvent, FormEvent, useState } from 'react';


export default function Dashboard(){
    
    //funcionalidades do projeto com banco de dados. Passar isso no textarea
    const [input, setInput] = useState('');
    const [publicTask, setPublicTask]=useState(false); //a caixa de seleção para tornar público inicia sempre como false


//funcionalidades do projeto com banco de dados. Passar a tipagem
    function handleChangePublic(event: ChangeEvent<HTMLInputElement>){
        //console.log(event.target.checked)

        //Se clicar na caixa passar para true
        setPublicTask(event.target.checked)
    }


//Ajustar db no projeto. Tem que tipar o evento importando FormEvent
   function handleRegisterTask(event: FormEvent){
    event.preventDefault();      // Para não atualizar a página. Em typeScript fica dessa forma.

    //Se o input for vazio, não digitou nada. Não deixar enviar vazio para DB.
    if(input === '') return;
    alert('teste')

   }



    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  

            {/* visualizar as alterações no painel */}
            <main className={styles.main}>
                <section className={styles.content}>
                    <div className={styles.contentForm}>
                        <h1 className={styles.title}>Qual sua tarefa?</h1>

                        {/**Ajustar db no projeto usando onSubmit{} nos formularios */}
                        <form onSubmit={handleRegisterTask}> {/*Criado o components/textarea para aproveitar esse formulários e trocar apenas o conteúdo textarea dele  */}
                            
                    {/*//funcionalidades do projeto com banco de dados */}
                            <Textarea
                                placeholder='Digite sua tarefa...'  
                                value={input}  
                                onChange={ (event: ChangeEvent<HTMLTextAreaElement>) => setInput(event.target.value)}                        
                            />  {/* Essa parte:
                            onChange={ (event) => setInput(event.target.value)}  
                            vai dar erro no value. Não vai encontrar. Para corrigir isso deve informar 
                             que ele é do textarea tipando o "event" com impotação de 'ChangeEvent'
                             e dizer a qual elemento pertence, 'HTMLTextAreaElement'.
                             */}


                    {/*//funcionalidades do projeto com banco de dados */}
                            <div className={styles.checkboxArea}> 
                                <input type="checkbox"
                                    className={styles.checkbox} 
                                    checked={publicTask}
                                    onChange={handleChangePublic}
                                />{/*   Iniciar a caixa como true, MAS se fizer assim:
                                checked={true} vai ficar marcada de forma permanente. 
                                Corrigir com useState
                                */}{/*
                                        onChange={} foi iniciada diferente para aprendizado.
                                        Utilizada uma função externa.
                                */}


                                <label>Deixar tarefa publica?</label>
                            </div>
                            <button type='submit' className={styles.button}>
                                Registrar
                            </button>
                        </form>
                    </div>
                </section>  

                {/*criar a parte de listas */}
                <section className={styles.taskContainer}>
                    <h1>Minhas tarefas</h1>

                    <article className={styles.task}>
                        <div className={styles.tagContainer}>
                            <label className={styles.tag}>PÚBLICO</label>
                            <button className={styles.shareButton}>
                                <FiShare2
                                    size={22}
                                    color="#3183ff"

                                />
                            </button>
                        </div>

                        <div className={styles.taskContent}>
                            <p>Minha primeira tarefa</p>
                            <button className={styles.trashButton}>
                                <FaTrash size={22}
                                color='#ea3140'/>
                            </button>
                        </div>
                    </article>
                </section>

            </main>  

        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    return{
        props:{},
    }
}



--------------------------Finalmente registrar no BD as tarefas !!!

Em pages/dashboard/index.tsx importar db e addDoc, Collection





/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

//criar a parte de listas
import { FiShare2 } from 'react-icons/fi';
import { FaTrash } from 'react-icons/fa';

//visualizar as alterações no painel
import { Textarea } from '@/components/textarea';

//funcionalidades do projeto com banco de dados
import { ChangeEvent, FormEvent, useState } from 'react';

//registrar no BD as tarefas
import { db } from '../../services/firebaseConnection';
import { addDoc, collection } from 'firebase/firestore';


//registrar no BD as tarefas. HomeProps dizer o que tem dentro de {user} e o tipo
interface HomeProps{
    user:{
        email: string
    }
}


//registrar no BD as tarefas. Vai dar erro no {user}, precisa fazer a tipagem do typesript 
export default function Dashboard( {user}: HomeProps ){
    
    //funcionalidades do projeto com banco de dados. Passar isso no textarea
    const [input, setInput] = useState('');
    const [publicTask, setPublicTask]=useState(false); //a caixa de seleção para tornar público inicia sempre como false


//funcionalidades do projeto com banco de dados. Passar a tipagem
    function handleChangePublic(event: ChangeEvent<HTMLInputElement>){
        //console.log(event.target.checked)

        //Se clicar na caixa passar para true
        setPublicTask(event.target.checked)
    }


//Ajustar db no projeto. Tem que tipar o evento importando FormEvent
//registrar no BD as tarefas. Passar para assincrona - async
   async function handleRegisterTask(event: FormEvent){
    event.preventDefault();      // Para não atualizar a página. Em typeScript fica dessa forma.

    //Se o input for vazio, não digitou nada. Não deixar enviar vazio para DB.
    if(input === '') return;
    //alert('teste')

    //registrar no BD as tarefas
    //addDoc para criar um id aleatório e passar o nome da collection que será criada no db
    try{
        await addDoc(collection(db, "nexttask"),{
            tarefa: input,
            created: new Date(),
            user: user?.email,
            public: publicTask
        });
        setInput(''); //Para voltar vazio
        setPublicTask(false); //Voltar para false para próxima tarefa
        alert('Tarefa salva no BD')
    }catch(err){
        console.log('Erro:', err);
        alert('Erro em registrar as tarefas no BD .')

    }

    /*
    tarefa: input,          -Recebe o que digitar no input
    created: new Date(),    -Data atual do registro
    user: user?.email,      -Se usuário logado
    public: publicTask      -Se a tarefa é publica ou não
    
    *** Veja lá no final do cod o retun
    */

   }



    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  

            {/* visualizar as alterações no painel */}
            <main className={styles.main}>
                <section className={styles.content}>
                    <div className={styles.contentForm}>
                        <h1 className={styles.title}>Qual sua tarefa?</h1>

                        {/**Ajustar db no projeto usando onSubmit{} nos formularios */}
                        <form onSubmit={handleRegisterTask}> {/*Criado o components/textarea para aproveitar esse formulários e trocar apenas o conteúdo textarea dele  */}
                            
                    {/*//funcionalidades do projeto com banco de dados */}
                            <Textarea
                                placeholder='Digite sua tarefa...'  
                                value={input}  
                                onChange={ (event: ChangeEvent<HTMLTextAreaElement>) => setInput(event.target.value)}                        
                            />  {/* Essa parte:
                            onChange={ (event) => setInput(event.target.value)}  
                            vai dar erro no value. Não vai encontrar. Para corrigir isso deve informar 
                             que ele é do textarea tipando o "event" com impotação de 'ChangeEvent'
                             e dizer a qual elemento pertence, 'HTMLTextAreaElement'.
                             */}


                    {/*//funcionalidades do projeto com banco de dados */}
                            <div className={styles.checkboxArea}> 
                                <input type="checkbox"
                                    className={styles.checkbox} 
                                    checked={publicTask}
                                    onChange={handleChangePublic}
                                />{/*   Iniciar a caixa como true, MAS se fizer assim:
                                checked={true} vai ficar marcada de forma permanente. 
                                Corrigir com useState
                                */}{/*
                                        onChange={} foi iniciada diferente para aprendizado.
                                        Utilizada uma função externa.
                                */}


                                <label>Deixar tarefa publica?</label>
                            </div>
                            <button type='submit' className={styles.button}>
                                Registrar
                            </button>
                        </form>
                    </div>
                </section>  

                {/*criar a parte de listas */}
                <section className={styles.taskContainer}>
                    <h1>Minhas tarefas</h1>

                    <article className={styles.task}>
                        <div className={styles.tagContainer}>
                            <label className={styles.tag}>PÚBLICO</label>
                            <button className={styles.shareButton}>
                                <FiShare2
                                    size={22}
                                    color="#3183ff"

                                />
                            </button>
                        </div>

                        <div className={styles.taskContent}>
                            <p>Minha primeira tarefa</p>
                            <button className={styles.trashButton}>
                                <FaTrash size={22}
                                color='#ea3140'/>
                            </button>
                        </div>
                    </article>
                </section>

            </main>  

        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

//Get server side props para fazer a verificação se tem usuário logado
export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    //registrar no BD as tarefas. Precisa retornar uma propriedade para o componente props
    //email: session?.user?.email agora a função Dashboard() pode receber essa propriedade "user"
    return{
        props:{
            user:{
                email: session?.user?.email
            }
        },
    }
}


***************************************

TESTAR COM LOGIN DE USUÁRIOS DIFERENTES

http://localhost:3000/dashboard
https://console.firebase.google.com/project/nextprojecttarefa/firestore/data/~2Fnexttask~2FpiDE4uY984aYzt7tL7hq?hl=pt

***************************************

Para listar itens tem 2 formas de se fazer. 


1) Buscar informações do server side e passar como propriedade aqui:

return{
        props:{
            user:{
                email: session?.user?.email
            }
        },
    }
}


-----
2) Para usar a função de REALTIME será melhor buscar dentro do useEffect.
Importar useEffect; 
query, 		
orderBy,	para ordenar
where,		para fazer um filtro
onSnapshot, 	para real time







/* Lembrando que sempre que for PÁGINA tem que que usar DEFAULT */

import styles from './styles.module.css';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';

//criar a parte de listas
import { FiShare2 } from 'react-icons/fi';
import { FaTrash } from 'react-icons/fa';

//visualizar as alterações no painel
import { Textarea } from '@/components/textarea';

//funcionalidades do projeto com banco de dados
import { ChangeEvent, FormEvent, useState, useEffect } from 'react';

//registrar no BD as tarefas
import { db } from '../../services/firebaseConnection';
import { addDoc, collection, query, orderBy, where, onSnapshot } from 'firebase/firestore';


//registrar no BD as tarefas. HomeProps dizer o que tem dentro de {user} e o tipo
interface HomeProps{
    user:{
        email: string
    }
}


//listar itens para função de REALTIME. Por estar usando TypeScript pode criar um array com objetos
interface TasckProps{
    id: string;
    created: Date;
    public: boolean;
    tarefa: string;
    user: string;
}

//registrar no BD as tarefas. Vai dar erro no {user}, precisa fazer a tipagem do typesript 
export default function Dashboard( {user}: HomeProps ){
    
    //funcionalidades do projeto com banco de dados. Passar isso no textarea
    const [input, setInput] = useState('');
    const [publicTask, setPublicTask]=useState(false); //a caixa de seleção para tornar público inicia sempre como false

    //listar itens para função de REALTIME. Usar typescript, vai ficar melhor para criar um array com objetos
    //const [task, setTask] = useState([]);
    const [task, setTask] = useState<TasckProps[]>([]);


//listar itens para função de REALTIME
    useEffect(()=>{ 
        async function loadTarefas(){
            //Buscar no bd a coleção que quer acessar
            const tarefasRef = collection(db, "nexttask" )
            //Criar filtro para ordenar por ordem de criação e exibir SOMENTE conteúdo do user logado com where('user', '==', user?.email) 
            const q = query(
                tarefasRef,
                orderBy("created", "desc"),
                where('user', '==', user?.email)

            )
            //Agora pode buscar usando realtime passando a referência query para receber o retorno"CallBack" com snapshot para ter acesso a todos os dados do user
           
            onSnapshot(q, (snapshot)=>{ //http://localhost:3000/dashboard   Dar um F5

                //console.log(snapshot);// Vai reclamar que "where" precisa de index. Veja anotações na documentação própria deste projeto.
/*Na lista em inspecionar/console veja que agora tem acesso a todos os dados que podem ser usados no projeto */
                //alert("snapshot foi lido")

                //Agora que está tudo ok, precisa criar um local para armazenar usando typescript
                let lista = [] as TasckProps[];
                //Agora pode percorrrer todos os elementos que achou em snapshot com NOMES EXATAMENTE IGUAIS AO CRIADOS NO DB
                snapshot.forEach( (doc)=>{
                    lista.push( {    //Só vai conseguir passar aqui o que foi chamado na tipagem
                        id: doc.id,
                        tarefa: doc.data().tarefa,
                        created: doc.data().created,
                        user: doc.data().user,
                        public: doc.data().public
                     })
                })
                //console.log(lista)
                //alert('lista carregada no console')

                //Testado. Passar para useState
                setTask(lista);

                //Pronto. Agora pode char isso lá no article para exibir todos os itens na página


            })
        }//Lembrar sempre de CHAMAR A FUNÇÃO

        loadTarefas();

    },[user?.email]) //Por estar usando algo externo passar user?.email como DEPENDÊNCIA.

//funcionalidades do projeto com banco de dados. Passar a tipagem
    function handleChangePublic(event: ChangeEvent<HTMLInputElement>){
        //console.log(event.target.checked)

        //Se clicar na caixa passar para true
        setPublicTask(event.target.checked)
    }


//Ajustar db no projeto. Tem que tipar o evento importando FormEvent
//registrar no BD as tarefas. Passar para assincrona - async
   async function handleRegisterTask(event: FormEvent){
    event.preventDefault();      // Para não atualizar a página. Em typeScript fica dessa forma.

    //Se o input for vazio, não digitou nada. Não deixar enviar vazio para DB.
    if(input === '') return;
    //alert('teste')

    //registrar no BD as tarefas
    //addDoc para criar um id aleatório e passar o nome da collection que será criada no db
    try{
        await addDoc(collection(db, "nexttask"),{
            tarefa: input,
            created: new Date(),
            user: user?.email,
            public: publicTask
        });
        setInput(''); //Para voltar vazio
        setPublicTask(false); //Voltar para false para próxima tarefa
        alert('Tarefa salva no BD')
    }catch(err){
        console.log('Erro:', err);
        alert('Erro em registrar as tarefas no BD .')

    }

    /*
    tarefa: input,          -Recebe o que digitar no input
    created: new Date(),    -Data atual do registro
    user: user?.email,      -Se usuário logado
    public: publicTask      -Se a tarefa é publica ou não
    
    *** Veja lá no final do cod o retun
    */

   }



    return(
        <div className={styles.container}>
            <Head>
                <title>Painel de tarefas</title>
            </Head>  

            {/* visualizar as alterações no painel */}
            <main className={styles.main}>
                <section className={styles.content}>
                    <div className={styles.contentForm}>
                        <h1 className={styles.title}>Qual sua tarefa?</h1>

                        {/**Ajustar db no projeto usando onSubmit{} nos formularios */}
                        <form onSubmit={handleRegisterTask}> {/*Criado o components/textarea para aproveitar esse formulários e trocar apenas o conteúdo textarea dele  */}
                            
                    {/*//funcionalidades do projeto com banco de dados */}
                            <Textarea
                                placeholder='Digite sua tarefa...'  
                                value={input}  
                                onChange={ (event: ChangeEvent<HTMLTextAreaElement>) => setInput(event.target.value)}                        
                            />  {/* Essa parte:
                            onChange={ (event) => setInput(event.target.value)}  
                            vai dar erro no value. Não vai encontrar. Para corrigir isso deve informar 
                             que ele é do textarea tipando o "event" com impotação de 'ChangeEvent'
                             e dizer a qual elemento pertence, 'HTMLTextAreaElement'.
                             */}


                    {/*//funcionalidades do projeto com banco de dados */}
                            <div className={styles.checkboxArea}> 
                                <input type="checkbox"
                                    className={styles.checkbox} 
                                    checked={publicTask}
                                    onChange={handleChangePublic}
                                />{/*   Iniciar a caixa como true, MAS se fizer assim:
                                checked={true} vai ficar marcada de forma permanente. 
                                Corrigir com useState
                                */}{/*
                                        onChange={} foi iniciada diferente para aprendizado.
                                        Utilizada uma função externa.
                                */}


                                <label>Deixar tarefa publica?</label>
                            </div>
                            <button type='submit' className={styles.button}>
                                Registrar
                            </button>
                        </form>
                    </div>
                </section>  

                {/*criar a parte de listas */}
                <section className={styles.taskContainer}>
                    <h1>Minhas tarefas</h1>

{/**listar itens para função de REALTIME. Lembrar de por uma key obrigatória*/}

                    {task.map((item)=>(

                    <article key={item.id}     className={styles.task}>

                       {/*Só exibir botão "PÚBLICO"  se estiver público o conteúdo*/} 
                       {item.public && (

                            <div className={styles.tagContainer}>
                                <label className={styles.tag}>PÚBLICO</label>
                                <button className={styles.shareButton}>
                                <FiShare2
                                    size={22}
                                    color="#3183ff"

                                />
                                 </button>
                            </div>

                       )}
                        

                        <div className={styles.taskContent}>

         {/*listar itens para função de REALTIME. Agora pode corrigir o parágrafo
           <p>Minha primeira tarefa</p>
         */}                   
                            <p>{item.tarefa}</p>
                            <button className={styles.trashButton}>
                                <FaTrash size={22}
                                color='#ea3140'/>
                            </button>
                        </div>
                    </article>

                    ))}


                    
                </section>

            </main>  

        </div>
    )
}

//proteger o link /dashboard no navegador. Server Side é sempre executado no lado do SERVIDOR.

//Get server side props para fazer a verificação se tem usuário logado
export const getServerSideProps: GetServerSideProps =async ( {req} ) => {//Escreva ""req"" de requisição. Importante ser apenas essas 3 letras
    //console.log("Buscando pelo server side"); //Veja no   TERMINAL
    //importar getSession para não ter que usar useEffect
    const session = await getSession( {req} );
    //console.log(session); //Veja no   TERMINAL
    if( !session?.user ){
        //Se não tem user, vá para home
        return{
            redirect: {
                destination: '/', //Home
                permanent: false
            },
        };

    }

    //registrar no BD as tarefas. Precisa retornar uma propriedade para o componente props
    //email: session?.user?.email agora a função Dashboard() pode receber essa propriedade "user"
    return{
        props:{
            user:{
                email: session?.user?.email
            }
        },
    }
}










----------------
onSnapshot(q, (snapshot)=>{
                console.log(snapshot);

// Vai reclamar que "where" precisa de index.  http://localhost:3000/dashboard
            
PARA CORRIGIR ISSO vá em 

https://console.firebase.google.com/project/nextprojecttarefa/firestore/indexes?hl=pt-br

Na aba Índices / Criar índices

Collections ID (Código do conjunto) - passar o nome da collection em uso
nexttask
--
Campos para indexar
No mínimo dois campos obrigatórios*
user		Ascending
created		Descending

--
Escopos da consulta
Coleção

--
Criar índice



-----
*****Criar outro invertido:

Código do conjunto
nexttask

Campos para indexar
No mínimo dois campos obrigatórios*
user		Descending
created		Ascending

Escopos da consulta
Coleção
Para consultas dentro de um caminho de coleção específico

--
Criar índice

----------------Vai demorar um pouco para criar------------------

Se atualizar a página do projeto em inspecionar vai ver que a mensagem de reclamação do where foi corrigida

http://localhost:3000/dashboard   F5 para atualizar e veja o que pode ser usado no projeto lá em inspecionar/console
referente aos dados que já foram armazenados anteriormente para teste































































