Não usar commit, não deixa documentado. Não é considerado uma boa prática.

Usar build

Estratégia e vantagem de dividir uma imagem em camadas é o reuso.



https://hub.docker.com/_/nginx

 install Docker Community Edition on Windows 10 ATUALIZADO.

ou em otras versões do windows
docker tollbox

Para verificar a instalação.
Apos instalado abra o CMD e digite no terminal:
docker

Se listar, então está ok.

 Digite tanbém:
docker container run hello-world

Primeiro não vai encontrar e depois vai fazer um pull e exibir a mensagem.
  --------

bash --version

Para limpar o terminal: cls

Run sempre cria um novo container.
docker container run -it debian bash --version

ps

(verificar quais são os containers ativos)
docker container ps

(exibir todos os containers, mesmo os que não estão ativos)
docker container -a 

(para executar e remover o container)
docker container ps -a


###########################################################




docker container run -it debian bash

i- iterativo
t- terminal

Agora utilizando o debian no terminal:

Use o botão DIREITO do mouse para colar comandos copiados.

 Criar: 

# touch curso-docker.txt
#ls

Para entrar em um novo container:
# exit

docker container run -it debian bash

# ls curso-docker.txt

Vai avisar que não existe. Está em novo container.
# exit

##############################################################

docker container run --help

(criar um container com um nome escolhido)
docker container run --name leandrodocker -it debian bash

Lembrando que RUN sempre cria um novo container.

verificar os containers existentes novamente:
docker container ls -a


Iniciar um container específico (start):
docker container start -ai leandrodocker
 
# touch curso-docker.txt

#############################################################
Não é interessante manter um container totalmente isolado, pode manter uma porta aberta e compartilhar algo,
algum serviço.

Parar a execução de um container diretamente do terminal com o comando CTRL+C, 
porém, esse comando só funciona no Mac e no Linux. Para o Windows é preciso utilizar
o comando:
docker container stop "NomeDoContainer"

docker container run -p 8080:80 nginx

testar no navegador:
http://localhost:8080/

docker container stop leandrodocker

########################################################



Ao utilizar um trecho de comando chamado "pwd"  retorna o caminho atual da pasta onde o terminal está localizado, porém, esse "pwd" 
não irá funcionar em todos os terminais ou sistemas operacionais. Caso não funcione será necessário utilizar o comando absoluto 
da pasta em questão, ou seja, algo como "c/users/SeuNome/docker"
 cd ..
cd ..
 Ir até   C:\Users\Lcf\Desktop

cd Users
cd Lcf
cd Descktop
mkdir curso-docker-leandro

cd curso-docker-leandro
mkdir exercicio-volume
cd exercicio-volume
mkdir pasta-html
cd pasta-html
(colocar nesssa pasta, para teste, um arquivo chamado html.html)

docker container run -p 8080:80 -v $(pwd)/html:/usr/share/nginx/html nginx
(-v é para mapear volume, pwd vai pegar a pasta corrente e vai procurar uma sub-pasta chamda not-found 
e vai apontar agora para uma pasta host)

docker container run -p 8080:80 -v C:\Users\Lcf\Desktop\curso-docker-leandro\exercicio-volume\pasta-html:/usr/share/nginx/html nginx

Agora vá ao navegador:
http://localhost:8080/


**************



https://hub.docker.com/_/nginx


Esse é o modo principal.


Para executar background vá até a pasta que deseja:
cd ..

cd Users\Lcf\Desktop\curso-docker-leandro\exercicio-volume

docker container run -d --name ex-daemon-basic -p 8080:80 -v C:\Users\Lcf\Desktop\curso-docker-leandro\exercicio-volume\pasta-html:/usr/share/nginx/html nginx

Vai gerar um ID e o container está em execução.

Verificar container em execução:
docker container ps

Parar:
docker container stop ex-daemon-basic

Iniciar:
docker container start ex-daemon-basic

Restart:
docker container restart ex-daemon-basic

@@@
*** Pode ainda usar o ID: (docker container ps)

docker container stop ex-daemon-basic
docker container stop aa643f43eabc
@@@
---------------------------------------------------
Manipulação de containers em modo daemon:

docker container ps
docker container ps -a
docker container ls
docker container ls -a
docker container list
docker container list -a

-----
Antigamente era: 
(docker ps
docker ps -a)   Isso causava alguns problemas. Seguir o modelo  mais recente chamado daemon.
-----

Verificar o que foi feito:
docker container logs aa643f43eabc

Fazer uma inspeção docontainer:
docker container inspect ex-daemon-basic

Que tipo de sistemas está no container:
docker container exec ex-daemon-basic uname -or

Apagar imagem, não o container:
docker image rm "nome a ser removido"

Imagem é a classe, camadas e container é o objeto, o processo. A partir de uma classe pode instanciar muitos objetos.

docker image --help
docker container --help
docker volume --help



Para uma imagem mais recente (Tomar cuidado, pode gerar erros e problemas na recuperação de dados e correção de bugs):
docker image pull redis:latest
docker image inspect redis:latest

Alterar o nome:
docker image tag redis:latest leandrocf79
docker image ls

Apagar 1,  2 ou mais é só dar espaço e colocar os nomes:
docker image rm redis:latest leandrocf79


#######################

COMANDOS BÁSICOS NO GERENCIAMNTO DAS IMAGES:

docker image pull  (baixa a imagem do docker hub)
docker image ls
docker image rm "nome a ser removido"
docker image inspect
docker image tag (para aplicar um novo nome)
docker image build (vai gerar a imagem)
docker image push (para publicar)

#######################

Docker Hub × Docker Registry:

Docker Hub:
É um SAAS, é uma núvem disponibilizada pelo docker, tambem tem um registry.

Docker Registry:
Servoço de registro e obtenção ou resgate de images.



https://hub.docker.com/_/nginx

Primeiro build

Pode usar o editor de preferência para criar as pastas e os arquivos necessários, 
Visual Studio, Sublime Text ou ainda "Abrir como" txt.



Ditertório principal:
curso-doker-leandro

sub-diretórios:

1)
Diretório:
exrcicio-volume/pasta-html

Arquivo:
html.html

2)
Diretório:
primeiro-build  (escolha um nome para o diretório, aqui ficou primeiro build)

Arquivo:
Dockerfile   (Assim mesmo, sem extenção e "file" com letras minúsculas)



Abra um editor, recomendo o *"Sublime Text"* e coloque neste arquivo o segunte cod:

********* NO EDITOR:

# Se estiver no linux tem esse exemplo.

# FROM nginx:latest
# RUN echo '<h1>Hello World! Hello technology!</h1>' > /usr/share/nginx/html/index.html

#   No Windows:

FROM nginx:latest
RUN echo '<h1>Hello World! Hello technology!</h1>' > C:\Users\Lcf\Desktop\curso-docker-leandro\exercicio-volume\pasta-html\index.html

*********

No terminal digitar:
cd ..
Ir até a pasta primeiro-build:
(C:\Users\Lcf\Desktop\curso-docker-leandro\primeiro-build)

cd Desktop\curso-docker-leandro\primeiro-build

Tem que por um nome, colocar uma tag na imagem:
docker image build -t ex-simple-build .

 ( -t é para colocar o nome, neste caso, o nome "ex-simple-build"
O "espaço ponto" é para dizer que é a pasta local )
Conferir:
docker image ls
docker container run -p 80:80 ex-simple-build

No navegador abrir a porta 80 apenas inserindo:
http://localhost

Verá a mensagem "Hello World! Hello technology"




Recebendo parâmetros na execução da imagem. 
É bom para acessar de forma indireta em outra pasta e personalizar o desenvolvimento de acordo com a necessidade.

Abrir o programa instalado Docker e o terminal.

Vá no editor (Sublime Text) e crie uma nova pasta e coloque o nome de build-com-arg
Nela crie um arquivo Dockerfile (esse é nome padrão e sem extenção)

No Dokerfile será inserido a utilização do Debian:

###

FROM debian
LABEL maintainer 'Aluno Cod3r <aluno leandrocf79@gmail.com>'

ARG S3_BUCKET=files   # área para armazenar arquivos
ENV S3_BUCKET=${S3_BUCKET}

###

No terminal vá até a pasta criada:
cd Desktop\curso-docker-leandro\build-com-arg

( incluir o espaço-ponto ):
docker image build -t ex-build-arg .
docker container run ex-build-arg bash -c 'echo $S3_BUCKET' ( ATENÇÃO!!! No windows só vai rodar com aspas duplas )
docker container run ex-build-arg bash -c "echo $S3_BUCKET"


Pode passar um novo parâmetro para criação da imagem:
docker image build --build-arg S3_BUCKET=myapp -t ex-build-arg .

Passar o meso parâmetro e observar que agora executa o "myapp":
docker container run ex-build-arg bash -c "echo $S3_BUCKET"

Os labels podem ser extraídos futuramente da imagem, o comando abaixo extrai o
mantenedor da imagem que acabau de criar.
Esse filtro retorna apenas o que deseja saber:
docker image inspect --format="{{index .Config.Labels \"maintainer\"}}"  ex-build-arg






Criar uma pasta chamada build-com-copy
Nela criar:
index.html

Por o conteúdo para teste para acessar conteúdo.html criado no dentro de Dockerfile:

### Em index.html:

<a href="conteudo.html">Conteudo do site</a>

###



No Dockerfile:
###

FROM nginx:latest
LABEL maintainer 'Aluno Cod3r <aluno leandrocf79@gmail.com>'

RUN echo '<h1>Copia de conteudo realizada com sucesso</h1>' > /usr/share/nginx/html/conteudo.html
COPY *.html /usr/share/nginx/html/


##############  PARA WINDOWS USAR:

FROM nginx:latest
LABEL maintainer "Aluno Cod3r <aluno: leandrocf79@gmail.com>"

RUN echo "<h1>Copia de conteudo realizada com sucesso</h1>" > C:\Users\Lcf\Desktop\curso-docker-leandro\build-com-copy\conteudo.html
COPY *.html C:\Users\Lcf\Desktop\curso-docker-leandro\build-com-copy

###

No terminal acessar a pasta criada build-com-copy:
cd ..
cd build-com-copy
ou
cd Desktop\curso-docker-leandro\build-com-copy

( incluir o espaço-ponto ):
docker image build -t ex-build-copy .

docker image ls

docker container run -p 8077:80 ex-build-copy 
# Serviço disponível em:
http://localhost:8077






Criar uma pasta chamada build-dev
Nela criar:
index.html

Por o conteúdo para teste para acessar conteúdo.html criado no dentro de Dockerfile:

### Em index.html:

<p>Hello from python !!!  ;) </p>


############## Criar outro arquivo chamado run.py será o SERVIDOR

import logging
import http.server
import socketserver
import getpass

class MyHTTPHandler(http.server.SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        logging.info("%s - - [%s] %s\n"% (
            self.client_address[0],
            self.log_date_time_string(),
            format%args
        ))

logging.basicConfig(
    filename='/log/http-server.log',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger().addHandler(logging.StreamHandler())
logging.info('inicializando...')
PORT = 8000

httpd = socketserver.TCPServer(("", PORT), MyHTTPHandler)
logging.info('escutando a porta: %s', PORT)
logging.info('usuário: %s', getpass.getuser())
httpd.serve_forever()


###############




### No Dockerfile usar exatamente assim, mesmo para windows:

FROM python:3.6
LABEL maintainer 'Aluno Cod3r <aluno at cod3r.com.br>'

RUN useradd www && \
    mkdir /app && \
    mkdir /log && \
    chown www /log

USER www
VOLUME /log
WORKDIR /app
EXPOSE 8000

ENTRYPOINT ["/usr/local/bin/python"]
CMD ["run.py"]



##############



No terminal acessar a pasta criada build-dev:
cd ..
cd build-dev
ou
cd Desktop\curso-docker-leandro\build-dev

( incluir o espaço-ponto ):
docker image build -t ex-build-dev .

# docker container run -it -v $(pwd):/app -p 80:8000 --name python-server ex-build-dev

docker container run -it -v C:\Users\Lcf\Desktop\curso-docker-leandro\build-dev:/app -p 80:8000 --name python-server ex-build-dev

Agora, vai observar no terminal as mensagens escritas no run.py

No navegador:
http://localhost/


Acessar de outro local:
docker container run -it --volumes-from=python-server debian cat /log/http-server.log

/log/http-server.log Foi criado no run.py




Push para Docker Hub

Login
https://hub.docker.com/

Pegar um conteúdo que está no computador e criar uma nova tag e enviar.

Abrir o docker instalado.

Abrir terminal:
cd Desktop\curso-docker-leandro\build-dev

docker image ls

docker image tag ex-simple-build leandrocf79/simple-build:1.0

docker image ls
**Observar a IMAGE ID de ex-simple-build   e   leandrocf79/simple-build:1.0   devem ter o mesmo id.


Para fazer o push precisa logar:
docker login --username=leandrocf79

Ao digitar a senha vai parecer que nada está acontecendo, mas está registrando sim. Pode colar a senha também.

Push:
docker image push leandrocf79/simple-build:1.0 

Pode ir até a página web e F5






Bridg Network (padrão):
Cria uma ponte entre o container e o host com acesso a internet. Muito mais seguro.
Será abordado melhor na próxima aula.

Para criar um repositório privado no https://hub.docker.com/repositories clique no projeto
e na página seguinte na aba "Settings" e escolha o botão "Make Private".






Tem 4 tipos de redes no docker.

1) Nome Network:
Nenhuma rede, para processamento interno, algo que manupule um volume.

2) Bridg Network (padrão):
Cria uma ponte entre o container e o host com acesso a internet.

3) Host network (modo de proteção baixo):
Cria container sem ponte e com acesso direto ao host com internet.

4) Overlay Nerwork (Swarm):
Esse não será abordado neste curso, o docker utiliza clusters.

___________________
Exemplo para começar:
#docker caontainer run -d --net none debian

Debian foi uma imagem escolhida, mas pode chamr outras.
___________________


Acessar o diretório principal:
Desktop\curso-docker-leandro

docker network ls

1) Nome Network, Container sem rede:

### Para teste criar um container e apagar ele, é para exibir um container com acesso a rede e o número de ip.

docker container run --rm alpine ash -c "ifconfig"

--rm : Vai apagar o container após executar
alpine : imagem
ash : é um bash mais leve
-c : para chamar o comando
ifconfig : comando com "f" mesmo

### O mesmo comando anterior, mas agora selecionando a rede NONE.

docker container run --rm --net none alpine ash -c "ifconfig"

Vai exibir sem acesso fora do container.

###################


2) Bridg Network (padrão):

docker network inspect bridge

Criar e acessar um container com ping e sleep 1000 para ficar ativo e executando:

docker container run -d --name container1 alpine sleep 1000

docker container exec -it container1 ifconfig
para ver o ip criado para essa máquina


Criar o SEGUNDO container:
docker container run -d --name container2 alpine sleep 1000

docker container exec -it container2 ifconfig
para ver o ip criado para essa máquina


Agora fazer o ping:
docker container exec -it container1 ping 172.17.0.3

Ctrl+C para parar.
___________________

docker container exec -it container1 ping www.google.com



Criar uma nova rede:

docker network create --driver bridge rede_nova
docker network ls
docker network inspect rede_nova
Observar a faixa de rede criada:
	"Subnet": "172.18.0.0/16",
        "Gateway": "172.18.0.1"

docker container run -d --name container3 --net rede_nova alpine sleep 1000

docker container exec -it container3 ifconfig
para ver o ip criado para essa máquina

### Fazer um ping do container3 para container1(ip: 172.17.0.2 ):

docker container exec -it container3 ping 172.17.0.2
Ctrl+C para parar.
___________________
Observe que não houve ping! Agora criar acesso entre os containeres:

Conectar ponte/container3:
docker network connect bridge container3

Para observar o resultado:
docker container exec -it container3 ifconfig

Agora fazer o ping novamente:
docker container exec -it container3 ping 172.17.0.2
Ctrl+C para parar.
___________________

Para desconectar:
docker network disconnect bridge container3

Para observar o resultado:
docker container exec -it container3 ifconfig



###################
3) Host network (mais rápido, modo de proteção baixo):

No terminal, para ver as redes disponíveis:
ifconfig
No windows:
ipconfig

docker container run -d --name container4 --net rede_nova alpine sleep 1000
docker container exec -it container4 ifconfig




Micro service
Docker Compose

Criar 3 containers sendo 1 BD (MongoDb), 1 Backend (Node.JS) e 1 Frontend:

Editor Sublime Text.

C:\Users\Lcf\Desktop\curso-docker-leandro\node-mongo-compose\

docker-compose.yml

backend\app.js   package-lock.json    package.json   e   .gitignore

frontend\index.html 

_____________________



########################################## Backend:


app.js com o conteúdo:

const express = require('express')
const restful = require('node-restful')
const server = express()
const mongoose = restful.mongoose
const bodyParser = require('body-parser')
const cors = require('cors')

// Database
mongoose.Promise = global.Promise
mongoose.connect('mongodb://db/mydb')

// Middlewares
server.use(bodyParser.urlencoded({extended:true}))
server.use(bodyParser.json())
server.use(cors())

// ODM
const Client = restful.model('Client', {
    name: { type: String, required: true }
})

// Rest API
Client.methods(['get', 'post', 'put', 'delete'])
Client.updateOptions({new: true, runValidators: true})

// Routes
Client.register(server, '/clients')

// Start Server
server.listen(3000)


####################

package-lock.json com o conteúdo:


{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 1,
  "dependencies": {
    "accepts": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.3.tgz",
      "integrity": "sha1-w8p0NJOGSMPg2cHjKN1otiLChMo="
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "async": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/async/-/async-2.1.4.tgz",
      "integrity": "sha1-LSFgx3iAMuTdbL4lAvH5osj2zeQ="
    },
    "bluebird": {
      "version": "2.10.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.10.2.tgz",
      "integrity": "sha1-AkpVFylTCIV/FPkfEQb8O1VfRGs="
    },
    "body-parser": {
      "version": "1.17.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.17.2.tgz",
      "integrity": "sha1-+IkqvI+eYn1Crtr7yma/WrmRBO4="
    },
    "bson": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/bson/-/bson-1.0.4.tgz",
      "integrity": "sha1-k8ENOeqltYQVy8QFLz5T5WKwtyw="
    },
    "buffer-shims": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/buffer-shims/-/buffer-shims-1.0.0.tgz",
      "integrity": "sha1-mXjOMXOIxkmth5MCjDR37wRKi1E="
    },
    "bytes": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-2.4.0.tgz",
      "integrity": "sha1-fZcZb51br39pNeJZhVSe3SpsIzk="
    },
    "content-disposition": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
      "integrity": "sha1-DPaLud318r55YcOoUXjLhdunjLQ="
    },
    "content-type": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.2.tgz",
      "integrity": "sha1-t9ETrueo3Se9IRM8TcJSnfFyHu0="
    },
    "cookie": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
      "integrity": "sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "cors": {
      "version": "2.8.4",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.4.tgz",
      "integrity": "sha1-K9OB8usgECAQXNUOpZ2mMJBpRoY="
    },
    "debug": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.7.tgz",
      "integrity": "sha1-krrR9tBbu2u6Isyoi80OyJTChh4="
    },
    "depd": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.0.tgz",
      "integrity": "sha1-4b2Cxqq2ztlluXuIsX7T5SjKGMM="
    },
    "destroy": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
      "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "encodeurl": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.1.tgz",
      "integrity": "sha1-eePVhlU0aQn+bw9Fpd5oEDspTSA="
    },
    "es6-promise": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-3.2.1.tgz",
      "integrity": "sha1-7FYjOGgDKQkgcXDDlEjiREndH8Q="
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "etag": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.0.tgz",
      "integrity": "sha1-b2Ma7zNtbEY2K1F2QETOIWvjwFE="
    },
    "express": {
      "version": "4.15.3",
      "resolved": "https://registry.npmjs.org/express/-/express-4.15.3.tgz",
      "integrity": "sha1-urZdDwOqgMNYQIly/HAPkWlEtmI="
    },
    "finalhandler": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.0.3.tgz",
      "integrity": "sha1-70fneVDpmXgOhgIqVg4yF+DQzIk="
    },
    "forwarded": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.1.0.tgz",
      "integrity": "sha1-Ge+YdMSuHCl7zweP3mOgm2aoQ2M="
    },
    "fresh": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.0.tgz",
      "integrity": "sha1-9HTKXmqSRtb9jglTz6m5yAWvp44="
    },
    "hooks-fixed": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/hooks-fixed/-/hooks-fixed-2.0.0.tgz",
      "integrity": "sha1-oB2JTVKsf2WZu7H2PfycQR33DLo="
    },
    "http-errors": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.1.tgz",
      "integrity": "sha1-X4uO2YrKVFZWv1cplzh/kEpyIlc="
    },
    "iconv-lite": {
      "version": "0.4.15",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.15.tgz",
      "integrity": "sha1-/iZaIYrGpXz+hUkn6dBMGYJe3es="
    },
    "inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
    },
    "ipaddr.js": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.3.0.tgz",
      "integrity": "sha1-HgOlL9rYOou7KyXL9JmLTP/NPew="
    },
    "isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "kareem": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-1.4.1.tgz",
      "integrity": "sha1-7XYgAET6BB7zK02oJh4lU/EXNTE="
    },
    "lodash": {
      "version": "4.17.4",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.4.tgz",
      "integrity": "sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
    },
    "mime": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.3.4.tgz",
      "integrity": "sha1-EV+eO2s9rylZmDyzjxSaLUDrXVM="
    },
    "mime-db": {
      "version": "1.27.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.27.0.tgz",
      "integrity": "sha1-gg9XIpa70g7CXtVeW13oaeVDbrE="
    },
    "mime-types": {
      "version": "2.1.15",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.15.tgz",
      "integrity": "sha1-pOv1BkCUVpI3uM9wBGd20J/JKu0="
    },
    "mongodb": {
      "version": "2.2.27",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-2.2.27.tgz",
      "integrity": "sha1-NBIgNNtm2YO89qta2yaiSnD+9uY="
    },
    "mongodb-core": {
      "version": "2.1.11",
      "resolved": "https://registry.npmjs.org/mongodb-core/-/mongodb-core-2.1.11.tgz",
      "integrity": "sha1-HDh3bOsXSZepnCiGDu2QKNqbPho="
    },
    "mongoose": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-4.11.1.tgz",
      "integrity": "sha1-JWC22J50SwWFfQJMq4sxYGZxbj4="
    },
    "mpath": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.3.0.tgz",
      "integrity": "sha1-elj3iem1/TyUUgY0FXlg8mvV70Q="
    },
    "mpromise": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/mpromise/-/mpromise-0.5.5.tgz",
      "integrity": "sha1-9bJCWddjrMIlewoMjG2Gb9UXMuY="
    },
    "mquery": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-2.3.1.tgz",
      "integrity": "sha1-mrNnSXFIAP8LtTpoHOS8TV8HyHs=",
      "dependencies": {
        "debug": {
          "version": "2.6.8",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.8.tgz",
          "integrity": "sha1-5zFTHKLt4n0YgiJCfaF4IdaP9Pw="
        },
        "sliced": {
          "version": "0.0.5",
          "resolved": "https://registry.npmjs.org/sliced/-/sliced-0.0.5.tgz",
          "integrity": "sha1-XtwETKTrb3gW1Qui/GPiXY/kcH8="
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "muri": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/muri/-/muri-1.2.1.tgz",
      "integrity": "sha1-7H6lzmympSPrGrNbrNpfqBbJqjw="
    },
    "negotiator": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz",
      "integrity": "sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk="
    },
    "node-restful": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/node-restful/-/node-restful-0.2.6.tgz",
      "integrity": "sha1-Qqs63IwaX5TthkeZhF+O/jEeYy4="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc="
    },
    "parseurl": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.1.tgz",
      "integrity": "sha1-yKuMkiO6NIiKpkopeyiFO+wY2lY="
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
    },
    "process-nextick-args": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.7.tgz",
      "integrity": "sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="
    },
    "proxy-addr": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-1.1.4.tgz",
      "integrity": "sha1-J+VF9pYKRKYn2bREZ+NcG2tM4vM="
    },
    "qs": {
      "version": "6.4.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.4.0.tgz",
      "integrity": "sha1-E+JtKK1rD/qpExLNO/cI7TUecjM="
    },
    "range-parser": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz",
      "integrity": "sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4="
    },
    "raw-body": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.2.0.tgz",
      "integrity": "sha1-mUl2z2pQlqQRYoQEkvC9xdbn+5Y="
    },
    "readable-stream": {
      "version": "2.2.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.2.7.tgz",
      "integrity": "sha1-BwV6y+JGeyIELTb5jFrVBwVOlbE="
    },
    "regexp-clone": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/regexp-clone/-/regexp-clone-0.0.1.tgz",
      "integrity": "sha1-p8LgmJH9vzj7sQ03b7cwA+aKxYk="
    },
    "require_optional": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/require_optional/-/require_optional-1.0.1.tgz",
      "integrity": "sha512-qhM/y57enGWHAe3v/NcwML6a3/vfESLe/sGM2dII+gEO0BpKRUkWZow/tyloNqJyN6kXSl3RyyM8Ll5D/sJP8g=="
    },
    "resolve-from": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-2.0.0.tgz",
      "integrity": "sha1-lICrIOlP+h2egKgEx+oUdhGWa1c="
    },
    "safe-buffer": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz",
      "integrity": "sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="
    },
    "semver": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.3.0.tgz",
      "integrity": "sha1-myzl094C0XxgEq0yaqa00M9U+U8="
    },
    "send": {
      "version": "0.15.3",
      "resolved": "https://registry.npmjs.org/send/-/send-0.15.3.tgz",
      "integrity": "sha1-UBP5+ZAj31DRvZiSwZ4979HVMwk="
    },
    "serve-static": {
      "version": "1.12.3",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.12.3.tgz",
      "integrity": "sha1-n0uhni8wMMVH+K+ZEHg47DjVseI="
    },
    "setprototypeof": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.3.tgz",
      "integrity": "sha1-ZlZ+NwQ+608E2RvWWMDL77VbjgQ="
    },
    "sliced": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/sliced/-/sliced-1.0.1.tgz",
      "integrity": "sha1-CzpmK10Ewxd7GSa+qCsD+Dei70E="
    },
    "statuses": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.3.1.tgz",
      "integrity": "sha1-+vUbnrdKrvOzrPStX2Gr8ky3uT4="
    },
    "string_decoder": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz",
      "integrity": "sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ=="
    },
    "type-is": {
      "version": "1.6.15",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.15.tgz",
      "integrity": "sha1-yrEPtJCeRByChC6v4a1kbIGARBA="
    },
    "underscore": {
      "version": "1.8.3",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.8.3.tgz",
      "integrity": "sha1-Tz+1OxBuYJf8+ctBCfKl6b36UCI="
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw="
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "utils-merge": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.0.tgz",
      "integrity": "sha1-ApT7kiu5N1FTVBxPcJYjHyh8ivg="
    },
    "vary": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.1.tgz",
      "integrity": "sha1-Z1Neu2lMHVIldFeYRmUyP1h+jTc="
    }
  }
}



####################

package.json  com o conteúdo:


No terminal:

Acessar a pasta backend:
cd Desktop\curso-docker-leandro\node-mongo-compose\backend

*** NÃO VAI FUNCIONAR NO WINDOWS. COPIAR O CONTEÚDO DA AULA se não tiver o NODE.JS instalado no computador.
Iniciar: 
npm init -y

Se ainda não tiver instalado usar essa versão para o curso:
npm i --save express@4.15.3 mongoose@4.11.1 node-restful@0.2.6 body-parser@1.17.2 cors@2.8.3

-----------------------------

{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.17.2",
    "cors": "^2.8.3",
    "express": "^4.15.3",
    "mongoose": "^4.11.1",
    "node-restful": "^0.2.6"
  }
}



####################

.gitignore com o conteúdo:


node_modules



########################################## Frontend:

index.html com o conteúdo:


<html>
    <head>
        <meta charset='utf-8'>
        <title>Cadastro Simples</title>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    </head>
    <body>
        <div class="container">
            <h1>Cadastro Simples</h1>
            <hr>
            <div>
                <input name='id' type='hidden' />
                <div class="form-group">
                    <label for="Name"></label>
                    <input class='form-control' name='name' placeholder='Digite o nome' />
                </div>
                <button class='btn btn-success' save>Salvar</button>
            </div>

            <table class="table" id='clients'>
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="clientsRows"></tbody>
            </table>
        </div>

        <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js'></script>

        <script>
            const API = 'http://localhost:3000'

            const createButton = (label, type) => {
                return $('<button>').addClass(`btn btn-${type}`).html(label)
            }

            const renderRows = clients => {
                const rows = clients.map(client => {
                    const updateButton = createButton('Atualizar', 'warning')
                    updateButton.click(() => loadClient(client))

                    const removeButton = createButton('Excluir', 'danger')
                    removeButton.click(() => removeClient(client))

                    return $('<tr>')
                        .append($('<td>').append(client.name))
                        .append($('<td>').append(updateButton).append(removeButton))
                })

                $('#clientsRows').html(rows)
            }

            const loadClient = client => {
                $('[name=id]').val(client._id)
                $('[name=name]').val(client.name)
            }

            const removeClient = client => {
                $.ajax({
                    method: 'DELETE',
                    url: `${API}/clients/${client._id}`,
                    success: getClients
                })
            }

            const getClients = () => {
                $.ajax({
                    url: `${API}/clients`,
                    success: clients => {
                        renderRows(clients)
                        $('[name]').val('')
                    }
                })
            }

            const saveClient = () => {
                const _id = $('[name=id]').val()
                const name = $('[name=name]').val()
                $.ajax({
                    method: _id ? 'PUT' : 'POST',
                    url: `${API}/clients/${_id}`,
                    data: _id ? { _id, name } : { name },
                    success: getClients
                })
            }

            $(() => {
                getClients()
                $('[save]').click(saveClient)
            })
        </script>
    </body>
</html>



##########################################################

########################################## 

Na pasta:
C:\Users\Lcf\Desktop\curso-docker-leandro\node-mongo-compose\

docker-compose.yml com o conteúdo:


version: '3'
services:
  db:
    image: mongo:3.4
  backend:
    image: node:8.1
    volumes:
      - ./backend:/backend
    ports:
      - 3000:3000
    command: bash -c "cd /backend && npm i && node app"
  frontend:
    image: nginx:1.13
    volumes:
      - ./frontend:/usr/share/nginx/html/
    ports:
      - 80:80


## No terminal:
docker-compose up

## No navegador:
http://localhost/
e 
http://localhost:3000/clients

Ctrl+C para sair no terminal






Enviar email com workers

Frontend--> app(python) | -> BD(Postgres)
			| ----> queue(Redis) <----- | Worker_1(Python)
					  	  <-| Worker_2(Python)
						  <-| Worker_3(Python)
					  	  <-| ...

Roteiro:


1-Iniciar composição com BD
2-Usar volumes e scrips de BD
3-Iniciar frontend
4-app para enfileirar mensagens
5-Configurando proxy reverso
6-Redes, dependêcia e BD
7-Fila e workers
8-Escalar é preciso
9-12 factors
10-Sobrescrevendo localmente

-----


Criar um diretótio principal e suas sub-pastas e arquivos:
_______
email-worker-compose
	scripts (check.sql, init.sql)
	web (index.html)
	app (app.sh, sender.py)
	nginx (default.conf) ---> Aqui vai deixar mais seguro fazendo o proxy reverso, é um desvio intermediário para o BD
	worker (app.sh, Dockerfile, worker.py)
   docker-compose.yml
   docker-compose.override.yml
_______


No diretório principal email-worker-compose, criar:

docker-compose.yml o seguinte conteúdo:

version: '3'
volumes:
  dados:
networks:
  banco:
  web:
  fila:
services:
  db:
    image: postgres:9.6
    volumes:
      # Volume dos dados
      - dados:/var/lib/postgresql/data
      # Scripts
      - ./scripts:/scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes:
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    environment:
      - DB_NAME=abc_sender
  queue:
    image: redis:3.2
    networks:
      - fila
  worker:
    build: worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks:
      - fila
    depends_on:
      - queue

-------------------------
No windows abra o Docker.
No terminal:
Acessar o diretório principal, pode ser pelo terminal do editor também:

cd Desktop\curso-docker-leandro\email-worker-compose

Para criar ou executar:
docker-compose up -d

Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Executar BD:
docker-compose exec db psql -U postgres -c '\l'
-U (Usuário)
-c (comando)
'\l' (Listar os BDs na instância ativa)

Parar docker-compose:
docker-compose down



###########
docker-compose.override.yml o seguinte conteúdo:

version: '3'
services:
  app:
    environment:
      - DB_NAME=email_sender





######################################################


Na pasta scripts (check.sql, init.sql) o seguinte conteúdo:
check.sql:

\l
\c email_sender
\d emails

###########
init.sql:

create database email_sender;

\c email_sender

create table emails (
    id serial not null,
    data timestamp not null default current_timestamp,
    assunto varchar(100) not null,
    mensagem varchar(250) not null
);

-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

Executar para verificar se tudo está correto:
docker-compose exec db psql -U postgres -f /scripts/check.sql
-f (files)
/scripts/check.sql (é o arquivo a ser executado)

Fechar ativos:
docker-compose down


######################################################



Na pasta web (index.html) o seguinte conteúdo:

<html>
    <head>
        <meta charset='uft-8'>

        <title>E-mail Sender</title>

        <style>
            label { display: block; }
            textarea, input { width: 400px; }
        </style>
    </head>
    <body class="container">
        <h1>E-mail Sender</h1>
        <form action="http://localhost/api" method="POST">
            <div>
                <label for="assunto">Assunto</label>
                <input type="text" name="assunto">
            </div>

            <div>
                <label for="mensagem">Mensagem</label>
                <textarea name="mensagem" cols="50" rows="6"></textarea>
            </div>

            <div>
                <button>Enviar !</button>
            </div>
        </form>
    </body>
</html>

-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

Executar para verificar se tudo está correto:
http://localhost/

######################################################




Na pasta app (app.sh, sender.py) o seguinte conteúdo:
app.sh:

#!/bin/sh

pip install bottle==0.12.13 psycopg2==2.7.3.2 redis==2.10.5
python -u sender.py

###########
sender.py:

import psycopg2
import redis
import json
import os
from bottle import Bottle, request


class Sender(Bottle):
    def __init__(self):
        super().__init__()
        self.route('/', method='POST', callback=self.send)
        
        redis_host = os.getenv('REDIS_HOST', 'queue')
        self.fila = redis.StrictRedis(host=redis_host, port=6379, db=0)

        db_host = os.getenv('DB_HOST', 'db')
        db_user = os.getenv('DB_USER', 'postgres')
        db_name = os.getenv('DB_NAME', 'sender')
        dsn = f'dbname={db_name} user={db_user} host={db_host}'
        self.conn = psycopg2.connect(dsn)
        
    def register_message(self, assunto, mensagem):
        SQL = 'INSERT INTO emails (assunto, mensagem) VALUES (%s, %s)'
        cur = self.conn.cursor()
        cur.execute(SQL, (assunto, mensagem))
        self.conn.commit()
        cur.close()

        msg = {'assunto': assunto, 'mensagem': mensagem}
        self.fila.rpush('sender', json.dumps(msg))

        print('Mensagem registrada !')

    def send(self):
        assunto = request.forms.get('assunto')
        mensagem = request.forms.get('mensagem')

        self.register_message(assunto, mensagem)
        return 'Mensagem enfileirada ! Assunto: {} Mensagem: {}'.format(
            assunto, mensagem
        )

if __name__ == '__main__':
    sender = Sender()
    sender.run(host='0.0.0.0', port=8080, debug=True)

######################################################

Na pasta nginx (default.conf) o seguinte conteúdo:

server {
    listen 80;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location /api {
        proxy_pass http://app:8080/;
        proxy_http_version 1.1;
    }
}


-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

Executar para verificar se tudo está correto:
docker-compose exec db psql -U postgres -d email_sender -c 'select * from emails'

Verificar se está tudo certo:
docker-compose ps

Fechar ativos:
docker-compose down


######################################################



Na pasta worker (app.sh, Dockerfile, worker.py) o seguinte conteúdo:
app.sh:

#!/bin/sh

pip install redis==2.10.5
python -u worker.py


###########----> Escalar a quantidade de workers ############

Dockerfile:

FROM python:3.6
LABEL maintainer 'Aluno Cod3r <aluno: leandrocf79@gmail.com>'

ENV PYTHONUNBUFFERED 1
RUN pip install redis==2.10.5

ENTRYPOINT ["/usr/local/bin/python"]



-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

####  Executar para escalar a quantidade de workers desejados:
docker-compose up -d --scale worker=5

Verificar se está tudo certo:
docker-compose logs -f -t worker
#docker-compose ps

Fechar ativos:
Ctrl+C
docker-compose down



###########
worker.py:

import redis
import json
import os
from time import sleep
from random import randint

if __name__ == '__main__':
    redis_host = os.getenv('REDIS_HOST', 'queue')
    r = redis.Redis(host=redis_host, port=6379, db=0)
    print('Aguardando mensagens ...')
    while True:
        mensagem = json.loads(r.blpop('sender')[1])
        # Simulando envio de e-mail...
        print('Mandando a mensagem:', mensagem['assunto'])
        sleep(randint(15, 45))
        print('Mensagem', mensagem['assunto'], 'enviada')





######################################################

No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d















