Será utilizado uma biblioteca gratuita do site www.chart.js.org

Criar novo projeto chamdo charts.

No terminal:
pip install django django-chartjs django-bootstrap4

pip freeze > requirements.txt

django-admin startproject chartjs .

django-admin startapp core



Em settings.py:


"""
Django settings for charts project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n49c^^^kv=6up7qo5nmxvx^_ge_1cxtgd=lzwb9#khpk0gwhut'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'core',
    'bootstrap4',
    'chartjs',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'charts.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'charts.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')




################################
Criar rotas.

Em core/urls.py:



from django.urls import path

from .views import IndexView, DadosJSONView


urlpatterns = [
    path('', IndexView.as_view(), name='index'),
    path('dados/', DadosJSONView.as_view(), name='dados'),
]





################################
Em charts/urls.py "avisar" que tem arquivos de rotas:


from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('', include('core.urls')),
    path('admin/', admin.site.urls),
]





################################
Em core/template/index.html:


{% load static %}  <!-- Os arquivos virão da biblioteca instalada chartsj -->   
{% load bootstrap4 %}
<!doctype html>
<html lang="pt-br">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    {% bootstrap_css %}

    <title>Chats</title>
  </head>
  <body>
    <div class="container">
        <h1 class="text-primary">Geek Charts</h1>
    </div>

    <div class="container">
        <canvas id="grafico" width="500" height="400"></canvas>  <!-- O gráfico será carregado aqui-->
    </div>

  {% bootstrap_javascript jquery='full' %}
  <script type="text/javascript" src="{% static 'js/Chart.min.js' %}"></script>     <!--  {% load static %}  Os arquivos virão da biblioteca instalada chartsj-->   

  <script type="text/javascript">
      $.get('{% url "dados" %}', function(data){
        var ctx = $("#grafico").get(0).getContext("2d");
        new Chart(ctx, {
            type: 'line', data: data
        });
      });
  </script>
  </body>
</html>






################################
Em core/views.py criar um gráfico randômico para teste:



from random import randint
from django.views.generic import TemplateView
from chartjs.views.lines import BaseLineChartView


class IndexView(TemplateView):
    template_name = 'index.html'


class DadosJSONView(BaseLineChartView):

    def get_labels(self):
        """Retorna 12 labels para a representação do x"""
        labels = [
            "Janeiro",
            "Fevereiro",
            "Março",
            "Abril",
            "Maio",
            "Junho",
            "Julho",
            "Agosto",
            "Setembro",
            "Outubro",
            "Novembro",
            "Dezembro"
        ]

        return labels

    def get_providers(self):
        """Retorna os nomes dos datasets."""
        datasets = [
            "Programação para Leigos",
            "Algoritmos e Lógica de Programação",
            "Programação em C",
            "Programação em Java",
            "Programação em Python",
            "Banco de Dados"
        ]
        return datasets

    def get_data(self):
        """
        Retorna 6 datasets para plotar o gráfico.

        Cada linha representa um dataset.
        Cada coluna representa um label.

        A quantidade de dados precisa ser igual aos datasets/labels

        12 labels, então 12 colunas.
        6 datasets, então 6 linhas.
        """
        dados = []
        for l in range(6):
            for c in range(12):
                dado = [
                    randint(1, 100),  # jan
                    randint(1, 100),  # fev
                    randint(1, 100),  # mar
                    randint(1, 100),  # abr
                    randint(1, 100),  # mai
                    randint(1, 100),  # jun
                    randint(1, 100),  # jul
                    randint(1, 100),  # ago
                    randint(1, 100),  # set
                    randint(1, 100),  # out
                    randint(1, 100),  # nov
                    randint(1, 100)   # dez
                ]
            dados.append(dado)
        return dados






################################
No terminal TESTAR:

python manage.py shell

from import randint
randint(1, 200)
randint(1, 200)
randint(1, 200)


---
Sair e abrir o terminal:

python manage.py migrate

python manage.py runserver

**Cada vez que recarregar a página vai gerar um gráfico novo.
Se clicar nos itens coloridos no cabeçalho vai desativar ou ativar aquela estatística no gráfico e deixar os outros.


Na views.py pode alterar até 100 apenas para testar.

Para sair no terminal:
Ctrl+c






