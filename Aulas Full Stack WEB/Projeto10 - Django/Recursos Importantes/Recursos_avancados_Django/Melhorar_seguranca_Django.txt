O Django, por padrão, já oferece muita segurança, mas é possíbel melhorar.

Crie um projeto chamado seguranca:

No terminal:
pip install django

django-admin startproject seguranca .



Veja agora em settings.py pnde houver setas:


##########

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!    <----------- Segurança padrão para validação, criptografia, hash de senha etc
SECRET_KEY = '5g1-3$sck-5-^o0h)b_#i!et!!yvs(az_bzh_-_fkmh5el@f(d'   

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',     # <----------- SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',     # <----------- csrf    tanbém faz segurança
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # <----------- clickjacking
]

ROOT_URLCONF = 'seguranca.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'seguranca.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [             			  # <-----------  Segurança para validação de senhas.
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Recursos Extras de Segurança do Django
SECURE_HSTS_SECONDS = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = 'DENY'

# SECURE_SSL_REDIRECT = True   # Habilitar somente para publicação. Comentar em fase de desenvolvimento






###########  Recursos de segurança do Django.


- Cross Site Scripting (XSS): 		Inpede a injeção de cód. html ou javascrip em páginas HTML

- Cross Site Request Forgery (CSRF):	Django oferece um token para validação de usuário
{% csrf_token %}			
			
- SQL Injection:			Quando clica para fazer login é feita uma consulta no BD, impede a injeção se SQL que modifique a pesquisa de acesso.		

- Suporta HTTPS e TLS: 			Oferece a segurança  SSL, a sigla se refere a Secure Scokest Layers	

- Armazenamento Seguro de Senhas:	Armazena senha e números de cartãode crédito utilizando criptografia, utiliza o Algoritmo PBKDF2 com hash SHA256 recomendado pelo NIST


##################


Um recurso interessante é trocar o padrão de acesso chamado "admin" por algo diferente.

Veja em urls.py:



from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),  # <------ admin. Pode ser substituido por outras paralavras.
]


Evitar essas palavras abaixo também, servem de modelo para dar sugesões:
-painel
-seguro
-area
...


Quando for tentar logar na página adicionando admin na frente do link não vai funcionar para dar acesso 
à página administrativa, a página simplesmente não existe.



################### Recursos Extras de Segurança do Django.
Adicionar recursos de segurança no final em setting.py:

****Todos os recursos abaixo, 9, já podem ser colocado como padrão em todos os projetos. 
Observe que somente o último, # SECURE_SSL_REDIRECT = True, deve estar comentado em fase de desenvolvimento. 
Liberar somente quando for publicar. Ele vai redirecionar para HTTPS. 
A diferença é que todos os dados entre cliente servidor serão criptografádos.



SECURE_HSTS_SECONDS = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = 'DENY'

# SECURE_SSL_REDIRECT = True  # Habilitar somente para publicação. Comentar em fase de desenvolvimento


Observe depois a url da página com "s" em https://

