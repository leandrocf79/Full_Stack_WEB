
Nesta aula serão apresentadas 3 formas de estender usuários, sendo a última a recomendada.
__________________________________________________________________________________________


Abrir projeto novo, para esta aula será djangoum2:
pip install django

django-admin startproject djangoum2 .       (usar espaço e ponto)

django-admin startproject core


Em settings configurar o padrão abaixo:

#####################################


import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'w)u6750d)i@$2&)$4=t@#6)*a@p3o3ejk=%+))in!3jm&8aj$&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'core',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoum2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoum2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# AUTH_USER_MODEL = 'usuarios.CustomUsuario'

#######################################################

1) Chave estrangeira,  USER. (Modo NÃO recomendado, usuário do Django)

Em core/models.py:


from django.db import models
from django.contrib.auth import User


class Post(models.Model):
    autor = models.ForeignKey(User, verbose_name='Autor', on_delete=models.CASCADE)
    titulo = models.CharField('Título', max_length=100)
    texto = models.TextField('Texto', max_length=400)

    def __str__(self):
        return self.titulo


------------------------------------------------------
2) Segundo modo tem que acrescentar em **settings** , autenticação de usuário:
NA ULTIMA LINHA:
AUTH_USER_MODEL = 'usuarios.CustomUsuario'    (Sbstituindo usuáriodo Django pelo meu, será criado ainda)

---
Em model fazer as substituições de User para settings:

from django.db import models
from django.conf import settings        <-- observar, será chamado de settings


class Post(models.Model):
    autor = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name='Autor', on_delete=models.CASCADE)    <-- observar
    titulo = models.CharField('Título', max_length=100)
    texto = models.TextField('Texto', max_length=400)

    def __str__(self):
        return self.titulo




------------------RECOMENDADO UTILIZAR ESSA FORMA--------------------------
3) Em settings apagar ou comentar #AUTH_USER_MODEL = 'usuarios.CustomUsuario'
não será necessário.

O próprio módulo do Django tem uma função chamda "get_user_model" que pode ser utilizada como get_user_model().


---
Em models.py:

from django.db import models
from django.contrib.auth import get_user_model     #<---


class Post(models.Model):
    autor = models.ForeignKey(get_user_model(), verbose_name='Autor', on_delete=models.CASCADE)      #<---
    titulo = models.CharField('Título', max_length=100)
    texto = models.TextField('Texto', max_length=400)

    def __str__(self):
        return self.titulo



******Lembre-se que toda vez que alterar algo em models.py tem que ir no terminal e:

python manage.py makemigrations
E migrate para gerar as tabelas:
python manage.py migrate


Já aproveitar e criar um SUPERUSER:
python manage.py createsuperuser

Username (leave blank to use 'lcf'):  lcf1979        (pode digitar um nome aqui)
email:
senha: 321654    (não vão aparecer os dígitos, mas estão sendo registrados)



---
Para verificar essa forma RECOMENDADA:

python manage.py shell

from django.contrib.auth import get_user_model
Para visualizar:
get_user_model()

Resposta no terminal será <class 'django.contrib.auth.models.User'> e após criar um usuário customizado
executar esses comandos novamente para visualiar.



--------------
Em core/admin:


from django.contrib import admin

from .models import Post


@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('titulo', '_autor')
    


------------------
python manage.py runserver 

Acessar a página de admin e clicar em post para adicionar alguma postagem e verificar que só existe um usuário.

http://127.0.0.1:8000/admin

Pode clicar no nome de usuário e colocar primeiro nome e demais informções. Salvar

***Clicar em novo usuário e criar mais um usuário, na parte de permissões de usuário escolher:
"
core|post|Can add post
core|post|Can change post
core|post|Can delete post
core|post|Can view post
"

Salvar

Esse usuário novo não é admin, mas pode acessar a parte administrativa, 
as únicas coisas que ele pode fazer é adicionar postagens, modificar, deletar e visualizar.
 
Ctrl+c


---
Na área adminstrativa quer exibir o nome completo:
Em core/admin adicionar:


from django.contrib import admin

from .models import Post

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('titulo', '_autor')
    exclude = ['autor',]  # <---- Vai excluir o outor

    def _autor(self, instance):
        return f'{instance.autor.get_full_name()}'     #<--- autor.get_full_name()

    def get_queryset(self, request):
        qs = super(PostAdmin, self).get_queryset(request)   #<--- Só vai exibir quem estiver logado
        return qs.filter(autor=request.user)

    def save_model(self, request, obj, form, change):
        obj.autor = request.user	# <---- Sobresceve o save_model:  obj(postagem), obj.autor(obj do autor), request.user(Exibir dados do usuário logado)
        super().save_model(request, obj, form, change)

#Assim não exibe mais a caixa com vários usuários. Cada um só tem o seu.


--------Bonus:
Para alterar o nome de apresentação do Django na caixa de acesso administrativo
de: "Administração do Django"
para: "Empresa Ltda"


Em djangoum2/urls.py alterar o header:



from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]


admin.site.site_header = 'Empresa Ltda'              # Aqui
admin.site.site_title = 'Evolua suas habilidades!'
admin.site.index_title = 'Sistema de Gerenciamento de Posts'



