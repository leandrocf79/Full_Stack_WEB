Paginação com Django.

Criar novo projeto chamado dpag.

Para este projeto o recomendado é não usar o Django 3 para cima, o ideal é a versão 2.2.8 
que é LTS (Long Turn Suport), então mãos a obra!


** Criar novo projeto chamado dpag.

No terminal:
python --version

pip install django==2.2.8 django-bootstrap4
 
pip freeze > requirements.txt

django-admin startproject dpag .

django-admin startapp core


------
Em settings.py:



import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'c*wb^6wqbc&brjkb@cdnp!dl2p(^sa-n$g06wf9z-y7$0ullo2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django_adminlte',
    'django_adminlte_theme',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'bootstrap4',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dpag.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dpag.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'



########################### TemplateView não aceita paginação

------
Em models.py:



from django.db import models


class Produto(models.Model):
    nome = models.CharField(max_length=100)
    preco = models.DecimalField(max_digits=8, decimal_places=2)
    descricao = models.TextField()

    def __str__(self):
        return self.nome



------
Em admin.py:



from django.contrib import admin

from .models import Produto


@admin.register(Produto)
class ProdutoAdmin(admin.ModelAdmin):
    list_display = ('nome', 'preco')




--------------------------------
No terminal:
python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py runserver

Entrar na área administrativa e cadastrar uns 10 produtos para testar.
http://localhost:8000/admin


No terminal Ctrl+c para sair.




------
Em views.py:



from django.views.generic import ListView

from .models import Produto


class IndexListView(ListView):
    template_name = 'index.html'
    model = Produto
    paginate_by = 5    # Quantidade de elementos por página
    ordering = 'id'    # se quiser em ordem alfabética pode alterar para '-nome' ou 'nome', se quiser ordenar por preço basta substituir por 'preco'




-------------------
Em core/templates/index.html:  página exemplo


{% load bootstrap4 %}
<!DOCTYPE html>
<html lang="pt-br">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        {% bootstrap_css %}
        <title>Paginação Django</title>
    </head>
    <body>
        <div class="container">
            <h1>Produtos</h1>
        </div>

        <div class="container">

            <table class="table">

                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Nome</th>
                        <th scope="col">Preço</th>
                    </tr>
                </thead>

                <tbody>
                    {% for p in page_obj %}
                        <tr>
                            <th scope="row">{{ p.id }}</th>
                            <th scope="row">{{ p.nome }}</th>
                            <th scope="row">{{ p.preco }}</th>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>

           {% include 'paginacao.html' %}     <!-- Aqui foi o corte para criar paginacao.html -->

        </div>
    {% bootstrap_javascript jquery='full' %}
    </body>
</html>






-------------------
Em core/templates/paginacao.html:



 {% if is_paginated %}

                <nav aria-label="navegacao-paginacao">

                    <ul class="pagination">

                        {% if page_obj.has_previous %}
                            <li class="page-item"><a class="page-link" href="?page={{ page_obj.previous_page_number }}">&laquo;</a></li>
                        {% else %}
                            <li class="page-item disabled"><a class="page-link" href="#">&laquo;</a></li>       <!-- disabled - Se tiver em 1, não tem página anterior, desativa -->
                        {% endif %}

                        {% for num in paginator.page_range %}

                            {% if page_obj.number == num %}
                                <li class="page-item active"><a class="page-link" href="#">{{ num }}</a></li>
                            {% else %}
                                <li class="page-item"><a class="page-link" href="?page={{ num }}">{{ num }}</a></li>
                            {% endif %}

                        {% endfor %}

                        {% if page_obj.has_next %}

                            <li class="page-item"><a class="page-link" href="?page={{ page_obj.next_page_number }}">&raquo;</a></li>
                        {% else %}
                            <li class="page-item disabled"><a class="page-link" href="#">&raquo;</a></li>
                        {% endif %}

                    </ul>

                </nav>

            {% endif %}





----------------------------
Em CORE/urls.py:



from django.urls import path

from .views import IndexListView


urlpatterns = [
    path('', IndexListView.as_view(), name='index'),
]



----------------------------
Em dpag/urls.py:



from django.contrib import admin
from django.urls import path, include

urlpatterns = [
	path('', include('core.urls')),
    	path('admin/', admin.site.urls),
    
]




-----
No terminal:

python mmanage.py runserver

Entrar na área administrativa e cadastrar uns 10 produtos para testar.
http://localhost:8000/admin


No terminal Ctrl+c para sair.