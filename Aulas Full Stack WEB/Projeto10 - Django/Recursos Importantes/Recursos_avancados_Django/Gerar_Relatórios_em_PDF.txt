Gerar relatórios em PDF.

Aqui serão apresentadas duas estratégias para gerar PDF.


https://www.reportlab.com/dev/docs/



---
Criar um projeto nome relatorio.

No terminal:
pip install django

django-admin startproject relatorio .
django-admin startapp core



Em setings.py:



"""
Django settings for relatorio project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'yqd!e4+$qmw&m@##6g_iyh8frtt(hkx2gf@ua)d2$(23ji_x)3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'core',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'relatorio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'relatorio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')





###################################################
Uma estratégia para gerar PDF é usar o reportlab, veja na documentação do Django.
https://docs.djangoproject.com/en/4.1/howto/outputting-pdf/
https://www.reportlab.com/dev/docs/

Outra forma pe usar o weasyprint
https://weasyprint.org/

-----------------------


Para testar o reportlab, no terminal:
pip install reportlab

python manage.py shell
import reportlab

Veja que não apresentou erros, ele é reconhecido pelo Django.


-----------------------
Para testar o reportlab, no terminal:
pip install weasyprint

* Se der erro no Windows instale uma máquina virtual com linux e inicie o projeto novamente.

python manage.py shell
import weasyprint




-----------------------

---CRIAR ROTAS

Em CORE/urls.py:



from django.urls import path

from .views import IndexView, Index2View


urlpatterns = [
    path('', IndexView.as_view(), name='index'), 	# reportlab
    path('2/', Index2View.as_view(), name='index2'),	# weasyprint 
]





---
Em RELATORIO/URLS.PY:


from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('', include('core.urls')),
    path('admin/', admin.site.urls),
]




---
Em core/views.py:


# ##### reportlab

import io  	# entrada e saída
from django.http import FileResponse
from django.views.generic import View

from reportlab.pdfgen import canvas  	# reportlab já está sendo utilizada. Primeira opção de gerar PDF.



# ##### weasyprint 

from django.core.files.storage import FileSystemStorage
from django.template.loader import render_to_string
from django.http import HttpResponse

from weasyprint import HTML     	# weasyprint sendo utilizada. Segunda opção de gerar PDF.



# Primeira opção de gerar PDF.

class IndexView(View):

    def get(self, request, *args, **kwargs):

        # Cria um arquivo para receber os dados e gerar o PDF
        buffer = io.BytesIO()

        # Criar o arquivo pdf
        pdf = canvas.Canvas(buffer)

        # Insere 'coisas' no PDF
        pdf.drawString(50, 50, "leandrocf79")

        # Quando acabamos de inserir coisas no PDF
        pdf.showPage()
        pdf.save()

        # Por fim, retornamos o buffer para o início do arquivo
        buffer.seek(0)


        # Faz o download do arquivo em PDF gerado
        # return FileResponse(buffer, as_attachment=True, filename='relatorio1.pdf')  


        # Abre o PDF direto no navegador, recomendado
        return FileResponse(buffer, filename='relatorio1.pdf')   # Sem o (as_attachment=True)



# Segunda opção de gerar PDF:

class Index2View(View):

    def get(self, request, *args, **kwargs):
        texto = ['leandrocf79', 'Evolua sua mente!', 'Programação Web com Python e Django']   # lista

        html_string = render_to_string('relatorio.html', {'texto': texto})

        html = HTML(string=html_string)
        html.write_pdf(target='/tmp/relatorio2.pdf')  # Vai escrever o PDF. tmp é o diretório temporário para fazer a escrita.

        fs = FileSystemStorage('/tmp')

        with fs.open('relatorio2.pdf') as pdf:
            response = HttpResponse(pdf, content_type='application/pdf')
            # Faz o download do arquivo PDF
            # response['Content-Disposition'] = 'attachment; filename="relatorio2.pdf"'

            # Abre o PDF direto no navegador
            response['Content-Disposition'] = 'inline; filename="relatorio2.pdf"'  # Sem o (as_attachment=True), SUBSTITUIDO POR inline;
        return response





########################
 No terminal vai rodar o IndexView: 

python manage.py migrate

python manage.py runserver



########################
Em templates criar relatorio.html para poder usar o Index2View que terá um fundo AZUL para diferenciar do outro:



<html>
<head>
    <title>Geek Report</title>
    <style>
        body {
            background: #0080ff;   <!-- Fundo AZUL -->
        }
    </style>
</head>
<body>
    <h1>Report PDF</h1>
    {% for p in texto %}
        <p>{{ p }}</p> <!-- esse "p" pode ser usado de várias formas, exemplo, p.nome -->
    {% endfor %}
</body>
</html>


########################


 No terminal testar a aplicação: 

python manage.py runserver


http://127.0.0.1:8000/		# reportlab

http://127.0.0.1:8000/2/	# weasyprint (Com fundo azul para diferenciar)

