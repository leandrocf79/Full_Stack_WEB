CRUD
Listagem, insert, updade e delete de dados.

Class Based Views


Aqui será criada uma administração separada da administração do Django.

Pode não fazer muito sentido nisso, mas pode haver caso que seja interessante, 
o recomendado para esta função é não usar o Django 3 para cima, o ideal é a versão 2.2.8 
que é LTS (Long Turn Suport), então mãos a obra!



** Criar novo projeto chamado crudcbv.

No terminal:
python --version

pip install django==2.2.8 django-bootstrap4
 
pip freeze > requirements.txt

django-admin startproject crudcbv .

django-admin startapp core



###########
Em core/models.py:


from django.db import models


class Produto(models.Model):
    nome = models.CharField(max_length=100)
    preco = models.DecimalField(max_digits=8, decimal_places=2)

    def __str__(self):
        return self.nome



-----
Em core/admin.py:



from django.contrib import admin

from .models import Produto


@admin.register(Produto)
class ProdutoAdmin(admin.ModelAdmin):
    list_display = ('nome', 'preco')



-----
Em settings.py:



"""
Django settings for crudcbv project.

Generated by 'django-admin startproject' using Django 2.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd^%vqr-#f)09z4-oo&jyy&t_rp!7!3p2$d124e29h*83j-(roy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'core',
    'bootstrap4',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
	'django.contrib.humanize',   # Ajuda na configuração de pontuação de valores financeiros.
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crudcbv.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crudcbv.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'




#############################
No terminal:
python mmanage.py makemigrations
python mmanage.py migrate

python mmanage.py createsuperuser

python mmanage.py runserver

Entrar na área administrativa e cadastrar alguns produtos para testar.
http://localhost:8000/admin


No terminal Ctrl+c para sair.



-----
Para criar um administrador paralelo deve criar um formulário.

Em core/forms.py:      #####  FORMS PODE SER DELETADO, NEM FOI USADO. Está aqui para aprendizado.



from django import forms
from .models import Produto

class ProdutoModelForm(forms.ModelForm):
	
	class Meta:
		model =Produto
		fields = '__all__'

# Apenas para informar nome e preço.




-----
Em core/views.py:



from django.views.generic import ListView    					# Para listar
from django.views.generic.edit import CreateView, UpdateView, DeleteView   	# CRUD - criar, update e delete no BD.
from django.urls import reverse_lazy


from .models import Produto

# from .forms import ProdutoModelForm  #####  FORMS PODE SER DELETADO, NEM FOI USADO. Está aqui para aprendizado.

class IndexView(ListView):
    models = Produto
    template_name = 'index.html'
    queryset = Produto.objects.all()	# Aqui poderia fazer um filtro, buscar por usuário ou outra informação.
    context_object_name = 'produtos' 	# _object_name  será usado para recuperar os dados no template pelo nome 'produtos'


class CreateProdutoView(CreateView):
    model = Produto
    template_name = 'produto_form.html'
    fields = ['nome', 'preco']
    success_url = reverse_lazy('index')


class UpdateProdutoView(UpdateView):
    model = Produto
    template_name = 'produto_form.html'
    fields = ['nome', 'preco']
    success_url = reverse_lazy('index')


class DeleteProdutoView(DeleteView):
    model = Produto
    template_name = 'produto_del.html'
    success_url = reverse_lazy('index')


----------------
Configurar rotas.

Em CORE/urls.py:


from django.urls import path

from .views import IndexView, CreateProdutoView, UpdateProdutoView, DeleteProdutoView


urlpatterns = [
    path('', IndexView.as_view(), name='index'),
    path('add/', CreateProdutoView.as_view(), name='add_produto'),		# Criar.
    path('<int:pk>/update/', UpdateProdutoView.as_view(), name='upd_produto'),	# Updade. Em produtos_form ver que o nome "pk" foi passado lá.
    path('<int:pk>/delete/', DeleteProdutoView.as_view(), name='del_produto'),  # Delete. 
]



-----
Configurar rotas.

Em crudcbv/urls.py:



from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
]





-----------------------
Criar os arquivos html.

Em core/templates/base.html:




{% load bootstrap4 %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    {% bootstrap_css %}
    <title>CRUD CBV</title>
</head>
<body>
    <div class="container">
        {% block content %}{% endblock %}
    </div>
{% bootstrap_javascript jquery='full'%}
</body>
</html>




-----------------------
Em core/templates/index.html:



{% extends 'base.html' %}
{% load humanize %}
{% block content %}
    <div class="row">
        <h1>Produtos</h1>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Nome</th>
                    <th scope="col">Preço</th>
                    <th scope="col">Ação</th>
                </tr>
            </thead>
            <tbody>
                {% for produto in produtos %}
                    <tr>
                        <td>{{ produto.id }}</td>
                        <td>{{ produto.nome }}</td>
                        <td>R$ {{ produto.preco|intcomma }}</td>
                        <td>
                            <a class="btn btn-warning" href="{% url 'upd_produto' produto.pk %}">Editar</a>
                            <a class="btn btn-danger" href="{% url 'del_produto' produto.pk %}">Deletar</a>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
{% endblock %}




-----------------------
Em core/templates/produto_del.html:   


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block content  %}
    <form method="post">
        {% csrf_token %}
        <p>Tem certeza que deseja deletar o produto "{{ object }}"?</p>
        {% buttons %}
            <button type="submit" class="btn btn-danger">Confirmar</button>
            <button type="button" class="btn btn-warning">
                <a href="{% url 'index' %}">Cancelar</a>
            </button>
        {% endbuttons %}
    </form>
{% endblock %}



-----------------------
Em core/templates/produto_form.html:


{% extends 'base.html' %}
{% load bootstrap4 %}
{% block content %}
    <h1>Produtos</h1>
    <form method="post">
        {% csrf_token %}      <!-- Segurança, criptografia-->
        {% bootstrap_form form %}
            {% buttons %}
                <button type="submit" class="btn btn-primary">Salvar</button>
                <button type="button" class="btn btn-warning">
                    <a href="{% url 'index' %}">Cancelar</a>
                </button>
            {% endbuttons %}
    </form>
{% endblock %}




############################

Verificar se está tudo certo até aqui.
No terminal:
python mmanage.py runserver

http://localhost:8000

Verificar se aparecem os produtos cadastrados anteriormente.
No terminal Ctrl+c para sair.


