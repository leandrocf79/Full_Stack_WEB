Criar projeto chamado dsocial para fazer login utilizando a conta do Facebook. 

No terminal:
pip install django social-auth-app-django django-bootstrap4

pip freeze > requirements.txt

django-admin startproject dsocial . 

django-admin startapp core



######################################
Em settings.py fazer as configurações:




import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4uf!z8c=-5+(k_3(&bd&^ff9cg-!u7q&h@+p_nu$alue!l+m4&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'bootstrap4',   		#<---------
    'social_django',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dsocial.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.backends',   		#<--------- context_processors  
                'social_django.context_processors.login_redirect',	#<--------- Vão adicionar dados no contexto do template
            ],
        },
    },
]

WSGI_APPLICATION = 'dsocial.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


# Aqui abaixo estão os recursos para dizer que será feita autenticação de outra maneira.      <-----------
AUTHENTICATION_BACKENDS = [
    'social_core.backends.facebook.FacebookOAuth2',  # Pode acrescentar outras ainda como, por exemplo, Linkdin, Google, Instagram...
   
 #  apenas se você quiser manter a autenticação padrão do Django. Melhor deixar.
    'django.contrib.auth.backends.ModelBackend',
]

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'index'
LOGOUT_URL = 'logout'
LOGOUT_REDIRECT_URL = 'login'


# Para qualquer rede social, o usuário já foi salvo no sistema, não precisa criar novo:
SOCIAL_AUTH_RAISE_EXCEPTIONS = False


# Configurações para Facebook
SOCIAL_AUTH_FACEBOOK_KEY = '806001206498324'   		# Aqui colocar a chave que está la no site Facebook, a ID no topo.
SOCIAL_AUTH_FACEBOOK_SECRET = '54bc4d703e380203aea114932bf907cf'    # Chave Secreta ao lado do ID no site Facebook, colocar senha de acesso de usuário e copiar.
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'user_link']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email, picture.type(large), link'     # Para saber outros campos disponíveis de cada site precisa entrar na documentação.
}					
						# Lembrando que para outras redes sociais deve verificar documentação, pode ter conteúdo diferente.
SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [
    ('name', 'name'),
    ('email', 'email'),
    ('picture', 'picture'),
    ('link', 'profile_url'),
]




####################################
Veja neste link as opçoes em ""Social backends"" para criar login.

https://python-social-auth.readthedocs.io/en/latest/backends/index.html#adding-new-backend-support



-----
Exemplo para adicionar  Instagram, no site acima tem um modelo, é só copiar e inserir no código.


AUTHENTICATION_SETTINGS = (
  'social_core.backends.instagram.InstagramOAuth2',
)


# Essas abaixo são as 2 variáveis que devem ser configuradas.
SOCIAL_AUTH_INSTAGRAM_KEY = ''
SOCIAL_AUTH_INSTAGRAM_SECRET = ''



extra scopes can be defined by using:

SOCIAL_AUTH_INSTAGRAM_AUTH_EXTRA_ARGUMENTS = {'scope': 'likes comments relationships'}






####################################
python manage.py migrate





-----
Criar core/templates/base.html:



{% load bootstrap4 %}
{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    {% bootstrap_css %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}" />
    <title>Django Social</title>
</head>
<body>
    <div class="container-fluid">
        <div>
            <h1 class="text-white text-center">{% block title %}{% endblock %}</h1>
            <div class="card p-5">
                {% block content %}{% endblock %}
            </div>
        </div>
    </div>
{% bootstrap_javascript jquery='full' %}
</body>
</html>





-----
Criar core/templates/index.html:


{% extends 'base.html' %}
{% block title %}Início{% endblock %}
{% block content %}
<div class="row">
    <div class="col-sm-12 mb-3">
        <h4 class="text-center">Bem-vindo(a) {{ user.username }} </h4>
    </div>

    {% for a in backends.associated %}      <!-- em settings.py em TEMPLATES foram adicionada 2 linhas de context_processor -->
        {% if a.provider == 'facebook' %}
            <div class="col-md-4 text-center">
                <img src="{{ a.extra_data.picture.data.url }}" alt="" width="130" height="130" style="border-radius: 50%;">
            </div>
           
	    <div class="col-md-8 social-container my-2">
                <p>Logado via: {{ a.provider|title }}</p>
                <p>Nome: {{ a.extra_data.name }}</p>
                <p>Profile: <a href="{{ a.extra_data.profile_url }}">Link</a></p>
            </div>
        {% endif %}
    {% endfor %}
    <div class="col-sm-12 mt-2 text-center">
        <button class="btn btn-warning">
            <a href="{% url 'logout' %}">Logout</a>
        </button>
    </div>
</div>
{% endblock %}






-----
Criar core/templates/login.html:



{% extends 'base.html' %}
{% block title %}Logins{% endblock %}
{% block content %}
<div class="row">
    <div class="col-md-8 mx-auto social-container my-2 order-md-1">
        <button class="btn btn-primary mb-2">
            <a href="{% url 'social:begin' 'facebook' %}">Login com Facebook</a>   <!-- Informar o endereço "social:begin" -->
        </button>
        <button class="btn btn-warning mb-2">
            <a href="#">Login com Instagram</a>
  
<!-- 	Caso fosse fazer para instagram ficaria assim:
		<a href="{% url 'social:begin' 'instagram' %}">Login com Instagram</a>       -->

        </button>
    </div>
</div>
{% endblock %}





-----
Criar em core/static/css/style.css:



img {
    border: 3px solid #282c34;
}

.container-fluid {
    height: 100vh;
    background-color: #282c34;
    display: flex;
    justify-content: center;
    align-items: center;
}

.container-fluid > div {
    width: 85%;
    min-width: 300px;
    max-width: 500px;
}

.card {
    width: 100%;
}

.social-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.btn a, .btn a:hover {
    color: white;
    text-decoration: none;
}





-----
Em core/views.py fazer uso das "Class Based Views":
Aqui  o usuário só acessa index se fizer login.



from django.views.generic import TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin


class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'


class LoginView(TemplateView):
    template_name = 'login.html'




----------
Em dsocial/urls.py:
Aqui quer dizer que qualquer acesso à raiz será encaminhado para o core.

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
]





----------
Em core/urls.py:


from django.urls import path, include
from django.contrib.auth import views as auth_views

from core.views import IndexView, LoginView


urlpatterns = [
    path('login/', LoginView.as_view(), name='login'),     			# Quando alguem for fazer login será encaminhado para LoginView.as_view
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),		# Quando alguem for fazer logout será encaminhado para  auth_views.LogoutView.as_view
    path('social-auth/', include('social_django.urls', namespace='social')),	# namespace para reconhecer o social-auth, autenticação pelas redes sociais.
    path('', IndexView.as_view(), name='index'),				# Qualquer coisa '' da raiz IndexView.as_view para index.html
 ]




-----
Em settings.py acrescentar no final as rotas:



# Aqui abaixo estão os recursos para dizer que será feita autenticação de outra maneira.      <-----------
AUTHENTICATION_BACKENDS = [
    'social_core.backends.facebook.FacebookOAuth2',  # Pode acrescentar outras ainda como, por exemplo, Linkdin, Google, Instagram...
   
 #  apenas se você quiser manter a autenticação padrão do Django. Melhor deixar.
    'django.contrib.auth.backends.ModelBackend',
]

LOGIN_URL = 'login'		# Rota de login
LOGIN_REDIRECT_URL = 'index'	# Após fazer login vai para index
LOGOUT_URL = 'logout'		
LOGOUT_REDIRECT_URL = 'login' 	# Após fazer logout vai para index





#############################
Ainda na parte desenvolvedor para configurar o login com Facebook:

Utilizar uma conta de usuário no Facebook e acessar a página

https://developers.facebook.com/apps

Clicar no botão criar um aplicativo.

Nome de exibição: ""Nome do projeto

Emailde contato: ""colocar o email da conta do Facebook

Cçicar em criar aplicação.


Observe agora o ID do aplicativo no topo da página e agora informar o tipo de aplicativo em

Configurações/Básico/

em Domínios do aplicativo: localhost
caso ja tenha publicado o site acrescente o link principal completo nesta mesma caixa.

---
Agora no final desta página, na última linha clique em  +Adicionar plataforma

Vai abrir uma caixa, clique em "Site"

em Site/ "URL do site"  acescente os links completos informados anteriormente:
http://localhost:8000/
https:// ...

Clicar em "Salvar alterações"S


********** Deixe a página aberta para concluir a configuração em settings.py para não criar um 
registro novo de usuário toda vez que foir acessar a página:

Acrescente:


# Para qualquer rede social, o usuário já foi salvo no sistema, não precisa criar novo:
SOCIAL_AUTH_RAISE_EXCEPTIONS = False


# Configurações para Facebook
SOCIAL_AUTH_FACEBOOK_KEY = '806001206498324'   		# Aqui colocar a chave que está la no site Facebook, a ID no topo.
SOCIAL_AUTH_FACEBOOK_SECRET = '54bc4d703e380203aea114932bf907cf'    # Chave Secreta ao lado do ID no site Facebook, colocar senha de acesso de usuário e copiar.
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'user_link']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email, picture.type(large), link'     # Para saber outros campos disponíveis de cada site precisa entrar na documentação.
}					
						# Lembrando que para outras redes sociais deve verificar documentação, pode ter conteúdo diferente.
SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [
    ('name', 'name'),
    ('email', 'email'),
    ('picture', 'picture'),
    ('link', 'profile_url'),
]




##################
python manage.py runserver

Agora logar com a conta facebook.
http://localhost:8000/login/

Caso não der certo o link acima tente: http://localhost:8000/login/?next=/

Ctrl+c

--------
Criar um superuser para 

python manage.py createsuperuser

Entrar em admin, em usuários vai ver quem já logou com a conta social.
python manage.py runserver
http://localhost:8000/admin


