Aqui será mostrado como substituir um projeto antigo por outro melhorado.

Criar um projeto chamado dlegado, d de django.

No terminal:
pip install django==2.2.9      (versão LTS)


Se tiver usando qualquer versão do Debian ou Ubuntu:
sudo apt-get install python3-dev default-libmysqlclient-dev -y


BD Legado:
pip install mysqlclient


No terminal:
 
pip freeze > requirements.txt

django-admin startproject dlegado .    (Usar ponto)

django-admin startapp core

django-admin createsuperuser


----------
Em seting.py:


import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8gm4&mzpl4(%-11atx61zcqxavk$1u#77(_zymo48+pq271esb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'core',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dlegado.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dlegado.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'fabrica_picoles',             # aqui está o nome do BD
        'USER': 'geek',
        'PASSWORD': 'university',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')




######################################################

O Django gera um models.py com todas as informaçoes do BD.

Para isso esteja com o MySQL instaldo e os arquivos anexo já configurados nele.
Crie um usuário e senha e coloque em settings.py em   DATABASES = {


No terminal:
python manage.py inspectdb


Se der algum erro verifique:
1- Se está logado no MySQL
2- O nome dado ao BD se confere com o que está em settings.py em DATABASES = {
3- Nome e senha      se confere com o que está em settings.py em DATABASES = {

---
Agora para colocar toda a informação em models.py, abra ele e veja que está vazio.
No terminal:

python manage.py inspectdb > core/models.py


Vá em models.py, abra ele e veja que está com todas as entidades prontas. Mágica! rsrs


Um exemplo:



# Este é um módulo de modelo Django gerado automaticamente.
# Você terá que fazer o seguinte manualmente para limpar isso:
# 	* Reorganizar a ordem dos modelos
# 	* Certifique-se de que cada modelo tenha um campo com primary_key=True
# 	* Certifique-se de que cada ForeignKey tenha `on_delete` configurado para o comportamento desejado. (models.DO_NOTHING)
# 	* Remova as linhas `managed = False` se você deseja permitir que o Django crie, modifique e exclua a tabela      <-----------
# Sinta-se à vontade para renomear os modelos, mas não renomeie valores db_table ou nomes de campos.


class AditivosNutritivosPicole(models.Model):
    id_aditivo_nutritivo = models.ForeignKey(AditivosNutritivos, models.DO_NOTHING, db_column='id_aditivo_nutritivo')   # models.DO_NOTHING  é o on_delete
    id_picole = models.ForeignKey('Picoles', models.DO_NOTHING, db_column='id_picole')

    class Meta:
        managed = False         # Esta False porque já existe no BD, se for recriar pode apagar todos ou por True      <-----------
        db_table = 'aditivos_nutritivos_picole'




## Exemplo de uma modificação que pode ser feita foram sinaladas com setas:



class TiposEmbalagem(models.Model):
    nome = models.CharField(max_length=45)

    def __str__(self):    	# <-----------
        return self.nome	

    class Meta:			# <----------- Serve para corrigir problemas de idiomas inglês/português e plural.
        managed = False
        db_table = 'tipos_embalagem'
        verbose_name = ' Tipos Embalagem'
        verbose_name_plural = ' Tipos Embalagens'




######################################################
No terminal:
python mmanage.py makemigrations
python mmanage.py migrate

python mmanage.py createsuperuser     (Criou uma nova estrutura no BD legado, caso queira trocar de BD ou usar um paralelo, um clone, vá em settings e altere o nome do BD   'NAME': 'fabrica_picoles', )

python mmanage.py runserver

http://localhost:8000/admin

Observe que não terá nada na área administrativa, precisa declarar core/admin.py.
No terminal Ctrl+c para sair.


---
Em core/admin.py:

*  * Em um projeto real tem que importar todos. *  *



from django.contrib import admin

from .models import TiposEmbalagem, TiposPicole


@admin.register(TiposEmbalagem)
class TiposEmbalagemAdmin(admin.ModelAdmin):
    list_display = ('nome',)


@admin.register(TiposPicole)
class TiposPicoleAdmin(admin.ModelAdmin):
    list_display = ('nome',)


--Ctrl+S

--------------------
No terminal:

python mmanage.py runserver

Entrar na área administrativa e cadastrar alguns produtos para testar.

http://localhost:8000/admin

No terminal Ctrl+c para sair.

