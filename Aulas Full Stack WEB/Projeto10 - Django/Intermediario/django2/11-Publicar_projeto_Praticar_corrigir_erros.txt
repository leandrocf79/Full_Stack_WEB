Ainda será utilizado o heroku que não da suporte gratuito ao MySQL, portanto será trocado pelo PostgreSQL.

Em django2/settings:

DEBUG = False

---
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    #'whitenoise.middleware.WhiteNoiseMiddleware',   # <----- Tirar # vai permitir utilização para publicar site. Caso não esteja utilizando whitenoise pode até apagar!
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

---
A parte do MySQL deverá ser comentada para introduzir a parte do PostregreSQL:


"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django2',
        'USER': 'geek',
        'PASSWORD': 'university',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

"""

DATABASES = {
    'default': dj_database_url.config()
}




---
No terminal:
pip install dj_database_url psycopg2-binary    <-- Esse biblioteca passa as configurações deault para o Heroku sobre BD e psycopg2-binary  é o driver de conexão para o BD.

pip freeze > requiriments.txt   <-- Vai armazenar todas as bibliotecas.


---
Ainda em django2/settings:
import dj_database_url 
 
e acrescentar:

DATABASES = {
    'default': dj_database_url.config() # <-- assim vai pegar a configuração padrão do heroku
}
	

---
Agora criar o .gitignore no diretório raiz django2:
new file .gitignore

Adicionar:
__pycache__

*.*~

*.pyc

.idea

No terminal verificar com:
git status

git add .
git status

git commit -m "Projeto finalizado"

Agora logar no Heroku pelo terminal:
heroku login

Pressione qualquer tecla para ir ao browser fazer login, se não der certo a primeira vez, Ctrl+c, tentar novamente.

Verificar a versão do python para colocar no arquivo a ser criado no diretório raiz chamado runtime.txt :
python -V

Cole a versão apresentada: python-3.7.3   em runtime.txt.


Criar outro arquivo chamado Procfile com "P" maiúsculo e escreva o comando para o projeto rodar em gunicorn:
Atenção para o nome do projeto!!! Neste caso é django2.

web: gunicorn django2.wsgi --log-file -


---
Agora adicionar ao git algo que falta:
No terminal verificar com:
git status

git add .

git commit -m "Heroku files"


---
Criar uma aplicação no heroku, mas atenção ao nome do projeto.
No terminal:
heroku create django2-lcf --buildpack heroku/python

---
Precisa gerar o BD no heroku, vai criar todas as tabelas:
heroku rum python manage.py migrate

Agora criar superuser e colocar usuário, email e senha cadastrada no heroku:
heroku rum python manage.py createsuperuser

Antes de publicar póde fazer uma configuração no index.html (opcional):

<body>
    <div class="container">
        {% if produtos %}  <!-- Para verificar se há produto cadastrado antes de publicar -->

	...
	...

      </tbody>
        </table>
        {% else %}
            <h2>Ainda não existem produtos cadastrados. :( </h2>
        {% endif %}


---
git status

git add .

git commit -m "Atualização em index.html para verificar produdos cadastrados"

   *** Observação: Não foi o caso aqui, mas se tiver feito alguma alteração em BD deve usar antes novamente o comando para recriar as tabelas:
	heroku rum python manage.py migrate
	
 ** Se pedir, se for o caso usar novamnte:
heroku rum python manage.py createsuperuser 

---
Agora é só publicar:

git push heroku master

Vai instalar tudo. Aguardar

Verifique a pagina web.
https://django2-lcf.herokuapp.com

e depois acesse o admin para cadastrar produtos

https://django2-lcf.herokuapp.com/admin/core/produto/add/

O whitenoise não vai apresentar os arquivos de midia, só os estáticos, o ideal é usar o NGINX.

Para corrigir isso pode usar os comando no terminal:       --> dj-static vai substituir whitenoise <--
pip install dj-static     
pip install -r requirements.txt

Pode remover o whitenoise:
pip unistall whitenoise
y

---
pip freeze > requiriments.txt   <-- Vai armazenar todas as bibliotecas.

Pode ir em Settings.py e remover whitenoise.

---
Abrir sub diretório django2/wsgi.py

from dj_static import Cling, MediaCling

Cling vai apresentar os arquivos estáticos como css, imagens, js...
MediaCling vai apresentar os arquivos de upload do usuário.

Adicionar:
application = Cling(MediaCling(get_wsgi_application()))

---
git add .
git status

git commit -m "Ajustando arquivos de mídia"

Agora publicar novamente:
git push heroku master


---
Caso queira resetar o BD para evitar erros:
heroku pg:reset DATABASE_URL
django-lcf

Toda vez que tiver feito alguma alteração em BD deve usar antes novamente o comando para recriar as tabelas:
heroku rum python manage.py migrate
heroku rum python manage.py createsuperuser


***********  Sempre que der erro deve verificar logs:
heroku logs --tail 
 Caso não apareça o erro, veja em cada .py se colocou o nome do projeto corretamente.

Ctrl+c


---
Agora publicar novamente:
git add .
git commit -m "Ajustando arquivos de mídia"
git push heroku master

---
Agora fazer teste em 2 modos de cadastramentos, do admin e do usuário:

https://django2-lcf.herokuapp.com/produto/

e depois acesse o admin para cadastrar produtos

https://django2-lcf.herokuapp.com/admin/core/produto/add/