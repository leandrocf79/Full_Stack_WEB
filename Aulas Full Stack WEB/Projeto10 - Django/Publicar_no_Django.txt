###################################
## No final a correção de erros!!##


Se não tiver o Git bash instalado:
https://git-scm.com/download/win

Precisa da chave SSH. Abra o diretório onde vai usar o git e Git Bash Here
 digite no terminal dele:
git init

Observe a na linha que comando que aparece se não tiver escrito MASTER digite:
$ git branch -m main master

Faça suas configurações pessoais colocando seu nome e email do GITHUB.
$ git config --global user.name "leandrocf79"
$ git config --global user.email "leandrocf79@gmail.com"


ssh-keygen

$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/lcf/.ssh/id_rsa):
Created directory '/c/Users/lcf/.ssh'.
Enter passphrase (empty for no passphrase):        (Se não digitar nada será chave pública)
Enter same passphrase again:

Your public key has been saved in /c/Users/lcf/.ssh/id_rsa.pub  (local onde a chave foi gerada)

Copiar a chave e colar no GitHub:
Para pegar a chave SSH deste arquivo, use os seguintes comandos ainda no Git Bash:

$ cd ~/.ssh/ 
depois 
$ cat id_rsa.pub

----------
Reinicie o pycharm e git init no terminal para testar.







No controlador de versões github criar um repositório, pode ser público ou privado.
No gitHub iniciar o repositório com o nome do projeto e o arquivo Readme.


portfolioleandro

Escolher Público ou privado.

Clicar em "Add .gitgnore: Python" e " Add a licence: MIT Licence"

Criar o repositório.

** Criar Branch com nome de ""master"" ou vai dar erro no push na versão atual.





Instalar as bibliotecas que serão utilizadas no projeto:

Preferência ao Django (LTS)

pip install django==3.2.15 whitenoise gunicorn heroku dj-static django-stdimage dj-database-url django-bootstrap4 psycopg2-binary django-adminlte2 


Criar arquivo e salvar as bibliotecas toda vez que instalar alguma coisa:
pip freeze > requirements.txt


Criar os arquivos necessários para o push,
no diretório raiz, New/File:


Criar .gitignore 
.gitignore
____________ veja o conteúdo



python -V
runtimes.txt  ( Observe runtimes  com "S" )


###
psycopg2-binary - é para postegresql
gunicorn - para rodar aplicação
dj-static - para associar arquivos estáticos
django-stdimage - ajudar a trabalhar com imagens
dj-database-url - é para que o heroku leia e utilize o BD
django-adminlte2 - personalizar admin
whitenoise - Vai permitir utilização de "staicfiles" na publicação. CONFIGURAR SETTINGS!!
	# http://whitenoise.evans.io/en/stable/django.html

	MIDDLEWARE = [
	    'django.middleware.security.SecurityMiddleware', 	 # whitenoise
  	    'whitenoise.middleware.WhiteNoiseMiddleware',  	 # <----- Vai permitir utilização de "staicfiles".

###


django-admin startproject lcfportfolio .

django-admin startapp core



Criar um arquivo chamado Procfile   com "P" maiúsculo.
marcar do tipo Text e ok.
Agora adicionar o conteúdo relacionado:

Veja em SETTINGS.PY     WSGI_APPLICATION = 'lcfportfolio.wsgi.application'

web: gunicorn lcfportfolio.wsgi --log-file -

Ctrl-S


Testar:
python manage.py runserver


Sair com Ctrl+c ou clicar no x


Em core criar urls.py, 
diretório templates, static(css, js, img).




Configurar settings.py:

###############################




"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^o&4jy186h&x2^3l%IYI76m2cr4(werwr4343r*&(Hdwbg0w^z^7$a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Para publicar False e veja o BD.

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'core',
    'bootstrap4',
    'django.contrib.humanize',  # Ajuda na configuração de pontuação em valores financeiros.

    'django_adminlte',  # Modificaões theme em admin
    'django_adminlte_theme',  #

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', 	 # whitenoise
    'whitenoise.middleware.WhiteNoiseMiddleware',  	 # <----- Vai permitir utilização de "staicfiles".

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'], # INSERIR TMPLATES
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


"""
#Para uso LOCALHOST, TROCAR PELO BD ACIMA E POR   DEBUG: FALSE
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # <--postgresql
        'NAME': 'postgres', # <-- Alterar nome do BD para o nome do projeto
        'USER': 'portfolio', # <-- Colocar o usuário correto
        'PASSWORD': '321654', # <-- Colocar senha corretamente
        'HOST': 'localhost',
        'port': '5432' # <-- Porta do postgresql
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [   # <-----------  Segurança para validação de senhas.
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Recursos Extras de Segurança do Django
SECURE_HSTS_SECONDS = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = 'DENY'

#SECURE_SSL_REDIRECT = True   # Habilitar SOMENTE para publicação. Comentar em fase de desenvolvimento



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# whitenoise
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


###
#Agora em settings.py, na última linha, precisa direcionar, após usuário fazer login para onde tem que ir.
LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = 'index'




#####################################



anotar views urls ...

	Após instalar algum pacote, pip:
pip freeze > requirements.txt

	Para adicionar STATIC:
python manage.py collectstatic

	Para adicionar models.py:
python manage.py makemigrations  

	Para adicionar ao BD:
python manage.py migrate 


	### MUITA CALMA NESSSA HORA PARA NÃO DAR ERRO ###


git init

heroku login

Se ja tiver um link veja em:
heroku apps

Senão criar:
heroku create leandrocf-portfolio --buildpack heroku/python


https://leandrocf-portfolio.herokuapp.com/ | https://git.heroku.com/leandrocf-portfolio.git


Pode por o nome em settings.py dessa forma, SEM BARRAS  [' leandrocf-portfolio.herokuapp.com ']

MELHOR DEIXAR ['*'] para testes, ele aceita qualquer app.

Verificar no site do heroku em dashboard
https://dashboard.heroku.com/apps

++ Clicar na aplicação criada ++ 
 	vá na aba Settings/ Add builbpack
	e selecionar   heroku/python     
(( Se usou --buildpack heroku/python já vai estar configurado))


Vá no menu Deploy e clique no icone do github para conectar. Se já conectou alguma vez
vá direto e 
 * selecione o usuáio e digite o nome do repositório, exemplo "django_heroku", clique em "search"

"conect"

ESCOLHA "master"

Enable Automatic Deploy


No pycharm em Settings.py:

Veja o BD correto e se está DEBUG = False




1) ENVIAR PARA PRODUÇÃO, pode ser pelo terminal do Pycharm ou Git Bash:

Escolha para onde quer enviar, se herou ou github e utilize o link.

$ git init

$ git add .    (com ponto, vai add tudo)
$ git commit -m "first commit"    

$ git remote add origin https://github.com/leandrocf79/NOME DO REPOSITÓRIO.git 

$ git push origin master

************************************************

se der erro:


git pull origin master --allow-unrelated-histories

git add .

git commit -m "Finalizado"

git push origin master



Tem uma outra forma de se fazer:

***ATENÇÃO, o nome RAIZ do projeto deve receber um clique pqrq que o atalho abaixo funcione!! ***

Abrir o projeto e  Clicar no nome RAIZ do projeto e  ctrl + alt + a  
vai add os arquivos no manage.py

ctrl+k
vai abrir janela de commit para enviar para o servidor.

Na telinha preta digite algo: projeto finalizado

na parte inferior clique em "commit and push"

push

Tente novamente  ctrl+k  e selecione "Amend"

Selecione para criar "origin" escreva algum nome e cole o link do github
https://github.com/leandrocf79/portfolio-leandro.git

Vai abrir uma página para altorizar.

**Se der erro novamente ctrl+SHIFT+k e do lado E
clique em heroku e adicione o link do repositório

https://git.heroku.com/leandrocf-portfolio.git


SE DER erro:
git push origin master    (origin está com link do github)

SELECIONE FAZER LOGIM COM TOKEN!!


########  ISSO DEVE RESOLVER  #########

Se der erro.
Observe a na linha que comando que aparece se não tiver escrito MASTER digite:
$ git branch -m main master

git pull origin master --allow-unrelated-histories
git add .
git commit -m "Finalizado"
git push origin master


######################################


Se der erro no commit por algum motivo será melhor ir até o heroku e fazer o push por la
clicando em "Dploy Branch"
https://dashboard.heroku.com/apps/leandrocfportfolio/deploy/github

Vai mudar o nome de heroku para origin.

Clique em push




2º ) TENTE ISSO se quiser push para o heroku, caso queira para o GITHUB É A OPÇÃO anteriror:
git init
git add .
git commit -m "Finalizado"
git push heroku master



--------
Agora em settings.py pode deixar assim:
ALLOWED_HOSTS = ['leandrocf-portfolio.herokuapp.com', '127.0.0.1']







#### ERRO 503 ####
 Página do heroku sujere 
heroku logs --tail

Vai exibir erro 503  é o Procfile

Veja em settings: WSGI_APPLICATION = 'portfolio.wsgi.application'

Utilize:
web: gunicorn portfolio.wsgi --log-file -



#### ERRO PIP ####
Procure o local do pip:
C:\Users\lcf\AppData\Local\Programs\Python\Python310\Scripts

Abra o pycharm e cole:
File / Settings / Path Variables / +   
colar e OK


#### ERRO PYTHON ####
python : O termo 'python' não é reconhecido como nome de cmdlet

Procure o local de instalação do Python e copie o caminho.

C:\Users\lcf\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.10


Clique com botão direito do mouse em "Este computador"/ propriedades/ Config. avançadas do sistema/
Avançado/variáveis de ambiente
e cole nos dois


#### ERRO SCRIPT ####
Abra o Power Shell Admin
cole o camando abaixo/enter e reinicie o pycharm

Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser

Teste agora no terminal do pycharm:
python -V


#### ERRO  {% ####

 <img src="{% static 'img/site1.jpg' %}" class="img-fluid corner"></a>

Aqui --> usar URL
<a href="{% url 'index' %}" class="btn btn-outline-warning ml-4 ">Sair</a>

Para links manter o padrão:
<a href="https://github.com/leandrocf79" class="nav-link text-white">GitHub</a>



#### ERRO  HEROKU ####
Caso der erro no heroku pelos procedimentos no terminal vá em
https://devcenter.heroku.com/articles/heroku-cli#install-the-heroku-cli

instale o software e no 
Painel de configurações do windows/ Sistema/ Sobre. 
na parte lateral direita tem "Configurações avançadas do sistema"

na aba "Avançado" procure por "Variáveis de Ambiente"

  insira nos dois locais que vão aparecer o seguinte caminho:

heroku
C:\Program Files\heroku\bin

Fechar e reiniciar o PC.

Isso deve resolver.

---
Após reiniciar, no terminal do Pycharm digite:
heroku login


;) 





git push git master