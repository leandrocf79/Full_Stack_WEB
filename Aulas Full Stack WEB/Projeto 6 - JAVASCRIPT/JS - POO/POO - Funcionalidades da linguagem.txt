//JavaScript
//https://runjs.app/


//Procedural - funções que manipulam dados
/*
function verificarDisponibilidade(quartos, ocupados){
  let restando = quartos - ocupados
  console.log("Disponíveis: " + restando)
}
let quartos  = 23
let ocupados = 8

verificarDisponibilidade(quartos, ocupados)
*/


// Orientação a objeto  - modo literal:
/*
const hotel = {// Objeto
  quartos:  23,// Atributos ou propriedade
  ocupados: 8,
  piscinas: 3,
  verificarDisponibilidade: function(){// métodos
    //this. usa os elementos dentro de onde ele está
    let restando = this.quartos - this.ocupados
    console.log("Disponíveis: " + restando)
  }
}
//novo valor
hotel.ocupados = 6
//o ponto após hotel é chamado de Operador de Membro e o = é Op de atribuição
//hotel['quartos'] = 30 //menos usado essa forma
hotel.verificarDisponibilidade()
//delete hote.piscinas
console.log(hotel.piscinas)
*/


//Notação de construtor (objeto em branco)
/*
const hotel = new Object()
hotel.quartos = 23
hotel.ocupados = 8
hotel.verificarDisponibilidade = function(){
    let restando = this.quartos - this.ocupados
    return "Disponíveis: " + restando
  }

console.log(hotel.quartos)
hotel.verificarDisponibilidade()
*/


//Criando classes
/*
class Hotel{
  //em algumas linguagens já poderia colocar o objeto direto aqui, mas no JS é usado o construtor, é como se essa CLASS fosse a planta de um projeto
  constructor(){
    console.log("Tijolo")
  }
}
const hotel = new Hotel()
*/

class Hotel{
  constructor(){
    this.quartos = 23
    this.ocupados = 8
  }
  verificarDisponibilidade(){
    let restando = this.quartos - this.ocupados
    return "Disponíveis: " + restando
}}
const hotel = new Hotel()
console.log('Quartos: '+hotel.quartos)
hotel.verificarDisponibilidade()


//-------------------------------------------------- 4 Pilares:
// Pilar 1 - Abstração
/*
Modelo, Entidade, Identidade, Características e Ações
*/
class Carro {//Modelo
  constructor(){
    this.marca  = "Volkswagen",
    this.modelo = "Gol",
    this.cor    = "prata",
    this.placa  = "EMJ-2565"
  }
  ligar(){//Ações
  }
}

const carro = new Carro()//Entidade. Esse bloco todo é Identidade para o usuário
carro.modelo = "Golf"
console.log(carro.modelo)

const carro2 = new Carro()
console.log(carro2.cor)


// Loja virtual
class Produto {
  constructor(){
    
    // roupas
    this.tamanho = "M",
    this.cor = "Vermelho",
    this.preco = "45,90",
    
    // Eletronicos
    this.altura = "50cm",
    this.largura = "30cm"  
  }
}
const produto = new Produto()
console.log(produto.cor)


//-----

// Praticando apenas, não se faz a ssim em realidade!!
    

class Usuario{
  constructor(){
    this.email = ""
    this.senha = ""       
  }
  logar(){
      //simulando BD - o usuario cadastrado
      let emailBD = "ja@gmail.com"
      let senhaBD = "1234"
      
      	if( senhaBD == this.senha ){
        	 console.log("senha válida") 
           return "senha válida"
        }
    		else{
          console.log("senha inválida")
          return "senha inválida"
        }
    }
  
    calcularDesconto( cupom ){    
        let desconto = 0
        if( cupom == "DESC20" ){
       		 desconto = 20
        }else if( cupom == "FESTA10" ){
       		 desconto = 10
        }    
        return this.subtotalCompra - desconto    
    }
}

const usuario = new Usuario()
usuario.email = "ja@gmail.com"// simulação: digitado pelo usuário
usuario.senha = "1234000" // simulação: digitado pelo usuário
usuario.logar()

//Para usar return
let mensagem = usuario.logar()
console.log(mensagem)

usuario.subtotalCompra = 500
usuario.calcularDesconto( "FESTA10" )
usuario.calcularDesconto( "DESC20" )



//-------------------------------------------------- 4 Pilares:
// Pilar 2 - Encapsulamento


class Carro {
  constructor(){
    this.modelo = "Gol"
    this.cor = "Vermelho"
  }
  
  frear(){
   /* freio com tecnologia a disco:
   Aqui fica todo o algoritimo que faz a desaceleração.
   Atualizações de desempenho etc
   */
    console.log("Parar o carro")
  }
  
}

const carro = new Carro()
carro.frear()



//----
// Encapsulamento, modificadores de acesso e getters e setter:

class ContaBancaria {

  constructor(){
    this._numeroConta = 0
    this._saldo = 0
     /* no JS o underline (_numeroConta), neste caso, significa que não 
    	deve acessar diretamete. 
    	JS ainda não tem controladores de visibilidade, exemplo, private.*/
  }
  
  sacar( valorSaque ){
    this._saldo = this._saldo - valorSaque 
  }
  
  depositar( valorDeposito ){
    this._saldo = this._saldo + valorDeposito
  }
  
  get saldo(){ //GET
    return "Saldo: " + this._saldo
  }
  set saldo(novoSaldo){ //SET
    if( novoSaldo > 0 ){
     this._saldo = novoSaldo
    }
  }
  get numeroConta(){
    //Verificar se o usuario está logado
    return "Número: " + this._numeroConta
  }
  set numeroConta( numero ){
    if( numero > 0 ){
     this._numeroConta = numero
    }
  }  
}

const conta = new ContaBancaria()
//conta.numeroConta = 70
//conta.numeroConta = 60
conta.saldo = 500 // segura
conta.sacar(50) //450
conta.depositar(100) //550
console.log( conta.saldo )


//-------------------------------------------------- 4 Pilares:
// Pilar 3 - Herança


// Classe: Cao Passaro
// Classe: Cao Passaro
class Animal {//superclasse - pai - Partes comuns a todos
  constructor(){
    this.cor = ""
    this.tamanho = 0
    this.peso = 0
  }
  correr(){
    console.log("correr")
  }
  dormir(){
    console.log("dormir")
  }
}

// extends - Cao herda de Animal 
class Cao extends Animal {//subclase - filha - Parte específica
  latir(){
    console.log("latir")
  } 
}

class Passaro extends Animal {//subclase - filha
  voar(){
    console.log("voar")
  }
}

// Instancia
const cao = new Cao()
const passaro = new Passaro()

cao.correr()
cao.latir()

passaro.correr()
passaro.voar()
passaro.cor = "Amarelo"
console.log( passaro.cor )

cao.cor="colorido"
cao.cor()

// passaro.latir()  //Obviamente vai gerar erro




//-------------------------------------------------- 4 Pilares:
// Pilar 4 - Polimorfismo

// Classe: Cao Passaro
class Animal {//superclasse - pai - Partes comuns a todos
  constructor(){           
    this.cor = ""
    this.tamanho = 0
    this.peso = 0
  }
  correr(){
      console.log("Correr")
      console.log("feito")
    	console.log("um")
      //mais 30 linhas de cód
  }
  dormir(){
    console.log("dormir")
  }
}
//--------------
// extends - Cao herda de Animal 
class Cao extends Animal {//subclase - filha - Parte específica
  latir(){
    console.log("latir")
  } 
}

class Passaro extends Animal {//subclase - filha
  //  USANDO CONSTRUTOR deve usar tambem operador super()
  constructor(){
    super() // usando parenteses para acessar a classe pai ou vai gerar erro
    	this.nativo = ""
  }
      voar(){
        console.log("voar")
      }
  	correr(){
      super.correr()  // Esse conceito se chama POLIMORFISMO
      console.log("pássaro")
      }
}
//--------------

class Papagaio extends Passaro{ // Papagaio herda de Passaro que herda de Animal
    falar(){
    console.log("O que é que foi?")  
  }
}
//--------------


// Instancia
const cao = new Cao()
const passaro = new Passaro()
const papagaio = new Papagaio()

//papagaio.correr() //herda de Animal 
//papagaio.voar()   //herda de Passaro
//papagaio.falar()
papagaio.correr()

/*
cao.correr()
cao.latir()

passaro.correr()
passaro.voar()
passaro.cor = "Amarelo"
console.log( passaro.cor )

cao.cor="colorido"
cao.cor()
*/
// passaro.latir()  //Obviamente vai gerar erro
 

//---------------------------------------------------------(1)Outro exemplo:
// Classe: Cao Passaro
class Animal {//superclasse - pai - Partes comuns a todos
  constructor(){           
    this.cor = ""
    this.tamanho = 0
    this.peso = 0
  }
  correr(){
      console.log("Correr")
      console.log("feito")
    	console.log("um")
      //mais 30 linhas de cód
  }
  dormir(){
    console.log("dormir")
  }
}
//--------------
// extends - Cao herda de Animal 
class Cao extends Animal {//subclase - filha - Parte específica
  latir(){
    console.log("latir")
  } 
  correr(){
    super.correr()
      console.log("cão")    
  }
}

class Passaro extends Animal {//subclase - filha
  //  USANDO CONSTRUTOR deve usar tambem operador super()
  constructor(){
    super() // usando parenteses para acessar a classe pai ou vai gerar erro
    this.nativo = ""
    super.cor = "cor do pássaro"
  }
      voar(){
        console.log("voar")
      }
  	correr(){
      super.correr()  // Esse conceito se chama POLIMORFISMO
      console.log("pássaro")
      }
}
//--------------

class Papagaio extends Passaro{ // Papagaio herda de Passaro que herda de Animal
    falar(){
    console.log("O que é que foi?")  
  }
}
//--------------


// Instancia
const cao = new Cao()
const passaro = new Passaro()
const papagaio = new Papagaio()

//papagaio.correr() //herda de Animal 
//papagaio.voar()   //herda de Passaro
//papagaio.falar()
//-----------------------
//papagaio.correr()
cao.correr()
passaro.cor
//-----------------------
const animal = new Animal()
animal.cor = "amarelo"
/*
cao.correr()
cao.latir()

passaro.correr()
passaro.voar()
passaro.cor = "Amarelo"
console.log( passaro.cor )

cao.cor="colorido"
cao.cor()
*/
// passaro.latir()  //Obviamente vai gerar erro



//---------------------------------------------------------(2)Outro exemplo:

// Classe: Cao Passaro
class Animal {
  constructor(pCor, pTamanaho, pPeso){  // passado como parâmetro         
    this.cor = pCor
    this.tamanho = pTamanaho
    this.peso = pPeso
  }
  correr(){
      console.log("Correr")
      console.log("feito")
    	console.log("um")
      //mais 30 linhas de cód
  }
  dormir(){
    console.log("dormir")
  }
}
//--------------
// extends - Cao herda de Animal 
class Cao extends Animal {//subclase - filha - Parte específica
  latir(){
    console.log("latir")
  } 
  correr(){
    super.correr()
      console.log("cão")    
  }
}

class Passaro extends Animal {//subclase - filha
  //  USANDO CONSTRUTOR deve usar tambem operador super()
  constructor(pCor, pTamanaho, pPeso, pNativo){
    super(pCor, pTamanaho, pPeso) // usando parenteses para acessar a classe pai ou vai gerar erro
    this.nativo = pNativo
    super.cor = "cor do pássaro"
  }
      voar(){
        console.log("voar")
      }
  	correr(){
      super.correr()  // Esse conceito se chama POLIMORFISMO
      console.log("pássaro")
      }
}
//--------------

class Papagaio extends Passaro{ 
  constructor(pCor, pTamanaho, pPeso, pNativo, pSabeCantar){
    super(pCor, pTamanaho, pPeso, pNativo)
    this.cantar = pSabeCantar
    super.cor = "vermelho"
  }
    falar(){
    console.log("O que é que foi?")  
  }
}
//--------------


// Instancia
/*
const cao = new Cao()
const passaro = new Passaro()
const papagaio = new Papagaio()
8?
//-----------------------
/*
passaro.cor

const animal = new Animal()
animal.cor = "amarelo"  */
//-----------------------
const animal = new Animal("Azul", 75, 3 )
//console.log(animal)
//console.log(animal.tamanho)

const passaro = new Passaro("Roxo", 33, 4, "America") 
console.log(passaro)
console.log(passaro.nativo)
console.log(passaro.peso)//para este observe SUPER do constructor de passaro

//pCor, pTamanaho, pPeso, pNativo, pSabeCantar
const papagaio = new Papagaio("rosa", 27, 8, "Asia", "sabe cantar bonito")
console.log(papagaio)


//---------------------------------------------------------(3)Outro exemplo:
//Atributo e método dinâmicos














