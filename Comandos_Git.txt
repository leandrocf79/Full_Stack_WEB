
https://www.codegrepper.com/code-examples/shell/config+global+user+git+command

************************************************
Resumo:

$ git init
$ git add Arquivo.txt  
$ git commit -m "first commit"    
$ git remote add origin https://github.com/leandrocf79/NOME DO REPOSITÓRIO.git 
$ git push -u origin master

************************************************
se der erro:
git remote set-url origin https://git.heroku.com/ecommerce-lcf.git

git pull origin master --allow-unrelated-histories
git add .
git commit -m "Finalizado"
git push origin master

************************************************
***TROCAR DE REPOSITÓRIO, mas continuar usando 'origin':

$ git remote rm origin
$ git remote add origin https://github.com/leandrocf79/NOME DO REPOSITÓRIO.git 

git pull origin master --allow-unrelated-histories
git add .
git commit -m "Finalizado"
git push origin master

--------------------------------------------------
Clone Repository:

git clone https://github.com/ArviSRFSDFSDFSDFSDFngo.git
Sefor o caso entre no diretório:
cd <nome do projeto>
# Create our virtual environment
python -m venv venv
windows:
venv\scripts\activate
linux:
source venv/bin/activate

pip install -r requirements.txt
pip freeze > requirements.txt
python manage.py makemigrations
python manage.py migrate
Se for o caso:
python manage.py createsuperuser
python manage.py runserver

--------------------------------------------------



### CASO "git push" DER ERRO, vá ao final deste conteúdo, tem uma explicação. ###

Detalhe importante: Todos os diretórios ou arquivos não podem ter espaço entre as palavras, pode usar underline.
Exemplo:Aulas_Full_Stack_WEB

************************************************


Baixe o GIT (Branching and Merging)

https://git-scm.com/downloads

----- Nome do arquivo a ser enviar não pode conter espaços -----


-----
Após instalado abra o terminal na pasta onde estão os arquivos que deseja fazer o commit,
clique com o botão direito do mouse selecione "Git Bash Here" e digite apenas "git" no terminal para testar: $ git

*** USE: ( Shift + Insert )  para copiar e colar se for o caso.

Observe a na linha que comando que aparece se não tiver escrito MASTER digite:
$ git branch -m main master


O comando abaixo vai criar uma nova branch main no repositório remoto, não precisa usar inicialmente.
$ git push -u origin main


Faça suas configurações pessoais colocando seu nome e email do GITHUB.

$ git config --global user.name "leandrocf79"

$ git config --global user.email "leandrocf79@gmail.com"
----------


Gerando chaves no computador
Caso não exista nenhuma chave criada, ele criará automaticamente, se já existir ele perguntará se quer sobrescrever.

$ ssh-keygen

Para pegar o conteúdo deste arquivo, rode os seguintes comandos:

$ cd ~/.ssh/ 
depois 
$ ls
$ cat id_rsa.pub
 
Selecione e copie toda a chave com ( Shift + Insert )


NA SUA PRÓPRIA CASA, NO SEU COMPUTADOR PESSOAL abra o github com seu usuário e senha.

Vá no canto superior direito da tela, na seta ao lado da sua foto clique e entre em [ Settings ], depois na 
coluna lateral esquerda entre em [ SSH and GPG keys ], agora no botão verde [ New SSH key ].
Adicione a chave, escolha um nome para ele e confirma.
------------

sair:
$ cd .. 
avançar para: Exedmplo: (/nome_do_caminho/nome_das_pastas/arquivo.txt):
$ cd /d/GitHub

************************************************

$ git init

  ( adicionar o arquivo com extençao que queira enviar ou * asterisco envia tudo que estiver no repositório escolhido)
$ git add README.txt  
$ git commit -m "first commit"    

                       ( 	    ESCOLHA O SEU REPOSITÓRIO		 )
$ git remote add origin https://github.com/leandrocf79/Full_Stack_WEB 

 //Caso faça alguma alteração no arquivo antes do PUSH utilize ($ git add) arquivo.txt novamente
$ git push -u origin master

************************************************


################

Outros recursos:

---

Este comando configurará o Git para colorir os comandos e resultados de comandos, 
facilitando o entendimento de cada iteração.
git config --global color.ui true
---

Criando arquivo: $ touch README.txt

Para criar a pasta: $ mkdir aulagit

Para acessar a pasta: $ cd aulagit
---

Ao rodarmos este comando, o Git criará uma pasta oculta chamada .git
$ git init

Este comando lista todos os arquivos e pastas, inclusive os ocultos.
$ ls -la 
---

Git utilizará para controlar as versões dos projetos. 
git config --global --add safe.directory D:/GitHub

Acessar pasta .git: $ cd .git

Listar itens internos: $ ls
---

Com a criação do repositório, criaremos um arquivo dentro desta pasta.

Criando arquivo: $ touch arquivo.txt
---

Primeiro estágio – Untracked Files
$ git status

Segundo estágio – Changes to be committed
$ git add arquivo.txt
ou
$ git add *       para add tudo

Terceiro estágio – Committed
$ git commit -m "Meu primeiro commit"

Após o primeiro pode ser apenas
$ git commit
---

Para remover um arquivo que já foi adicionado, rodem o comando abaixo:
O reset HEAD é responsável para desfazer o comando add.
$ git reset HEAD --nome_do_arquivo
---

Este comando, além de mostrar os logs, mostrará a alteração que foi feita em cada arquivo comitado
$ git log -p

últimos comits
$ git log -p -2

$ git log --autor="leandrocf79"
$ git log shortlog   (mostra todos os outores)
$ git log shortlog -sn
$ git log --graph   ( mostra de forma gráfica)

$ git show (numero da hash aqui para ver controle de versões)

Este comando, além de mostrar os logs, mostrará a alteração que foi feita em cada arquivo comitado
$ git log --stat


Para deixar a listagem de logs mais enxuta, removendo alguns dados que poluem o seu terminal.
$ git log --pretty=oneline

ou
$ git log --pretty=format:"%h - %an, %ar : %s"
$ git log --since=2.days ou $ git log --since=2.weeks
---

Ignorando arquivo
Agora, no arquivo .gitignore, adicionem este arquivo, para que seja ignorado.

.idea/
gitignore.txt
---

Depois de rodarem este comando, se rodarem o git status, 
verão que ele sai do segundo estágio e volta ao primeiro, como Untracked 
para que ele não faça parte do commit.para que ele não faça parte do commit.
$ git reset HEAD teste2.txt
---

sempre usar para verificar se houve alguma alteração errada no arquivo

$ git diff

$ git diff --name-only

$ git commit -am "arquivo editado"
---

Voltando versões

$ git checkout 
---

Clonar repositório em um computador novo

$ git clone (aqui é o ssh da pasta no github)
---

Fork pega um trab que não é seu para que passa trabalhar ne e depois devolver.
Está na próproia aba do github
---

retornar para a versão master, e ignorar este branch que foi criado.

$ git checkout master

Outra forma de acessar commits anteriores, é com o seguinte comando:

$ git reset HEAD~1 ou $ git reset HEAD~2 ou $ git reset HEAD~3

Porém, existem dois tipos de reset HEAD: soft e hard.

$ git reset HEAD~1 --soft     ou 
$ git reset HEAD~1 --hard
---

Criar um novo BRANCH para trabalhar em alguma alteração, por exemplo, 
correção de um bug enquanto outras pessoas também trabalham no mesmo arquivo.
Ver:
$ git branch

$ git checkout -b novoBranch (nome à sua escolha)
para voltar:
$ git checkout master

apagar o branch
$ git branch -D novoBranch
---

Ignorar arquivos GitIgnore

$ vi .gitignore
(dentro do arquivo que vai abrir colocar *.txt 
* para tudo
. e a extenção desejada)
esc
:wq  ( para salvar e fechar)

--- ****************


DELETAR um arquivo local, no computador:

1. Os arquivos deverão estar no computador, se for o caso use
$ git pull origin master
para baixar do github e fazer as modificações.

2. Vamos então remover a pasta e/ou os arquivos:
$ git rm teste.txt
 ou
$ git rm -r [Nome do Arquivo ou Pasta]

3. Em seguida fazemos o commit da modificação:
$ git commit -m "Remove Arquivo e Pasta"

4. E finalmente: sincronizamos com o repositório remoto:
$ git push origin master

************************************************
************************************************


Fez algo errado no último commit, mas não deu push
Em situações em que você precisa corrigir seu último commit (antes de executar push para o remote) 
o comando 

$ git commit --amend 

após atualizar o arquivo vai ajudar a resolver.
****************


Escreu a mensagem de commit errada.
Se precisar corrigir a mensagem de commit basta rodar o comando abaixo com a nova mensagem:

$ git commit --amend -m "Nova mensagem de commit"
****************


Esqueceu de adicionar um arquivo ao commit.
Se precisar adicionar um arquivo que ficou fora do commit ou se precisou fazer alguma alteração em um arquivo:

$ git add arquivo-esquecido.md
$ git commit --amend

*** Note que, se você já fez o push para o seu repositório remoto, será necessário sobrescrever 
o commit refazendo o push com a opção --force. ***Tome cuidado***  com essa opção porque ela 
sobrescreve seu commit no remote.
****************


Precisa desfazer algo do último commit
Às vezes precisamos desfazer alguma modificação feita. Para isso:

$ git --reset 
****************


Adicionar um arquivo que não queria commitar
Se não fez o commit basta resetar o arquivo com:

$ git reset -- caminho/do/arquivo.jpg

Um detalhe interessante:
 
é sempre bom adicionar -- antes do caminho para indicar que é um arquivo e não o nome de uma branch.
Caso tenha uma branch com o mesmo nome do arquivo, esse comando pode acabar em resultados indesejados.
****************


Se já fez o commit será necessário resetar o commit, depois remover o arquivo e fazer um novo commit:

$ git reset --soft HEAD~1
$ rm caminho/do/arquivo.jpg
$git commit -m "Removendo arquivo"

Note que, nesse caso, remove o arquivo do computador. Existem situações em que não quer remover o arquivo local,
isso será descrito no tópico a seguir.
****************


Fez commit de uma pasta ou arquivo, mas quer que o Git o ignore.
Nesse caso, quer que o arquivo ou pasta seja removido do repositório remoto e
que ele pare de ser observado pelo Git. Você pode seguir os seguintes passos:

$ git reset pasta_para_ser_ignorada/
$ echo "pasta_para_ser_ignorada" >> .gitignore
$ git add .gitignore
$ git rm -r pasta_para_ser_ignorada/
$ git commit -m "Removendo pasta do git"

Essa sequência de comandos é um pouco mais complicada. Primeiro usamos o comando reset na pasta que precisa ser
removida do Git. Depois disso, incluir essa pasta no arquivo .gitignore para que o Git passe a ignorar as 
modificações que ocorram nela e adicionar o arquivo ao commit. Em seguida pode remover a pasta do Git, 
mas mantendo a cópia local, com o comando git rm -r. Finalmente executar um novo commit para registrar
as ações realizadas.
****************


Para desfazer as alterações realizadas no código.
Se quiser voltar seu código inteiro para o estado de algum commit anterior, mas quer manter as adições atuais,
pode usar:
$ git reset --soft HEAD~1
# ou
$ git reset --soft ed51df2 
No primeiro caso, o número indica a quantidade de commits que irá voltar atrás. 
No segundo exemplo, entra o código exato do commit ao qual vai retornar.

Se não quiser manter as alterações atuais do código, pode usar --hard no lugar de --soft, mas tome cuidado, 
com essa opção o código será perdido.

Também existe uma outra opção, caso queria desfazer alterações em arquivos específicos, por exemplo, que 
tenha modificado um arquivo que não deveria e removido outro sem querer, mas quer manter todas as outras 
modificações. Se ainda não fez o commit, basta usar o comando checkout:

$ git checkout HEAD -- arquivo_deletado.txt arquivo_modificado.txt

Dessa maneira ambos arquivos retornam ao estado do commit anterior.
****************


O nome da branch criado está errado.
Se criou uma branch e percebeu que está com o nome incorreto, pode usar:

$ git branch -m branch-errada branch-correta

Caso você já tenha feito push dessa branch, será necessário apagá-la no remote também:

$ git push origin --delete branch-errada
$ git push origin branch-correta

************************************************

###        CASO "git push" DER ERRO:        ###

************************************************
Se já tiver um clone do repositório no computador tente: 
$ git pull 

Se precisar baixar faça um clone do repositório desejado:
$ git clone https://github.com/leandrocf79/Full_Stack_WEB


Abra o repositório que baixou no computador inicia o Git Bash dentro:

$ git init
$ git add arquivo.txt    [adicione o arquivo que queira enviar para o repositório]
$ git commit -m "escreva algo aqui"
$ git remote add origin https://github.com/leandrocf79/Full_Stack_WEB.git

[SE DER ERRO SUBSTITUA "add" por "set-url"]

$ git remote set-url origin https://github.com/leandrocf79/Full_Stack_WEB.git
$ git push -u origin master

Pronto!! Caso o ERRO persista crie e troque a chave SSH e repita os comandos acima.


