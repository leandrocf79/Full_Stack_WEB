Enviar email com workers

Frontend--> app(python) | -> BD(Postgres)
			| ----> queue(Redis) <----- | Worker_1(Python)
					  	  <-| Worker_2(Python)
						  <-| Worker_3(Python)
					  	  <-| ...

Roteiro:


1-Iniciar composição com BD
2-Usar volumes e scrips de BD
3-Iniciar frontend
4-app para enfileirar mensagens
5-Configurando proxy reverso
6-Redes, dependêcia e BD
7-Fila e workers
8-Escalar é preciso
9-12 factors
10-Sobrescrevendo localmente

-----


Criar um diretótio principal e suas sub-pastas e arquivos:
_______
email-worker-compose
	scripts (check.sql, init.sql)
	web (index.html)
	app (app.sh, sender.py)
	nginx (default.conf) ---> Aqui vai deixar mais seguro fazendo o proxy reverso, é um desvio intermediário para o BD
	worker (app.sh, Dockerfile, worker.py)
   docker-compose.yml
   docker-compose.override.yml
_______


No diretório principal email-worker-compose, criar:

docker-compose.yml o seguinte conteúdo:

version: '3'
volumes:
  dados:
networks:
  banco:
  web:
  fila:
services:
  db:
    image: postgres:9.6
    volumes:
      # Volume dos dados
      - dados:/var/lib/postgresql/data
      # Scripts
      - ./scripts:/scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes:
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    environment:
      - DB_NAME=abc_sender
  queue:
    image: redis:3.2
    networks:
      - fila
  worker:
    build: worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks:
      - fila
    depends_on:
      - queue

-------------------------
No windows abra o Docker.
No terminal:
Acessar o diretório principal, pode ser pelo terminal do editor também:

cd Desktop\curso-docker-leandro\email-worker-compose

Para criar ou executar:
docker-compose up -d

Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Executar BD:
docker-compose exec db psql -U postgres -c '\l'
-U (Usuário)
-c (comando)
'\l' (Listar os BDs na instância ativa)

Parar docker-compose:
docker-compose down



###########
docker-compose.override.yml o seguinte conteúdo:

version: '3'
services:
  app:
    environment:
      - DB_NAME=email_sender





######################################################


Na pasta scripts (check.sql, init.sql) o seguinte conteúdo:
check.sql:

\l
\c email_sender
\d emails

###########
init.sql:

create database email_sender;

\c email_sender

create table emails (
    id serial not null,
    data timestamp not null default current_timestamp,
    assunto varchar(100) not null,
    mensagem varchar(250) not null
);

-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

Executar para verificar se tudo está correto:
docker-compose exec db psql -U postgres -f /scripts/check.sql
-f (files)
/scripts/check.sql (é o arquivo a ser executado)

Fechar ativos:
docker-compose down


######################################################



Na pasta web (index.html) o seguinte conteúdo:

<html>
    <head>
        <meta charset='uft-8'>

        <title>E-mail Sender</title>

        <style>
            label { display: block; }
            textarea, input { width: 400px; }
        </style>
    </head>
    <body class="container">
        <h1>E-mail Sender</h1>
        <form action="http://localhost/api" method="POST">
            <div>
                <label for="assunto">Assunto</label>
                <input type="text" name="assunto">
            </div>

            <div>
                <label for="mensagem">Mensagem</label>
                <textarea name="mensagem" cols="50" rows="6"></textarea>
            </div>

            <div>
                <button>Enviar !</button>
            </div>
        </form>
    </body>
</html>

-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

Executar para verificar se tudo está correto:
http://localhost/

######################################################




Na pasta app (app.sh, sender.py) o seguinte conteúdo:
app.sh:

#!/bin/sh

pip install bottle==0.12.13 psycopg2==2.7.3.2 redis==2.10.5
python -u sender.py

###########
sender.py:

import psycopg2
import redis
import json
import os
from bottle import Bottle, request


class Sender(Bottle):
    def __init__(self):
        super().__init__()
        self.route('/', method='POST', callback=self.send)
        
        redis_host = os.getenv('REDIS_HOST', 'queue')
        self.fila = redis.StrictRedis(host=redis_host, port=6379, db=0)

        db_host = os.getenv('DB_HOST', 'db')
        db_user = os.getenv('DB_USER', 'postgres')
        db_name = os.getenv('DB_NAME', 'sender')
        dsn = f'dbname={db_name} user={db_user} host={db_host}'
        self.conn = psycopg2.connect(dsn)
        
    def register_message(self, assunto, mensagem):
        SQL = 'INSERT INTO emails (assunto, mensagem) VALUES (%s, %s)'
        cur = self.conn.cursor()
        cur.execute(SQL, (assunto, mensagem))
        self.conn.commit()
        cur.close()

        msg = {'assunto': assunto, 'mensagem': mensagem}
        self.fila.rpush('sender', json.dumps(msg))

        print('Mensagem registrada !')

    def send(self):
        assunto = request.forms.get('assunto')
        mensagem = request.forms.get('mensagem')

        self.register_message(assunto, mensagem)
        return 'Mensagem enfileirada ! Assunto: {} Mensagem: {}'.format(
            assunto, mensagem
        )

if __name__ == '__main__':
    sender = Sender()
    sender.run(host='0.0.0.0', port=8080, debug=True)

######################################################

Na pasta nginx (default.conf) o seguinte conteúdo:

server {
    listen 80;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location /api {
        proxy_pass http://app:8080/;
        proxy_http_version 1.1;
    }
}


-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

Executar para verificar se tudo está correto:
docker-compose exec db psql -U postgres -d email_sender -c 'select * from emails'

Verificar se está tudo certo:
docker-compose ps

Fechar ativos:
docker-compose down


######################################################



Na pasta worker (app.sh, Dockerfile, worker.py) o seguinte conteúdo:
app.sh:

#!/bin/sh

pip install redis==2.10.5
python -u worker.py


###########----> Escalar a quantidade de workers ############

Dockerfile:

FROM python:3.6
LABEL maintainer 'Aluno Cod3r <aluno: leandrocf79@gmail.com>'

ENV PYTHONUNBUFFERED 1
RUN pip install redis==2.10.5

ENTRYPOINT ["/usr/local/bin/python"]



-------------------
No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d

####  Executar para escalar a quantidade de workers desejados:
docker-compose up -d --scale worker=5

Verificar se está tudo certo:
docker-compose logs -f -t worker
#docker-compose ps

Fechar ativos:
Ctrl+C
docker-compose down



###########
worker.py:

import redis
import json
import os
from time import sleep
from random import randint

if __name__ == '__main__':
    redis_host = os.getenv('REDIS_HOST', 'queue')
    r = redis.Redis(host=redis_host, port=6379, db=0)
    print('Aguardando mensagens ...')
    while True:
        mensagem = json.loads(r.blpop('sender')[1])
        # Simulando envio de e-mail...
        print('Mandando a mensagem:', mensagem['assunto'])
        sleep(randint(15, 45))
        print('Mensagem', mensagem['assunto'], 'enviada')





######################################################

No terminal:
Verificar se há algum processo executando:
docker-compose ps
Onde tiver "UP" está ativo.

Se setiver executando.

Fechar ativos e iniciar novamente:
docker-compose down

Para criar ou executar:
docker-compose up -d









